import { Keyring } from '@polkadot/api';
import { TypeRegistry } from '@polkadot/types';
import { SignerPayloadJSON, SignerPayloadRaw, SignerResult } from '@polkadot/types/types';
import { PolkadotSigner, SigningManager } from '@polymeshassociation/signing-manager-types';
import { KeyRingType, PrivateKey } from '../types';
/**
 * Manages signing payloads with a set of pre-loaded accounts in a Keyring
 */
export declare class KeyringSigner implements PolkadotSigner {
    private readonly keyring;
    private readonly registry;
    private currentId;
    /**
     * @hidden
     */
    constructor(keyring: Keyring, registry: TypeRegistry);
    /**
     * Sign a payload
     */
    signPayload(payload: SignerPayloadJSON): Promise<SignerResult>;
    /**
     * Sign raw data
     */
    signRaw(raw: SignerPayloadRaw): Promise<SignerResult>;
    /**
     * @hidden
     *
     * Get a pair from the keyring
     *
     * @throws if there is no pair with that address
     */
    private getPair;
}
/**
 * Signing manager that holds private keys in memory
 */
export declare class LocalSigningManager implements SigningManager {
    private keyring;
    private externalSigner;
    private hasFormat?;
    /**
     * Create an instance of the Local Signing Manager and populates it with the passed Accounts
     *
     * @param args.accounts - array of private keys
     */
    static create(args: {
        accounts: PrivateKey[];
        type?: KeyRingType;
    }): Promise<LocalSigningManager>;
    /**
     * Generate a new Polymesh account and return its mnemonic. This account can be used with the Local Signing Manager to sign transactions via the Polymesh SDK
     *
     * @note make sure to store the returned mnemonic somewhere safe since it will not be accessible by any means after being returned, and it gives full control over the account
     */
    static generateAccount(): string;
    /**
     * @hidden
     */
    private constructor();
    /**
     * Set the SS58 format in which returned addresses will be encoded
     */
    setSs58Format(ss58Format: number): void;
    /**
     * Return the addresses of all Accounts in the Signing Manager
     *
     * @throws if called before calling `setSs58Format`. Normally, `setSs58Format` will be called by the SDK when instantiated
     */
    getAccounts(): Promise<string[]>;
    /**
     * Return a signer object that uses the underlying keyring pairs to sign
     */
    getExternalSigner(): PolkadotSigner;
    /**
     * Add a new Account to the Signing Manager via private key
     *
     * @returns the newly added Account's address, encoded with the Signing Manager's
     *   current SS58 format
     *
     * @throws if called before calling `setSs58Format`. Normally, `setSs58Format` will be called by the SDK when instantiated.
     *   If Accounts need to be pre-loaded, it should be done by passing them to the `create` method
     */
    addAccount(account: PrivateKey): string;
    /**
     * @hidden
     */
    private _addAccount;
    /**
     * @hidden
     *
     * Throw an error if the SS58 format hasn't been set yet
     */
    private assertFormatSet;
}
