import { MultiSig } from "../entities/Account/MultiSig";
import { Account, AuthorizationRequest, Context, Subsidy } from "../../internal";
import { AcceptPrimaryKeyRotationParams, AccountBalance, CreateMultiSigParams, InviteAccountParams, ModifySignerPermissionsParams, NoArgsProcedureMethod, ProcedureMethod, RemoveSecondaryAccountsParams, SubCallback, SubsidizeAccountParams, UnsubCallback } from "../../types";
/**
 * Handles functionality related to Account Management
 */
export declare class AccountManagement {
    private context;
    /**
     * @hidden
     */
    constructor(context: Context);
    /**
     * Disassociate the signing Account from its Identity. This operation can only be done if the signing Account is a secondary Account
     */
    leaveIdentity: NoArgsProcedureMethod<void>;
    /**
     * Remove a list of secondary Accounts associated with the signing Identity
     */
    removeSecondaryAccounts: ProcedureMethod<RemoveSecondaryAccountsParams, void>;
    /**
     * Revoke all permissions of a list of secondary Accounts associated with the signing Identity
     *
     * @throws if the signing Account is not the primary Account of the Identity whose secondary Account permissions are being revoked
     */
    revokePermissions: ProcedureMethod<{
        secondaryAccounts: (string | Account)[];
    }, void>;
    /**
     * Modify all permissions of a list of secondary Accounts associated with the signing Identity
     *
     * @throws if the signing Account is not the primary Account of the Identity whose secondary Account permissions are being modified
     */
    modifyPermissions: ProcedureMethod<ModifySignerPermissionsParams, void>;
    /**
     * Send an invitation to an Account to join the signing Identity as a secondary Account
     *
     * @note this will create an {@link api/entities/AuthorizationRequest!AuthorizationRequest | Authorization Request} which has to be accepted by the `targetAccount`.
     *   An {@link api/entities/Account!Account} or {@link api/entities/Identity!Identity} can fetch its pending Authorization Requests by calling {@link api/entities/common/namespaces/Authorizations!Authorizations.getReceived | authorizations.getReceived}.
     *   Also, an Account or Identity can directly fetch the details of an Authorization Request by calling {@link api/entities/common/namespaces/Authorizations!Authorizations.getOne | authorizations.getOne}
     */
    inviteAccount: ProcedureMethod<InviteAccountParams, AuthorizationRequest>;
    /**
     * Freeze all of the secondary Accounts in the signing Identity. This means revoking their permission to perform any operation on the blockchain and freezing their funds until the Accounts are unfrozen via {@link unfreezeSecondaryAccounts}
     */
    freezeSecondaryAccounts: NoArgsProcedureMethod<void>;
    /**
     * Unfreeze all of the secondary Accounts in the signing Identity. This will restore their permissions as they were before being frozen
     */
    unfreezeSecondaryAccounts: NoArgsProcedureMethod<void>;
    /**
     * Send an Authorization Request to an Account to subsidize its transaction fees
     *
     * @note this will create an {@link api/entities/AuthorizationRequest!AuthorizationRequest | Authorization Request} which has to be accepted by the `beneficiary` Account.
     *   An {@link api/entities/Account!Account} or {@link api/entities/Identity!Identity} can fetch its pending Authorization Requests by calling {@link api/entities/common/namespaces/Authorizations!Authorizations.getReceived | authorizations.getReceived}.
     *   Also, an Account or Identity can directly fetch the details of an Authorization Request by calling {@link api/entities/common/namespaces/Authorizations!Authorizations.getOne | authorizations.getOne}
     */
    subsidizeAccount: ProcedureMethod<SubsidizeAccountParams, AuthorizationRequest>;
    /**
     * Create a MultiSig Account
     *
     * @note this will create an {@link api/entities/AuthorizationRequest!AuthorizationRequest | Authorization Request} for each signing Account which will have to be accepted before they can approve transactions. None of the signing Accounts can be associated with an Identity when accepting the Authorization
     *   An {@link api/entities/Account!Account} or {@link api/entities/Identity!Identity} can fetch its pending Authorization Requests by calling {@link api/entities/common/namespaces/Authorizations!Authorizations.getReceived | authorizations.getReceived}.
     *   Also, an Account or Identity can directly fetch the details of an Authorization Request by calling {@link api/entities/common/namespaces/Authorizations!Authorizations.getOne | authorizations.getOne}
     */
    createMultiSigAccount: ProcedureMethod<CreateMultiSigParams, MultiSig>;
    /**
     * Get the free/locked POLYX balance of an Account
     *
     * @param args.account - defaults to the signing Account
     *
     * @note can be subscribed to
     */
    getAccountBalance(args?: {
        account: string | Account;
    }): Promise<AccountBalance>;
    getAccountBalance(callback: SubCallback<AccountBalance>): Promise<UnsubCallback>;
    getAccountBalance(args: {
        account: string | Account;
    }, callback: SubCallback<AccountBalance>): Promise<UnsubCallback>;
    /**
     * Return an Account instance from an address. If the Account has multiSig signers, the returned value will be a {@link api/entities/Account/MultiSig!MultiSig} instance
     */
    getAccount(args: {
        address: string;
    }): Promise<Account | MultiSig>;
    /**
     * Return the signing Account, or null if no signing Account has been set
     */
    getSigningAccount(): Account | null;
    /**
     * Return a list that contains all the signing Accounts associated to the SDK instance's Signing Manager
     *
     * @throws â€” if there is no Signing Manager attached to the SDK
     */
    getSigningAccounts(): Promise<Account[]>;
    /**
     * Return an Subsidy instance for a pair of beneficiary and subsidizer Account
     */
    getSubsidy(args: {
        beneficiary: string | Account;
        subsidizer: string | Account;
    }): Subsidy;
    /**
     * Returns `true` @param args.address is a valid ss58 address for the connected network
     */
    isValidAddress(args: {
        address: string;
    }): boolean;
    /**
     * Accepts the authorization to become the new primary key of the issuing identity.
     *
     * If a CDD service provider approved this change (or this is not required), primary key of the Identity is updated.
     *
     * @note The caller (new primary key) must be either a secondary key of the issuing identity, or
     * unlinked to any identity.
     */
    acceptPrimaryKey: ProcedureMethod<AcceptPrimaryKeyRotationParams, void>;
}
//# sourceMappingURL=AccountManagement.d.ts.map