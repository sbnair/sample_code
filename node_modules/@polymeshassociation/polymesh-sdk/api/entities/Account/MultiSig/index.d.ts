import BigNumber from 'bignumber.js';
import { UniqueIdentifiers } from "./..";
import { MultiSigProposal } from "../../MultiSigProposal";
import { Account, Context, Identity } from "../../../../internal";
import { ModifyMultiSigParams, MultiSigDetails, ProcedureMethod } from "../../../../types";
/**
 * Represents a MultiSig Account. A MultiSig Account is composed of one or more signing Accounts. In order to submit a transaction, a specific amount of those signing Accounts must approve it first
 */
export declare class MultiSig extends Account {
    /**
     * @hidden
     */
    constructor(identifiers: UniqueIdentifiers, context: Context);
    /**
     * Return details about this MultiSig such as the signing Accounts and the required number of signatures to execute a MultiSigProposal
     */
    details(): Promise<MultiSigDetails>;
    /**
     * Given an ID, fetch a { @link api/entities/MultiSigProposal!MultiSigProposal } for this MultiSig
     *
     * @throws if the MultiSigProposal is not found
     */
    getProposal(args: {
        id: BigNumber;
    }): Promise<MultiSigProposal>;
    /**
     * Return all { @link api/entities/MultiSigProposal!MultiSigProposal } for this MultiSig Account
     */
    getProposals(): Promise<MultiSigProposal[]>;
    /**
     * Returns the Identity of the MultiSig creator. This Identity can add or remove signers directly without creating a MultiSigProposal first.
     */
    getCreator(): Promise<Identity>;
    /**
     * Modify the signers for the MultiSig. The signing Account must belong to the Identity of the creator of the MultiSig
     */
    modify: ProcedureMethod<Pick<ModifyMultiSigParams, 'signers'>, void>;
}
//# sourceMappingURL=index.d.ts.map