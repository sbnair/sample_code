"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiSig = void 0;
const MultiSigProposal_1 = require("../../MultiSigProposal");
const internal_1 = require("../../../../internal");
const types_1 = require("../../../../types");
const conversion_1 = require("../../../../utils/conversion");
const internal_2 = require("../../../../utils/internal");
/**
 * Represents a MultiSig Account. A MultiSig Account is composed of one or more signing Accounts. In order to submit a transaction, a specific amount of those signing Accounts must approve it first
 */
class MultiSig extends internal_1.Account {
    /**
     * @hidden
     */
    constructor(identifiers, context) {
        super(identifiers, context);
        this.modify = (0, internal_2.createProcedureMethod)({
            getProcedureAndArgs: modifyArgs => [internal_1.modifyMultiSig, Object.assign({ multiSig: this }, modifyArgs)],
        }, context);
    }
    /**
     * Return details about this MultiSig such as the signing Accounts and the required number of signatures to execute a MultiSigProposal
     */
    details() {
        return __awaiter(this, void 0, void 0, function* () {
            const { context: { polymeshApi: { query: { multiSig }, }, }, context, address, } = this;
            const rawAddress = (0, conversion_1.stringToAccountId)(address, context);
            const [rawSigners, rawSignersRequired] = yield Promise.all([
                multiSig.multiSigSigners.entries(rawAddress),
                multiSig.multiSigSignsRequired(rawAddress),
            ]);
            const signers = rawSigners.map(([{ args: [, signatory], },]) => {
                return (0, conversion_1.signerValueToSigner)((0, conversion_1.signatoryToSignerValue)(signatory), context);
            });
            const requiredSignatures = (0, conversion_1.u64ToBigNumber)(rawSignersRequired);
            return { signers, requiredSignatures };
        });
    }
    /**
     * Given an ID, fetch a { @link api/entities/MultiSigProposal!MultiSigProposal } for this MultiSig
     *
     * @throws if the MultiSigProposal is not found
     */
    getProposal(args) {
        return __awaiter(this, void 0, void 0, function* () {
            const { id } = args;
            const { address, context } = this;
            const proposal = new MultiSigProposal_1.MultiSigProposal({ multiSigAddress: address, id }, context);
            const exists = yield proposal.exists();
            if (!exists) {
                throw new internal_1.PolymeshError({
                    code: types_1.ErrorCode.DataUnavailable,
                    message: `Proposal with ID "${id}" was not found`,
                });
            }
            return proposal;
        });
    }
    /**
     * Return all { @link api/entities/MultiSigProposal!MultiSigProposal } for this MultiSig Account
     */
    getProposals() {
        return __awaiter(this, void 0, void 0, function* () {
            const { context: { polymeshApi: { query: { multiSig }, }, }, context, address, } = this;
            const rawAddress = (0, conversion_1.stringToAccountId)(address, context);
            const rawProposals = yield multiSig.proposalIds.entries(rawAddress);
            return rawProposals.map(([, rawId]) => {
                const id = (0, conversion_1.u64ToBigNumber)(rawId.unwrap());
                return new MultiSigProposal_1.MultiSigProposal({ multiSigAddress: address, id }, context);
            });
        });
    }
    /**
     * Returns the Identity of the MultiSig creator. This Identity can add or remove signers directly without creating a MultiSigProposal first.
     */
    getCreator() {
        return __awaiter(this, void 0, void 0, function* () {
            const { context: { polymeshApi: { query: { multiSig }, }, }, context, address, } = this;
            const rawAddress = (0, conversion_1.addressToKey)(address, context);
            const rawCreatorDid = yield multiSig.multiSigToIdentity(rawAddress);
            if (rawCreatorDid.isEmpty) {
                throw new internal_1.PolymeshError({
                    code: types_1.ErrorCode.DataUnavailable,
                    message: 'No creator was found for this MultiSig address',
                });
            }
            const did = (0, conversion_1.identityIdToString)(rawCreatorDid);
            return new internal_1.Identity({ did }, context);
        });
    }
}
exports.MultiSig = MultiSig;
//# sourceMappingURL=index.js.map