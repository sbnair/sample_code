"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMissingTransactionPermissions = exports.getMissingAssetPermissions = exports.getMissingPortfolioPermissions = void 0;
const lodash_1 = require("lodash");
const types_1 = require("../../../types");
const conversion_1 = require("../../../utils/conversion");
const internal_1 = require("../../../utils/internal");
/**
 * Calculate the difference between the required Transaction permissions and the current ones
 */
function getMissingPortfolioPermissions(requiredPermissions, currentPermissions) {
    if (currentPermissions === null) {
        return undefined;
    }
    else if (requiredPermissions === null) {
        return null;
    }
    else if (requiredPermissions) {
        const { type: portfoliosType, values: portfoliosValues } = currentPermissions;
        if (requiredPermissions.length) {
            let missingPermissions;
            const portfolioComparator = (a, b) => {
                const aId = (0, conversion_1.portfolioToPortfolioId)(a);
                const bId = (0, conversion_1.portfolioToPortfolioId)(b);
                return (0, lodash_1.isEqual)(aId, bId);
            };
            if (portfoliosType === types_1.PermissionType.Include) {
                missingPermissions = (0, lodash_1.differenceWith)(requiredPermissions, portfoliosValues, portfolioComparator);
            }
            else {
                missingPermissions = (0, lodash_1.intersectionWith)(requiredPermissions, portfoliosValues, portfolioComparator);
            }
            if (missingPermissions.length) {
                return missingPermissions;
            }
        }
    }
    return undefined;
}
exports.getMissingPortfolioPermissions = getMissingPortfolioPermissions;
/**
 * @hidden
 *
 * Calculate the difference between the required Asset permissions and the current ones
 */
function getMissingAssetPermissions(requiredPermissions, currentPermissions) {
    if (currentPermissions === null) {
        return undefined;
    }
    else if (requiredPermissions === null) {
        return null;
    }
    else if (requiredPermissions) {
        const { type: permissionType, values: assetValues } = currentPermissions;
        if (requiredPermissions.length) {
            let missingPermissions;
            if (permissionType === types_1.PermissionType.Include) {
                missingPermissions = (0, lodash_1.differenceBy)(requiredPermissions, assetValues, 'ticker');
            }
            else {
                missingPermissions = (0, lodash_1.intersectionBy)(requiredPermissions, assetValues, 'ticker');
            }
            if (missingPermissions.length) {
                return missingPermissions;
            }
        }
    }
    return undefined;
}
exports.getMissingAssetPermissions = getMissingAssetPermissions;
/**
 * @hidden
 *
 * Calculate the difference between the required Transaction permissions and the current ones
 */
function getMissingTransactionPermissions(requiredPermissions, currentPermissions) {
    // these transactions are allowed to any Account, independent of permissions
    const exemptedTransactions = [
        types_1.TxTags.identity.LeaveIdentityAsKey,
        types_1.TxTags.identity.JoinIdentityAsKey,
        types_1.TxTags.multiSig.AcceptMultisigSignerAsKey,
        ...(0, lodash_1.difference)(Object.values(types_1.TxTags.balances), [
            types_1.TxTags.balances.DepositBlockRewardReserveBalance,
            types_1.TxTags.balances.BurnAccountBalance,
        ]),
        types_1.ModuleName.Staking,
        types_1.ModuleName.Sudo,
        types_1.ModuleName.Session,
        types_1.ModuleName.Authorship,
        types_1.ModuleName.Babe,
        types_1.ModuleName.Grandpa,
        types_1.ModuleName.ImOnline,
        types_1.ModuleName.Indices,
        types_1.ModuleName.Scheduler,
        types_1.ModuleName.System,
        types_1.ModuleName.Timestamp,
    ];
    if (currentPermissions === null) {
        return undefined;
    }
    if (requiredPermissions === null) {
        return null;
    }
    if (!(requiredPermissions === null || requiredPermissions === void 0 ? void 0 : requiredPermissions.length)) {
        return undefined;
    }
    const { type: transactionsType, values: transactionsValues, exceptions = [], } = currentPermissions;
    let missingPermissions;
    const exceptionMatches = (0, lodash_1.intersection)(requiredPermissions, exceptions);
    if (transactionsType === types_1.PermissionType.Include) {
        const includedTransactions = (0, lodash_1.union)(transactionsValues, exemptedTransactions);
        missingPermissions = (0, lodash_1.union)((0, lodash_1.differenceWith)(requiredPermissions, includedTransactions, internal_1.isModuleOrTagMatch), exceptionMatches);
    }
    else {
        /*
         * if the exclusion is a module, we only remove it from the list if the module itself is present in `exemptedTransactions`.
         *   Otherwise, if, for example, `transactionsValues` contains `ModuleName.Identity`,
         *   since `exemptedTransactions` contains `TxTags.identity.LeaveIdentityAsKey`, we would be
         *   removing the entire Identity module from the result, which doesn't make sense
         */
        const txComparator = (tx, exemptedTx) => {
            if (!tx.includes('.')) {
                return tx === exemptedTx;
            }
            return (0, internal_1.isModuleOrTagMatch)(tx, exemptedTx);
        };
        const excludedTransactions = (0, lodash_1.differenceWith)(transactionsValues, exemptedTransactions, txComparator);
        missingPermissions = (0, lodash_1.difference)((0, lodash_1.intersectionWith)(requiredPermissions, excludedTransactions, internal_1.isModuleOrTagMatch), exceptionMatches);
    }
    if (missingPermissions.length) {
        return missingPermissions;
    }
    return undefined;
}
exports.getMissingTransactionPermissions = getMissingTransactionPermissions;
//# sourceMappingURL=helpers.js.map