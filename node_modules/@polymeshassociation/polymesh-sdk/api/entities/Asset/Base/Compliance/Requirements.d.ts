import { BaseAsset, Context, Namespace } from "../../../../../internal";
import { AddAssetRequirementParams, ComplianceRequirements, ModifyComplianceRequirementParams, NoArgsProcedureMethod, ProcedureMethod, RemoveAssetRequirementParams, SetAssetRequirementsParams, SubCallback, UnsubCallback } from "../../../../../types";
/**
 * Handles all Asset Compliance Requirements related functionality
 */
export declare class Requirements extends Namespace<BaseAsset> {
    /**
     * @hidden
     */
    constructor(parent: BaseAsset, context: Context);
    /**
     * Add a new compliance requirement to the the Asset. This doesn't modify existing requirements
     */
    add: ProcedureMethod<AddAssetRequirementParams, void>;
    /**
     * Remove an existing compliance requirement from the Asset
     */
    remove: ProcedureMethod<RemoveAssetRequirementParams, void>;
    /**
     * Configure compliance requirements for the Asset. This operation will replace all existing requirements with a new requirement set
     *
     * @example Say A, B, C, D and E are requirements and we arrange them as `[[A, B], [C, D], [E]]`.
     * For a transfer to succeed, it must either comply with A AND B, C AND D, OR E.
     */
    set: ProcedureMethod<SetAssetRequirementsParams, void>;
    /**
     * Retrieve all of the Asset's compliance requirements, together with the Default Trusted Claim Issuers
     *
     * @note can be subscribed to
     */
    get(): Promise<ComplianceRequirements>;
    get(callback: SubCallback<ComplianceRequirements>): Promise<UnsubCallback>;
    /**
     * Delete all the current requirements for the Asset.
     */
    reset: NoArgsProcedureMethod<void>;
    /**
     * Pause all the Asset's requirements. This means that all transfers will be allowed until requirements are unpaused
     */
    pause: NoArgsProcedureMethod<void>;
    /**
     * Un-pause all the Asset's current requirements
     */
    unpause: NoArgsProcedureMethod<void>;
    /**
     * Check whether Asset compliance requirements are paused or not
     */
    arePaused(): Promise<boolean>;
    /**
     * Modify a compliance requirement for the Asset
     */
    modify: ProcedureMethod<ModifyComplianceRequirementParams, void>;
}
//# sourceMappingURL=Requirements.d.ts.map