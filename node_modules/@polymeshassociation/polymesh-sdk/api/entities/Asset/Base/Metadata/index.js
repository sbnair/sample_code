"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Metadata = void 0;
const internal_1 = require("../../../../../internal");
const types_1 = require("../../../../../types");
const conversion_1 = require("../../../../../utils/conversion");
const internal_2 = require("../../../../../utils/internal");
/**
 * Handles all Asset Metadata related functionality
 */
class Metadata extends internal_1.Namespace {
    /**
     * @hidden
     */
    constructor(parent, context) {
        super(parent, context);
        const { ticker } = parent;
        this.register = (0, internal_2.createProcedureMethod)({ getProcedureAndArgs: args => [internal_1.registerMetadata, Object.assign({ ticker }, args)] }, context);
    }
    /**
     * Retrieve all the MetadataEntry for this Asset
     */
    get() {
        return __awaiter(this, void 0, void 0, function* () {
            const { context: { polymeshApi: { query: { asset: { assetMetadataLocalKeyToName, assetMetadataGlobalKeyToName }, }, }, }, context, parent: { ticker }, } = this;
            const rawTicker = (0, conversion_1.stringToTicker)(ticker, context);
            const [rawGlobalKeys, rawLocalKeys] = yield Promise.all([
                assetMetadataGlobalKeyToName.entries(),
                assetMetadataLocalKeyToName.entries(rawTicker),
            ]);
            const assembleResult = (rawId, type) => new internal_1.MetadataEntry({ ticker, type, id: (0, conversion_1.u64ToBigNumber)(rawId) }, context);
            return [
                ...rawGlobalKeys.map(([{ args: [rawId], },]) => assembleResult(rawId, types_1.MetadataType.Global)),
                ...rawLocalKeys.map(([{ args: [, rawId], },]) => assembleResult(rawId, types_1.MetadataType.Local)),
            ];
        });
    }
    /**
     * Retrieve a single MetadataEntry by its ID and type
     *
     * @throws if there is no MetadataEntry with the passed ID and specified type
     */
    getOne(args) {
        return __awaiter(this, void 0, void 0, function* () {
            const { context: { polymeshApi: { query: { asset: { assetMetadataLocalKeyToName, assetMetadataGlobalKeyToName }, }, }, }, context, parent: { ticker }, } = this;
            const { id, type } = args;
            const rawId = (0, conversion_1.bigNumberToU64)(id, context);
            let rawName;
            if (type === types_1.MetadataType.Global) {
                rawName = yield assetMetadataGlobalKeyToName(rawId);
            }
            else {
                const rawTicker = (0, conversion_1.stringToTicker)(ticker, context);
                rawName = yield assetMetadataLocalKeyToName(rawTicker, rawId);
            }
            if (rawName.isEmpty) {
                throw new internal_1.PolymeshError({
                    code: types_1.ErrorCode.DataUnavailable,
                    message: `There is no ${type.toLowerCase()} Asset Metadata with id "${id.toString()}"`,
                });
            }
            return new internal_1.MetadataEntry({ ticker, type, id }, context);
        });
    }
    /**
     * Gets the next local metadata ID for the Asset
     *
     * @hidden
     */
    getNextLocalId() {
        return __awaiter(this, void 0, void 0, function* () {
            const { parent: { ticker }, context: { polymeshApi: { query: { asset: { assetMetadataNextLocalKey }, }, }, }, } = this;
            const rawId = yield assetMetadataNextLocalKey(ticker);
            return (0, conversion_1.u64ToBigNumber)(rawId).plus(1); // "next" is actually the last used
        });
    }
}
exports.Metadata = Metadata;
//# sourceMappingURL=index.js.map