import BigNumber from 'bignumber.js';
import { CheckpointSchedule, Context, FungibleAsset, Namespace } from "../../../../../internal";
import { CreateCheckpointScheduleParams, ProcedureMethod, RemoveCheckpointScheduleParams, ScheduleWithDetails } from "../../../../../types";
/**
 * Handles all Asset Checkpoint Schedules related functionality
 */
export declare class Schedules extends Namespace<FungibleAsset> {
    /**
     * @hidden
     */
    constructor(parent: FungibleAsset, context: Context);
    /**
     * Create a schedule for Checkpoint creation (e.g. "Create a checkpoint every week for 5 weeks, starting next tuesday")
     *
     * @note ⚠️ Chain v6 introduces changes in how checkpoints are created. Only a set amount of points can be specified, infinitely repeating schedules are deprecated
     *
     * @note due to chain limitations, schedules are advanced and (if appropriate) executed whenever the Asset is
     *   redeemed, issued or transferred between portfolios. This means that on an Asset without much movement, there may be disparities between intended Checkpoint creation dates
     *   and the actual date when they are created. This, however, has no effect on the Checkpoint's accuracy regarding to balances
     */
    create: ProcedureMethod<CreateCheckpointScheduleParams, CheckpointSchedule>;
    /**
     * Remove the supplied Checkpoint Schedule for a given Asset
     */
    remove: ProcedureMethod<RemoveCheckpointScheduleParams, void>;
    /**
     * Retrieve a single Checkpoint Schedule associated to this Asset by its ID
     *
     * @throws if there is no Schedule with the passed ID
     */
    getOne({ id }: {
        id: BigNumber;
    }): Promise<ScheduleWithDetails>;
    /**
     * Retrieve all active Checkpoint Schedules
     */
    get(): Promise<ScheduleWithDetails[]>;
    /**
     * Retrieve the maximum allowed Schedule complexity for this Asset
     */
    maxComplexity(): Promise<BigNumber>;
}
//# sourceMappingURL=Schedules.d.ts.map