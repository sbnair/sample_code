"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Schedules = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const internal_1 = require("../../../../../internal");
const types_1 = require("../../../../../types");
const conversion_1 = require("../../../../../utils/conversion");
const internal_2 = require("../../../../../utils/internal");
/**
 * Handles all Asset Checkpoint Schedules related functionality
 */
class Schedules extends internal_1.Namespace {
    /**
     * @hidden
     */
    constructor(parent, context) {
        super(parent, context);
        const { ticker } = parent;
        this.create = (0, internal_2.createProcedureMethod)({ getProcedureAndArgs: args => [internal_1.createCheckpointSchedule, Object.assign({ ticker }, args)] }, context);
        this.remove = (0, internal_2.createProcedureMethod)({ getProcedureAndArgs: args => [internal_1.removeCheckpointSchedule, Object.assign({ ticker }, args)] }, context);
    }
    /**
     * Retrieve a single Checkpoint Schedule associated to this Asset by its ID
     *
     * @throws if there is no Schedule with the passed ID
     */
    getOne({ id }) {
        return __awaiter(this, void 0, void 0, function* () {
            const schedules = yield this.get();
            const result = schedules.find(({ schedule }) => schedule.id.eq(id));
            if (!result) {
                throw new internal_1.PolymeshError({
                    code: types_1.ErrorCode.DataUnavailable,
                    message: 'The Schedule does not exist',
                });
            }
            return result;
        });
    }
    /**
     * Retrieve all active Checkpoint Schedules
     */
    get() {
        return __awaiter(this, void 0, void 0, function* () {
            const { parent: { ticker }, context: { polymeshApi: { query: { checkpoint }, }, }, context, } = this;
            const rawTicker = (0, conversion_1.stringToTicker)(ticker, context);
            const rawSchedulesEntries = yield checkpoint.scheduledCheckpoints.entries(rawTicker);
            return rawSchedulesEntries.map(([key, rawScheduleOpt]) => {
                const rawSchedule = rawScheduleOpt.unwrap();
                const rawId = key.args[1];
                const id = (0, conversion_1.u64ToBigNumber)(rawId);
                const points = [...rawSchedule.pending].map(rawPoint => (0, conversion_1.momentToDate)(rawPoint));
                const schedule = new internal_1.CheckpointSchedule({
                    ticker,
                    id,
                    pendingPoints: points,
                }, context);
                const remainingCheckpoints = new bignumber_js_1.default([...rawSchedule.pending].length);
                return {
                    schedule,
                    details: {
                        remainingCheckpoints,
                        nextCheckpointDate: points[0],
                    },
                };
            });
        });
    }
    /**
     * Retrieve the maximum allowed Schedule complexity for this Asset
     */
    maxComplexity() {
        return __awaiter(this, void 0, void 0, function* () {
            const { context } = this;
            const complexity = yield context.polymeshApi.query.checkpoint.schedulesMaxComplexity();
            return (0, conversion_1.u64ToBigNumber)(complexity);
        });
    }
}
exports.Schedules = Schedules;
//# sourceMappingURL=Schedules.js.map