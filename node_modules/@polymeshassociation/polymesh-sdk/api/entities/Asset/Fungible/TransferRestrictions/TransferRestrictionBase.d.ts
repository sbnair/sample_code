import BigNumber from 'bignumber.js';
import { Context, FungibleAsset, Namespace } from "../../../../../internal";
import { AddRestrictionParams, GetTransferRestrictionReturnType, NoArgsProcedureMethod, ProcedureMethod, RemoveBalanceStatParams, RemoveCountStatParams, RemoveScopedBalanceParams, RemoveScopedCountParams, SetAssetStatParams, SetClaimCountTransferRestrictionsParams, SetClaimPercentageTransferRestrictionsParams, SetCountTransferRestrictionsParams, SetPercentageTransferRestrictionsParams, SetRestrictionsParams, TransferRestrictionType } from "../../../../../types";
export declare type SetTransferRestrictionsParams = {
    ticker: string;
} & (SetCountTransferRestrictionsParams | SetPercentageTransferRestrictionsParams | SetClaimCountTransferRestrictionsParams | SetClaimPercentageTransferRestrictionsParams);
export declare type RemoveAssetStatParamsBase<T> = Omit<T extends TransferRestrictionType.Count ? RemoveCountStatParams : T extends TransferRestrictionType.Percentage ? RemoveBalanceStatParams : T extends TransferRestrictionType.ClaimCount ? RemoveScopedCountParams : RemoveScopedBalanceParams, 'type'>;
/**
 * Base class for managing Transfer Restrictions
 */
export declare abstract class TransferRestrictionBase<T extends TransferRestrictionType> extends Namespace<FungibleAsset> {
    protected abstract type: T;
    /**
     * @hidden
     */
    constructor(parent: FungibleAsset, context: Context);
    /**
     * Add a Transfer Restriction of the corresponding type to this Asset
     *
     * @note the result is the total amount of restrictions after the procedure has run
     */
    addRestriction: ProcedureMethod<AddRestrictionParams<T>, BigNumber>;
    /**
     * Sets all Transfer Restrictions of the corresponding type on this Asset
     *
     * @note the result is the total amount of restrictions after the procedure has run
     */
    setRestrictions: ProcedureMethod<SetRestrictionsParams<T>, BigNumber>;
    /**
     * Removes all Transfer Restrictions of the corresponding type from this Asset
     *
     * @note the result is the total amount of restrictions after the procedure has run
     */
    removeRestrictions: NoArgsProcedureMethod<BigNumber>;
    /**
     * Enables statistic of the corresponding type for this Asset, which are required for restrictions to be created
     */
    enableStat: ProcedureMethod<SetAssetStatParams<T>, void>;
    /**
     * Removes an Asset statistic
     *
     * @throws if the statistic is being used or is not set
     */
    disableStat: ProcedureMethod<RemoveAssetStatParamsBase<T>, void>;
    /**
     * Retrieve all active Transfer Restrictions of the corresponding type
     *
     * @note there is a maximum number of restrictions allowed across all types.
     *   The `availableSlots` property of the result represents how many more restrictions can be added
     *   before reaching that limit
     */
    get(): Promise<GetTransferRestrictionReturnType<T>>;
}
//# sourceMappingURL=TransferRestrictionBase.d.ts.map