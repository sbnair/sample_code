import BigNumber from 'bignumber.js';
import { BaseAsset } from "../Base";
import { Context } from "../../../../internal";
import { ControllerTransferParams, EventIdentifier, HistoricAgentOperation, HistoricAssetTransaction, ModifyAssetParams, ProcedureMethod, RedeemTokensParams, ResultSet, SetVenueFilteringParams, SubCallback, UnsubCallback } from "../../../../types";
import { UniqueIdentifiers } from '../types';
import { AssetHolders } from './AssetHolders';
import { Checkpoints } from './Checkpoints';
import { CorporateActions } from './CorporateActions';
import { Issuance } from './Issuance';
import { Offerings } from './Offerings';
import { Settlements } from './Settlements';
import { TransferRestrictions } from './TransferRestrictions';
/**
 * Class used to manage all Fungible Asset functionality
 */
export declare class FungibleAsset extends BaseAsset {
    settlements: Settlements;
    assetHolders: AssetHolders;
    issuance: Issuance;
    transferRestrictions: TransferRestrictions;
    offerings: Offerings;
    checkpoints: Checkpoints;
    corporateActions: CorporateActions;
    /**
     * @hidden
     */
    constructor(identifiers: UniqueIdentifiers, context: Context);
    /**
     * Modify some properties of the Asset
     *
     * @throws if the passed values result in no changes being made to the Asset
     */
    modify: ProcedureMethod<ModifyAssetParams, FungibleAsset>;
    /**
     * Retrieve the Asset's funding round
     *
     * @note can be subscribed to
     */
    currentFundingRound(): Promise<string | null>;
    currentFundingRound(callback: SubCallback<string | null>): Promise<UnsubCallback>;
    /**
     * Retrieve the identifier data (block number, date and event index) of the event that was emitted when the token was created
     *
     * @note uses the middlewareV2
     * @note there is a possibility that the data is not ready by the time it is requested. In that case, `null` is returned
     */
    createdAt(): Promise<EventIdentifier | null>;
    /**
     * Redeem (burn) an amount of this Asset's tokens
     *
     * @note tokens are removed from the caller's Default Portfolio
     */
    redeem: ProcedureMethod<RedeemTokensParams, void>;
    /**
     * Retrieve the amount of unique investors that hold this Asset
     */
    investorCount(): Promise<BigNumber>;
    /**
     * Force a transfer from a given Portfolio to the callerâ€™s default Portfolio
     */
    controllerTransfer: ProcedureMethod<ControllerTransferParams, void>;
    /**
     * Retrieve this Asset's Operation History
     *
     * @note Operations are grouped by the agent Identity who performed them
     *
     * @note uses the middlewareV2
     */
    getOperationHistory(): Promise<HistoricAgentOperation[]>;
    /**
     * Retrieve this Asset's transaction History
     *
     * @note uses the middlewareV2
     */
    getTransactionHistory(opts: {
        size?: BigNumber;
        start?: BigNumber;
    }): Promise<ResultSet<HistoricAssetTransaction>>;
    /**
     * Determine whether this FungibleAsset exists on chain
     */
    exists(): Promise<boolean>;
    /**
     * Enable/disable venue filtering for this Asset and/or set allowed/disallowed venues
     */
    setVenueFiltering: ProcedureMethod<SetVenueFilteringParams, void>;
}
//# sourceMappingURL=index.d.ts.map