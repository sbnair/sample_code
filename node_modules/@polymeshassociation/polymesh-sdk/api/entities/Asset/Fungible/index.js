"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FungibleAsset = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const lodash_1 = require("lodash");
const Base_1 = require("../Base");
const internal_1 = require("../../../../internal");
const queries_1 = require("../../../../middleware/queries");
const conversion_1 = require("../../../../utils/conversion");
const internal_2 = require("../../../../utils/internal");
const AssetHolders_1 = require("./AssetHolders");
const Checkpoints_1 = require("./Checkpoints");
const CorporateActions_1 = require("./CorporateActions");
const Issuance_1 = require("./Issuance");
const Offerings_1 = require("./Offerings");
const Settlements_1 = require("./Settlements");
const TransferRestrictions_1 = require("./TransferRestrictions");
/**
 * Class used to manage all Fungible Asset functionality
 */
class FungibleAsset extends Base_1.BaseAsset {
    /**
     * @hidden
     */
    constructor(identifiers, context) {
        super(identifiers, context);
        const { ticker } = identifiers;
        this.ticker = ticker;
        this.did = (0, conversion_1.tickerToDid)(ticker);
        this.settlements = new Settlements_1.Settlements(this, context);
        this.assetHolders = new AssetHolders_1.AssetHolders(this, context);
        this.issuance = new Issuance_1.Issuance(this, context);
        this.transferRestrictions = new TransferRestrictions_1.TransferRestrictions(this, context);
        this.offerings = new Offerings_1.Offerings(this, context);
        this.checkpoints = new Checkpoints_1.Checkpoints(this, context);
        this.corporateActions = new CorporateActions_1.CorporateActions(this, context);
        this.modify = (0, internal_2.createProcedureMethod)({ getProcedureAndArgs: args => [internal_1.modifyAsset, Object.assign({ ticker }, args)] }, context);
        this.redeem = (0, internal_2.createProcedureMethod)({ getProcedureAndArgs: args => [internal_1.redeemTokens, Object.assign({ ticker }, args)] }, context);
        this.controllerTransfer = (0, internal_2.createProcedureMethod)({ getProcedureAndArgs: args => [internal_1.controllerTransfer, Object.assign({ ticker }, args)] }, context);
        this.setVenueFiltering = (0, internal_2.createProcedureMethod)({ getProcedureAndArgs: args => [internal_1.setVenueFiltering, Object.assign({ ticker }, args)] }, context);
    }
    // eslint-disable-next-line require-jsdoc
    currentFundingRound(callback) {
        return __awaiter(this, void 0, void 0, function* () {
            const { context: { polymeshApi: { query: { asset }, }, }, ticker, context, } = this;
            const rawTicker = (0, conversion_1.stringToTicker)(ticker, context);
            const assembleResult = (roundName) => (0, conversion_1.bytesToString)(roundName) || null;
            if (callback) {
                return asset.fundingRound(rawTicker, round => {
                    // eslint-disable-next-line @typescript-eslint/no-floating-promises -- callback errors should be handled by the caller
                    callback(assembleResult(round));
                });
            }
            const fundingRound = yield asset.fundingRound(rawTicker);
            return assembleResult(fundingRound);
        });
    }
    /**
     * Retrieve the identifier data (block number, date and event index) of the event that was emitted when the token was created
     *
     * @note uses the middlewareV2
     * @note there is a possibility that the data is not ready by the time it is requested. In that case, `null` is returned
     */
    createdAt() {
        return __awaiter(this, void 0, void 0, function* () {
            const { ticker, context } = this;
            const { data: { assets: { nodes: [asset], }, }, } = yield context.queryMiddleware((0, queries_1.assetQuery)({
                ticker,
            }));
            return (0, internal_2.optionize)(conversion_1.middlewareEventDetailsToEventIdentifier)(asset === null || asset === void 0 ? void 0 : asset.createdBlock, asset === null || asset === void 0 ? void 0 : asset.eventIdx);
        });
    }
    /**
     * Retrieve the amount of unique investors that hold this Asset
     */
    investorCount() {
        return __awaiter(this, void 0, void 0, function* () {
            const { context: { polymeshApi: { query: { asset: { balanceOf }, }, }, }, context, ticker, } = this;
            const rawTicker = (0, conversion_1.stringToTicker)(ticker, context);
            const balanceEntries = yield balanceOf.entries(rawTicker);
            const assetBalances = balanceEntries.filter(([, balance]) => !(0, conversion_1.balanceToBigNumber)(balance).isZero());
            return new bignumber_js_1.default(assetBalances.length);
        });
    }
    /**
     * Retrieve this Asset's Operation History
     *
     * @note Operations are grouped by the agent Identity who performed them
     *
     * @note uses the middlewareV2
     */
    getOperationHistory() {
        return __awaiter(this, void 0, void 0, function* () {
            const { context, ticker: assetId } = this;
            const { data: { tickerExternalAgentHistories: { nodes }, }, } = yield context.queryMiddleware((0, queries_1.tickerExternalAgentHistoryQuery)({
                assetId,
            }));
            const groupedData = (0, lodash_1.groupBy)(nodes, 'identityId');
            return (0, lodash_1.map)(groupedData, (history, did) => ({
                identity: new internal_1.Identity({ did }, context),
                history: history.map(({ createdBlock, eventIdx }) => 
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                (0, conversion_1.middlewareEventDetailsToEventIdentifier)(createdBlock, eventIdx)),
            }));
        });
    }
    /**
     * Retrieve this Asset's transaction History
     *
     * @note uses the middlewareV2
     */
    getTransactionHistory(opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const { context, ticker } = this;
            const { size, start } = opts;
            const { data: { assetTransactions: { nodes, totalCount }, }, } = yield context.queryMiddleware((0, queries_1.assetTransactionQuery)({
                assetId: ticker,
            }, size, start));
            const data = nodes.map(({ assetId, amount, fromPortfolio, toPortfolio, createdBlock, eventId, eventIdx, extrinsicIdx, }) => (Object.assign({ asset: new FungibleAsset({ ticker: assetId }, context), amount: new bignumber_js_1.default(amount).shiftedBy(-6), event: eventId, from: (0, internal_2.optionize)(conversion_1.middlewarePortfolioToPortfolio)(fromPortfolio, context), to: (0, internal_2.optionize)(conversion_1.middlewarePortfolioToPortfolio)(toPortfolio, context), 
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                extrinsicIndex: new bignumber_js_1.default(extrinsicIdx) }, (0, conversion_1.middlewareEventDetailsToEventIdentifier)(createdBlock, eventIdx))));
            const count = new bignumber_js_1.default(totalCount);
            const next = (0, internal_2.calculateNextKey)(count, data.length, start);
            return {
                data,
                next,
                count,
            };
        });
    }
    /**
     * Determine whether this FungibleAsset exists on chain
     */
    exists() {
        return __awaiter(this, void 0, void 0, function* () {
            const { ticker, context, context: { polymeshApi: { query }, }, } = this;
            const rawTicker = (0, conversion_1.stringToTicker)(ticker, context);
            const [tokenSize, nftId] = yield Promise.all([
                query.asset.tokens.size(rawTicker),
                query.nft.collectionTicker(rawTicker),
            ]);
            return !tokenSize.isZero() && nftId.isZero();
        });
    }
}
exports.FungibleAsset = FungibleAsset;
//# sourceMappingURL=index.js.map