import BigNumber from 'bignumber.js';
import { BaseAsset } from "../Base";
import { Nft } from "./Nft";
import { Context } from "../../../../internal";
import { AssetDetails, EventIdentifier, IssueNftParams, MetadataKeyId, ProcedureMethod, SubCallback, UniqueIdentifiers, UnsubCallback } from "../../../../types";
/**
 * Class used to manage Nft functionality
 */
export declare class NftCollection extends BaseAsset {
    /**
     * Issues a new NFT for the collection
     */
    issue: ProcedureMethod<IssueNftParams, Nft>;
    /**
     * Caches value for `getCollectionId`
     *
     * @hidden
     */
    private id?;
    /**
     * @hidden
     */
    constructor(identifiers: UniqueIdentifiers, context: Context);
    /**
     * Retrieve the identifier data (block number, date and event index) of the event that was emitted when the token was created
     *
     * @note uses the middlewareV2
     * @note there is a possibility that the data is not ready by the time it is requested. In that case, `null` is returned
     */
    createdAt(): Promise<EventIdentifier | null>;
    /**
     * Retrieve the NftCollection's data
     *
     * @note can be subscribed to
     */
    details(): Promise<AssetDetails>;
    details(callback: SubCallback<AssetDetails>): Promise<UnsubCallback>;
    /**
     * Get metadata keys that each NFT in the collection must have
     */
    collectionMetadataKeys(): Promise<MetadataKeyId[]>;
    /**
     * Retrieve the amount of unique investors that hold this Nft
     */
    investorCount(): Promise<BigNumber>;
    /**
     * Determine whether this NftCollection exists on chain
     */
    exists(): Promise<boolean>;
    /**
     * Returns the collection id
     */
    getCollectionId(): Promise<BigNumber>;
}
//# sourceMappingURL=NftCollection.d.ts.map