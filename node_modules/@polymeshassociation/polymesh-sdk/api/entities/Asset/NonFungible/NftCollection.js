"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NftCollection = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const Base_1 = require("../Base");
const issueNft_1 = require("../../../procedures/issueNft");
const internal_1 = require("../../../../internal");
const queries_1 = require("../../../../middleware/queries");
const conversion_1 = require("../../../../utils/conversion");
const internal_2 = require("../../../../utils/internal");
const sumNftIssuance = (numberOfNfts) => {
    let numberIssued = new bignumber_js_1.default(0);
    numberOfNfts.forEach(([, holderEntry]) => {
        const holderAmount = (0, conversion_1.u64ToBigNumber)(holderEntry);
        numberIssued = numberIssued.plus(holderAmount);
    });
    return numberIssued;
};
/**
 * Class used to manage Nft functionality
 */
class NftCollection extends Base_1.BaseAsset {
    /**
     * @hidden
     */
    constructor(identifiers, context) {
        super(identifiers, context);
        const { ticker } = identifiers;
        this.transferOwnership = (0, internal_2.createProcedureMethod)({ getProcedureAndArgs: args => [internal_1.transferAssetOwnership, Object.assign({ ticker }, args)] }, context);
        this.issue = (0, internal_2.createProcedureMethod)({
            getProcedureAndArgs: args => [issueNft_1.issueNft, Object.assign({ ticker }, args)],
        }, context);
    }
    /**
     * Retrieve the identifier data (block number, date and event index) of the event that was emitted when the token was created
     *
     * @note uses the middlewareV2
     * @note there is a possibility that the data is not ready by the time it is requested. In that case, `null` is returned
     */
    createdAt() {
        return __awaiter(this, void 0, void 0, function* () {
            const { ticker, context } = this;
            const { data: { assets: { nodes: [asset], }, }, } = yield context.queryMiddleware((0, queries_1.assetQuery)({
                ticker,
            }));
            return (0, internal_2.optionize)(conversion_1.middlewareEventDetailsToEventIdentifier)(asset === null || asset === void 0 ? void 0 : asset.createdBlock, asset === null || asset === void 0 ? void 0 : asset.eventIdx);
        });
    }
    // eslint-disable-next-line require-jsdoc
    details(callback) {
        const _super = Object.create(null, {
            details: { get: () => super.details }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const { context: { polymeshApi: { query }, }, ticker, context, } = this;
            const rawTicker = (0, conversion_1.stringToTicker)(ticker, context);
            const rawNumberNftsPromise = query.nft.numberOfNFTs.entries(rawTicker);
            if (callback) {
                const rawNumberNfts = yield rawNumberNftsPromise;
                const numberIssued = sumNftIssuance(rawNumberNfts);
                // currently `asset.tokens` does not track Nft `totalSupply', we wrap the callback to provide it
                const wrappedCallback = (commonDetails) => __awaiter(this, void 0, void 0, function* () {
                    const nftDetails = Object.assign(Object.assign({}, commonDetails), { totalSupply: numberIssued });
                    // eslint-disable-next-line @typescript-eslint/no-floating-promises
                    callback(nftDetails);
                });
                return _super.details.call(this, wrappedCallback);
            }
            const [rawNumberNfts, commonDetails] = yield Promise.all([
                rawNumberNftsPromise,
                _super.details.call(this),
            ]);
            const numberIssued = sumNftIssuance(rawNumberNfts);
            return Object.assign(Object.assign({}, commonDetails), { totalSupply: numberIssued });
        });
    }
    /**
     * Get metadata keys that each NFT in the collection must have
     */
    collectionMetadataKeys() {
        return __awaiter(this, void 0, void 0, function* () {
            const { context, ticker, context: { polymeshApi: { query }, }, } = this;
            const id = yield this.getCollectionId();
            const rawId = (0, conversion_1.bigNumberToU64)(id, context);
            const rawKeys = yield query.nft.collectionKeys(rawId);
            return [...rawKeys].map(value => (0, conversion_1.meshMetadataKeyToMetadataKey)(value, ticker));
        });
    }
    /**
     * Retrieve the amount of unique investors that hold this Nft
     */
    investorCount() {
        return __awaiter(this, void 0, void 0, function* () {
            const { context: { polymeshApi: { query }, }, context, ticker, } = this;
            const rawTicker = (0, conversion_1.stringToTicker)(ticker, context);
            const holderEntries = yield query.nft.numberOfNFTs.entries(rawTicker);
            const assetBalances = holderEntries.filter(([, balance]) => !balance.isZero());
            return new bignumber_js_1.default(assetBalances.length);
        });
    }
    /**
     * Determine whether this NftCollection exists on chain
     */
    exists() {
        return __awaiter(this, void 0, void 0, function* () {
            const { ticker, context } = this;
            const rawTokenId = yield context.polymeshApi.query.nft.collectionTicker((0, conversion_1.stringToTicker)(ticker, context));
            return !rawTokenId.isZero();
        });
    }
    /**
     * Returns the collection id
     */
    getCollectionId() {
        return __awaiter(this, void 0, void 0, function* () {
            const { ticker, context, context: { polymeshApi: { query }, }, } = this;
            if (this.id) {
                return this.id;
            }
            const rawTicker = (0, conversion_1.stringToTicker)(ticker, context);
            const rawId = yield query.nft.collectionTicker(rawTicker);
            this.id = (0, conversion_1.u64ToBigNumber)(rawId);
            return this.id;
        });
    }
}
exports.NftCollection = NftCollection;
//# sourceMappingURL=NftCollection.js.map