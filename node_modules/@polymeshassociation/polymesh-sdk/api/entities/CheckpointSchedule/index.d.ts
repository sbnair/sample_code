import BigNumber from 'bignumber.js';
import { Checkpoint, Context, Entity, FungibleAsset } from "../../../internal";
import { ScheduleDetails } from "../../../types";
export interface UniqueIdentifiers {
    id: BigNumber;
    ticker: string;
}
export interface HumanReadable {
    id: string;
    ticker: string;
    pendingPoints: string[];
    expiryDate: string | null;
}
export interface Params {
    pendingPoints: Date[];
}
/**
 * Represents a Checkpoint Schedule for an Asset. Schedules can be set up to create Checkpoints at regular intervals
 */
export declare class CheckpointSchedule extends Entity<UniqueIdentifiers, HumanReadable> {
    /**
     * @hidden
     * Check if a value is of type {@link UniqueIdentifiers}
     */
    static isUniqueIdentifiers(identifier: unknown): identifier is UniqueIdentifiers;
    /**
     * schedule identifier number
     */
    id: BigNumber;
    /**
     * Asset for which Checkpoints are scheduled
     */
    asset: FungibleAsset;
    /**
     * dates in the future where checkpoints are schedule to be created
     */
    pendingPoints: Date[];
    /**
     * date at which the last Checkpoint will be created with this Schedule.
     */
    expiryDate: Date;
    /**
     * @hidden
     */
    constructor(args: UniqueIdentifiers & Params, context: Context);
    /**
     * Retrieve information specific to this Schedule
     */
    details(): Promise<ScheduleDetails>;
    /**
     * Retrieve all Checkpoints created by this Schedule
     */
    getCheckpoints(): Promise<Checkpoint[]>;
    /**
     * Determine whether this Checkpoint Schedule exists on chain
     */
    exists(): Promise<boolean>;
    /**
     * Return the Schedule's static data
     */
    toHuman(): HumanReadable;
}
//# sourceMappingURL=index.d.ts.map