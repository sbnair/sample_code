import { Context, FungibleAsset, Identity } from "../../internal";
import { ClaimType, EventIdentifier } from "../../types";
export interface UniqueIdentifiers {
    did: string;
    ticker: string;
}
/**
 * Represents a default trusted claim issuer for a specific Asset in the Polymesh blockchain
 */
export declare class DefaultTrustedClaimIssuer extends Identity {
    /**
     * @hidden
     * Check if a value is of type {@link UniqueIdentifiers}
     */
    static isUniqueIdentifiers(identifier: unknown): identifier is UniqueIdentifiers;
    /**
     * Asset for which this Identity is a Default Trusted Claim Issuer
     */
    asset: FungibleAsset;
    /**
     * @hidden
     */
    constructor(args: UniqueIdentifiers, context: Context);
    /**
     * Retrieve the identifier data (block number, date and event index) of the event that was emitted when the trusted claim issuer was added
     *
     * @note uses the middlewareV2
     * @note there is a possibility that the data is not ready by the time it is requested. In that case, `null` is returned
     */
    addedAt(): Promise<EventIdentifier | null>;
    /**
     * Retrieve claim types for which this Claim Issuer is trusted. A null value means that the issuer is trusted for all claim types
     */
    trustedFor(): Promise<ClaimType[] | null>;
}
//# sourceMappingURL=DefaultTrustedClaimIssuer.d.ts.map