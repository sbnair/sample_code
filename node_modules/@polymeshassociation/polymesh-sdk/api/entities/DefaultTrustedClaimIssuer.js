"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultTrustedClaimIssuer = void 0;
const internal_1 = require("../../internal");
const queries_1 = require("../../middleware/queries");
const types_1 = require("../../types");
const conversion_1 = require("../../utils/conversion");
const internal_2 = require("../../utils/internal");
/**
 * Represents a default trusted claim issuer for a specific Asset in the Polymesh blockchain
 */
class DefaultTrustedClaimIssuer extends internal_1.Identity {
    /**
     * @hidden
     */
    constructor(args, context) {
        const { ticker } = args, identifiers = __rest(args, ["ticker"]);
        super(identifiers, context);
        this.asset = new internal_1.FungibleAsset({ ticker }, context);
    }
    /**
     * @hidden
     * Check if a value is of type {@link UniqueIdentifiers}
     */
    static isUniqueIdentifiers(identifier) {
        const { did, ticker } = identifier;
        return typeof did === 'string' && typeof ticker === 'string';
    }
    /**
     * Retrieve the identifier data (block number, date and event index) of the event that was emitted when the trusted claim issuer was added
     *
     * @note uses the middlewareV2
     * @note there is a possibility that the data is not ready by the time it is requested. In that case, `null` is returned
     */
    addedAt() {
        return __awaiter(this, void 0, void 0, function* () {
            const { asset: { ticker: assetId }, did: issuer, context, } = this;
            const { data: { trustedClaimIssuers: { nodes: [node], }, }, } = yield context.queryMiddleware((0, queries_1.trustedClaimIssuerQuery)({
                assetId,
                issuer,
            }));
            return (0, internal_2.optionize)(conversion_1.middlewareEventDetailsToEventIdentifier)(node === null || node === void 0 ? void 0 : node.createdBlock, node === null || node === void 0 ? void 0 : node.eventIdx);
        });
    }
    /**
     * Retrieve claim types for which this Claim Issuer is trusted. A null value means that the issuer is trusted for all claim types
     */
    trustedFor() {
        return __awaiter(this, void 0, void 0, function* () {
            const { context: { polymeshApi: { query: { complianceManager }, }, }, context, asset: { ticker }, did, } = this;
            const rawTicker = (0, conversion_1.stringToTicker)(ticker, context);
            const claimIssuers = yield complianceManager.trustedClaimIssuer(rawTicker);
            const claimIssuer = claimIssuers
                .map(issuer => (0, conversion_1.trustedIssuerToTrustedClaimIssuer)(issuer, context))
                .find(({ identity }) => this.isEqual(identity));
            if (!claimIssuer) {
                throw new internal_1.PolymeshError({
                    code: types_1.ErrorCode.DataUnavailable,
                    message: `The Identity with DID "${did}" is no longer a trusted issuer for "${ticker}"`,
                });
            }
            return claimIssuer.trustedFor;
        });
    }
}
exports.DefaultTrustedClaimIssuer = DefaultTrustedClaimIssuer;
//# sourceMappingURL=DefaultTrustedClaimIssuer.js.map