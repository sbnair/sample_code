import { Context } from "../../internal";
/**
 * Represents an object or resource in the Polymesh Ecosystem with its own set of properties and functionality
 */
export declare abstract class Entity<UniqueIdentifiers, HumanReadable> {
    /**
     * Generate the Entity's UUID from its identifying properties
     *
     * @param identifiers
     */
    static generateUuid<Identifiers>(identifiers: Identifiers): string;
    /**
     * Unserialize a UUID into its Unique Identifiers
     *
     * @param serialized - UUID to unserialize
     */
    static unserialize<Identifiers>(serialized: string): Identifiers;
    /**
     * Typeguard that checks whether the object passed corresponds to the unique identifiers of the class. Must be overridden
     *
     * @param identifiers - object to type check
     */
    static isUniqueIdentifiers(identifiers: unknown): boolean;
    uuid: string;
    protected context: Context;
    /**
     * @hidden
     */
    constructor(identifiers: UniqueIdentifiers, context: Context);
    /**
     * Determine whether this Entity is the same as another one
     */
    isEqual(entity: Entity<unknown, unknown>): boolean;
    /**
     * Determine whether this Entity exists on chain
     */
    abstract exists(): Promise<boolean>;
    /**
     * Returns Entity data in a human readable (JSON) format
     */
    abstract toHuman(): HumanReadable;
}
//# sourceMappingURL=Entity.d.ts.map