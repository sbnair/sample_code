import { UniqueIdentifiers } from "./";
import { Context, Identity } from "../../../internal";
import { NoArgsProcedureMethod } from "../../../types";
/**
 * Represents a child identity
 */
export declare class ChildIdentity extends Identity {
    /**
     * @hidden
     */
    constructor(identifiers: UniqueIdentifiers, context: Context);
    /**
     * Returns the parent of this Identity (if any)
     */
    getParentDid(): Promise<Identity | null>;
    /**
     * @hidden
     * since a child Identity doesn't has any other children, this method overrides the base implementation to return empty array
     */
    getChildIdentities(): Promise<ChildIdentity[]>;
    /**
     * Determine whether this child Identity exists
     *
     * @note asset Identities aren't considered to exist for this check
     */
    exists(): Promise<boolean>;
    /**
     * Unlinks this child identity from its parent
     *
     * @throws if
     *  - this identity doesn't have a parent
     *  - the transaction signer is not the primary key of the child identity
     */
    unlinkFromParent: NoArgsProcedureMethod<void>;
}
//# sourceMappingURL=ChildIdentity.d.ts.map