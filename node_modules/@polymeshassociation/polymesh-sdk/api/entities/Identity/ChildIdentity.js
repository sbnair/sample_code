"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChildIdentity = void 0;
const unlinkChildIdentity_1 = require("../../procedures/unlinkChildIdentity");
const internal_1 = require("../../../internal");
const conversion_1 = require("../../../utils/conversion");
const internal_2 = require("../../../utils/internal");
/**
 * Represents a child identity
 */
class ChildIdentity extends internal_1.Identity {
    /**
     * @hidden
     */
    constructor(identifiers, context) {
        super(identifiers, context);
        this.unlinkFromParent = (0, internal_2.createProcedureMethod)({
            getProcedureAndArgs: () => [unlinkChildIdentity_1.unlinkChildIdentity, { child: this }],
            voidArgs: true,
        }, context);
    }
    /**
     * Returns the parent of this Identity (if any)
     */
    getParentDid() {
        return __awaiter(this, void 0, void 0, function* () {
            const { context: { polymeshApi: { query: { identity }, }, }, context, did, } = this;
            const rawIdentityId = (0, conversion_1.stringToIdentityId)(did, context);
            const rawParentDid = yield identity.parentDid(rawIdentityId);
            if (rawParentDid.isEmpty) {
                return null;
            }
            const parentDid = (0, conversion_1.identityIdToString)(rawParentDid.unwrap());
            return new internal_1.Identity({ did: parentDid }, context);
        });
    }
    /**
     * @hidden
     * since a child Identity doesn't has any other children, this method overrides the base implementation to return empty array
     */
    getChildIdentities() {
        return Promise.resolve([]);
    }
    /**
     * Determine whether this child Identity exists
     *
     * @note asset Identities aren't considered to exist for this check
     */
    exists() {
        return __awaiter(this, void 0, void 0, function* () {
            const parentDid = yield this.getParentDid();
            return parentDid !== null;
        });
    }
}
exports.ChildIdentity = ChildIdentity;
//# sourceMappingURL=ChildIdentity.js.map