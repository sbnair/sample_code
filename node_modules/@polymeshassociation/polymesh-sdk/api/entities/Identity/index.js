"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Identity = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const bluebird_1 = __importDefault(require("bluebird"));
const lodash_1 = require("lodash");
const unlinkChildIdentity_1 = require("../../procedures/unlinkChildIdentity");
const utils_1 = require("../../procedures/utils");
const internal_1 = require("../../../internal");
const queries_1 = require("../../../middleware/queries");
const types_1 = require("../../../types");
const utils_2 = require("../../../types/utils");
const utils_3 = require("../../../utils");
const constants_1 = require("../../../utils/constants");
const conversion_1 = require("../../../utils/conversion");
const internal_2 = require("../../../utils/internal");
const AssetPermissions_1 = require("./AssetPermissions");
const IdentityAuthorizations_1 = require("./IdentityAuthorizations");
const Portfolios_1 = require("./Portfolios");
/**
 * Represents an Identity in the Polymesh blockchain
 */
class Identity extends internal_1.Entity {
    /**
     * Create an Identity entity
     *
     * @hidden
     */
    constructor(identifiers, context) {
        super(identifiers, context);
        const { did } = identifiers;
        this.did = did;
        this.authorizations = new IdentityAuthorizations_1.IdentityAuthorizations(this, context);
        this.portfolios = new Portfolios_1.Portfolios(this, context);
        this.assetPermissions = new AssetPermissions_1.AssetPermissions(this, context);
        this.unlinkChild = (0, internal_2.createProcedureMethod)({
            getProcedureAndArgs: args => [unlinkChildIdentity_1.unlinkChildIdentity, args],
        }, context);
    }
    /**
     * @hidden
     * Checks if a value is of type {@link UniqueIdentifiers}
     */
    static isUniqueIdentifiers(identifier) {
        const { did } = identifier;
        return typeof did === 'string';
    }
    /**
     * Check whether this Identity possesses the specified Role
     */
    hasRole(role) {
        return __awaiter(this, void 0, void 0, function* () {
            const { context, did } = this;
            if ((0, utils_3.isTickerOwnerRole)(role)) {
                const { ticker } = role;
                const reservation = new internal_1.TickerReservation({ ticker }, context);
                const { owner } = yield reservation.details();
                return owner ? this.isEqual(owner) : false;
            }
            else if ((0, utils_3.isCddProviderRole)(role)) {
                const { polymeshApi: { query: { cddServiceProviders }, }, } = context;
                const activeMembers = yield cddServiceProviders.activeMembers();
                const memberDids = activeMembers.map(conversion_1.identityIdToString);
                return memberDids.includes(did);
            }
            else if ((0, utils_3.isVenueOwnerRole)(role)) {
                const venue = new internal_1.Venue({ id: role.venueId }, context);
                const { owner } = yield venue.details();
                return this.isEqual(owner);
            }
            else if ((0, utils_3.isPortfolioCustodianRole)(role)) {
                const { portfolioId } = role;
                const portfolio = (0, conversion_1.portfolioIdToPortfolio)(portfolioId, context);
                return portfolio.isCustodiedBy();
            }
            else if ((0, utils_3.isIdentityRole)(role)) {
                return did === role.did;
            }
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.ValidationError,
                message: `Unrecognized role "${JSON.stringify(role)}"`,
            });
        });
    }
    // eslint-disable-next-line require-jsdoc
    getAssetBalance(args, callback) {
        return __awaiter(this, void 0, void 0, function* () {
            const { did, context, context: { polymeshApi: { query: { asset }, }, }, } = this;
            const { ticker } = args;
            const rawTicker = (0, conversion_1.stringToTicker)(ticker, context);
            const rawIdentityId = (0, conversion_1.stringToIdentityId)(did, context);
            const meshAsset = yield asset.tokens(rawTicker);
            if (meshAsset.isNone) {
                throw new internal_1.PolymeshError({
                    code: types_1.ErrorCode.DataUnavailable,
                    message: `There is no Asset with ticker "${ticker}"`,
                });
            }
            if (callback) {
                return asset.balanceOf(rawTicker, rawIdentityId, res => {
                    // eslint-disable-next-line @typescript-eslint/no-floating-promises -- callback errors should be handled by the caller
                    callback((0, conversion_1.balanceToBigNumber)(res));
                });
            }
            const balance = yield asset.balanceOf(rawTicker, rawIdentityId);
            return (0, conversion_1.balanceToBigNumber)(balance);
        });
    }
    /**
     * Check whether this Identity has a valid CDD claim
     */
    hasValidCdd() {
        return __awaiter(this, void 0, void 0, function* () {
            const { context, did, context: { polymeshApi: { rpc }, }, } = this;
            const identityId = (0, conversion_1.stringToIdentityId)(did, context);
            const result = yield rpc.identity.isIdentityHasValidCdd(identityId);
            return (0, conversion_1.cddStatusToBoolean)(result);
        });
    }
    /**
     * Check whether this Identity is Governance Committee member
     */
    isGcMember() {
        return __awaiter(this, void 0, void 0, function* () {
            const { context: { polymeshApi: { query: { committeeMembership }, }, }, did, } = this;
            const activeMembers = yield committeeMembership.activeMembers();
            return activeMembers.map(conversion_1.identityIdToString).includes(did);
        });
    }
    /**
     * Check whether this Identity is a CDD provider
     */
    isCddProvider() {
        return __awaiter(this, void 0, void 0, function* () {
            const { context: { polymeshApi: { query: { cddServiceProviders }, }, }, did, } = this;
            const activeMembers = yield cddServiceProviders.activeMembers();
            return activeMembers.map(conversion_1.identityIdToString).includes(did);
        });
    }
    // eslint-disable-next-line require-jsdoc
    getPrimaryAccount(callback) {
        return __awaiter(this, void 0, void 0, function* () {
            const { context: { polymeshApi: { query: { identity }, }, }, did, context, } = this;
            const assembleResult = (record) => {
                // we know the record exists because otherwise the Identity couldn't have been fetched
                const { primaryKey } = record.unwrap();
                return {
                    // we know the primary key exists because Asset Identities aren't considered Identities by the SDK for now
                    account: new internal_1.Account({ address: (0, conversion_1.accountIdToString)(primaryKey.unwrap()) }, context),
                    permissions: {
                        assets: null,
                        portfolios: null,
                        transactions: null,
                        transactionGroups: (0, conversion_1.transactionPermissionsToTxGroups)(null),
                    },
                };
            };
            const rawDid = (0, conversion_1.stringToIdentityId)(did, context);
            if (callback) {
                return identity.didRecords(rawDid, records => callback(assembleResult(records)));
            }
            const didRecords = yield identity.didRecords(rawDid);
            return assembleResult(didRecords);
        });
    }
    /**
     * Retrieve a list of all Assets which were held at one point by this Identity
     *
     * @note uses the middlewareV2
     * @note supports pagination
     */
    getHeldAssets(opts = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { context, did } = this;
            const { size, start, order } = opts;
            const { data: { assetHolders: { nodes, totalCount }, }, } = yield context.queryMiddleware((0, queries_1.assetHoldersQuery)({
                identityId: did,
            }, size, start, order));
            const count = new bignumber_js_1.default(totalCount);
            const data = nodes.map(({ assetId: ticker }) => new internal_1.FungibleAsset({ ticker }, context));
            const next = (0, internal_2.calculateNextKey)(count, data.length, start);
            return {
                data,
                next,
                count,
            };
        });
    }
    /**
     * Check whether this Identity possesses all specified roles
     */
    checkRoles(roles) {
        return __awaiter(this, void 0, void 0, function* () {
            const missingRoles = yield bluebird_1.default.filter(roles, (role) => __awaiter(this, void 0, void 0, function* () {
                const hasRole = yield this.hasRole(role);
                return !hasRole;
            }));
            if (missingRoles.length) {
                return {
                    missingRoles,
                    result: false,
                };
            }
            return {
                result: true,
            };
        });
    }
    /**
     * Get the list of Assets for which this Identity is a trusted claim issuer
     *
     * @note uses the middlewareV2
     */
    getTrustingAssets() {
        return __awaiter(this, void 0, void 0, function* () {
            const { context, did } = this;
            const { data: { trustedClaimIssuers: { nodes }, }, } = yield context.queryMiddleware((0, queries_1.trustingAssetsQuery)({ issuer: did }));
            return nodes.map(({ assetId: ticker }) => new internal_1.FungibleAsset({ ticker }, context));
        });
    }
    /**
     * Retrieve all Venues created by this Identity
     *
     * @note can be subscribed to
     */
    getVenues() {
        return __awaiter(this, void 0, void 0, function* () {
            const { context: { polymeshApi: { query: { settlement }, }, }, did, context, } = this;
            const assembleResult = (ids) => ids.map(id => new internal_1.Venue({ id: (0, conversion_1.u64ToBigNumber)(id) }, context));
            const rawDid = (0, conversion_1.stringToIdentityId)(did, context);
            const venueIdsKeys = yield settlement.userVenues.keys(rawDid);
            const venueIds = venueIdsKeys.map(key => {
                return key.args[1];
            });
            return assembleResult(venueIds);
        });
    }
    /**
     * Retrieve all Instructions where this Identity is a custodian of one or more portfolios in the legs,
     *   grouped by status
     */
    getInstructions() {
        return __awaiter(this, void 0, void 0, function* () {
            const { did, portfolios } = this;
            const ownedPortfolios = yield portfolios.getPortfolios();
            const [ownedCustodiedPortfolios, { data: custodiedPortfolios }] = yield Promise.all([
                bluebird_1.default.filter(ownedPortfolios, portfolio => portfolio.isCustodiedBy({ identity: did })),
                this.portfolios.getCustodiedPortfolios(),
            ]);
            const allPortfolios = [...ownedCustodiedPortfolios, ...custodiedPortfolios];
            const { affirmed, pending, failed } = yield this.assembleGroupedInstructions(allPortfolios);
            return {
                affirmed: (0, lodash_1.differenceWith)(affirmed, pending, (obj1, obj2) => obj1.id.eq(obj2.id)),
                pending,
                failed,
            };
        });
    }
    /**
     * Get all the instructions grouped by status, where given portfolios are involved
     *
     * @hidden
     */
    assembleGroupedInstructions(portfolios) {
        return __awaiter(this, void 0, void 0, function* () {
            const { context: { polymeshApi: { query: { settlement }, }, }, context, } = this;
            const affirmed = [];
            const pending = [];
            const failed = [];
            const portfolioIds = portfolios.map(conversion_1.portfolioLikeToPortfolioId);
            yield bluebird_1.default.map(portfolioIds, portfolioId => (0, utils_1.assertPortfolioExists)(portfolioId, context));
            const portfolioIdChunks = (0, lodash_1.chunk)(portfolioIds, constants_1.MAX_CONCURRENT_REQUESTS);
            yield bluebird_1.default.each(portfolioIdChunks, (portfolioIdChunk) => __awaiter(this, void 0, void 0, function* () {
                const auths = yield bluebird_1.default.map(portfolioIdChunk, portfolioId => settlement.userAffirmations.entries((0, conversion_1.portfolioIdToMeshPortfolioId)(portfolioId, context)));
                const uniqueEntries = (0, lodash_1.uniqBy)((0, lodash_1.flatten)(auths).map(([key, status]) => ({ id: key.args[1], status })), ({ id, status }) => `${id.toString()}-${status.type}`);
                const instructionStatuses = yield settlement.instructionStatuses.multi(uniqueEntries.map(({ id }) => id));
                uniqueEntries.forEach(({ id, status: affirmationStatus }, index) => {
                    const instruction = new internal_1.Instruction({ id: (0, conversion_1.u64ToBigNumber)(id) }, context);
                    const status = instructionStatuses[index];
                    if (status.isFailed) {
                        failed.push(instruction);
                    }
                    else if (affirmationStatus.isAffirmed) {
                        affirmed.push(instruction);
                    }
                    else if (status.isPending) {
                        pending.push(instruction);
                    }
                });
            }));
            return {
                affirmed,
                pending,
                failed,
            };
        });
    }
    /**
     * Retrieve all Instructions where this Identity is a participant (owner/custodian),
     *   grouped by the role of the Identity and Instruction status
     */
    getInvolvedInstructions() {
        return __awaiter(this, void 0, void 0, function* () {
            const { portfolios, did } = this;
            const [allPortfolios, { data: custodiedPortfolios }] = yield Promise.all([
                portfolios.getPortfolios(),
                portfolios.getCustodiedPortfolios(),
            ]);
            const ownedPortfolios = [];
            const ownedCustodiedPortfolios = [];
            const custodies = yield Promise.all(allPortfolios.map(portfolio => portfolio.isCustodiedBy({ identity: did })));
            custodies.forEach((custody, index) => {
                if (custody) {
                    ownedCustodiedPortfolios.push(allPortfolios[index]);
                }
                else {
                    ownedPortfolios.push(allPortfolios[index]);
                }
            });
            /**
             * This gathers all the partiallyAffirmed Instructions as the intersection of pending + affirmed.
             * These partiallyAffirmed ones, are then removed from the affirmed and pending to get the unique sets.
             */
            const assembleResult = ({ affirmed, pending, failed, }) => {
                const partiallyAffirmed = (0, lodash_1.intersectionWith)(affirmed, pending, (obj1, obj2) => obj1.id.eq(obj2.id));
                return {
                    affirmed: (0, lodash_1.differenceWith)(affirmed, partiallyAffirmed, (obj1, obj2) => obj1.id.eq(obj2.id)),
                    pending: (0, lodash_1.differenceWith)(pending, partiallyAffirmed, (obj1, obj2) => obj1.id.eq(obj2.id)),
                    partiallyAffirmed,
                    failed,
                };
            };
            const [owned, custodied] = yield Promise.all([
                this.assembleGroupedInstructions(ownedPortfolios),
                this.assembleGroupedInstructions([...ownedCustodiedPortfolios, ...custodiedPortfolios]),
            ]);
            return {
                owned: assembleResult(owned),
                custodied: assembleResult(custodied),
            };
        });
    }
    // eslint-disable-next-line require-jsdoc
    areSecondaryAccountsFrozen(callback) {
        return __awaiter(this, void 0, void 0, function* () {
            const { did, context: { polymeshApi: { query: { identity }, }, }, context, } = this;
            const rawIdentityId = (0, conversion_1.stringToIdentityId)(did, context);
            if (callback) {
                return identity.isDidFrozen(rawIdentityId, frozen => {
                    // eslint-disable-next-line @typescript-eslint/no-floating-promises -- callback errors should be handled by the caller
                    callback((0, conversion_1.boolToBoolean)(frozen));
                });
            }
            const result = yield identity.isDidFrozen(rawIdentityId);
            return (0, conversion_1.boolToBoolean)(result);
        });
    }
    /**
     * Retrieve every Dividend Distribution for which this Identity is eligible and hasn't been paid
     *
     * @note uses the middleware
     * @note this query can be potentially **SLOW** depending on which Assets this Identity has held
     */
    getPendingDistributions() {
        return __awaiter(this, void 0, void 0, function* () {
            const { context, did } = this;
            let assets = [];
            let allFetched = false;
            let start;
            while (!allFetched) {
                const { data, next } = yield this.getHeldAssets({ size: constants_1.MAX_PAGE_SIZE, start });
                start = next ? new bignumber_js_1.default(next) : undefined;
                allFetched = !next;
                assets = [...assets, ...data];
            }
            const distributions = yield this.context.getDividendDistributionsForAssets({ assets });
            const now = new Date();
            /*
             * We filter distributions out if:
             *   - They have expired
             *   - They have not begun
             *   - This Identity has already been paid
             */
            return bluebird_1.default.filter(distributions, ({ distribution }) => __awaiter(this, void 0, void 0, function* () {
                const { expiryDate, asset: { ticker }, id: localId, paymentDate, } = distribution;
                const isExpired = expiryDate && expiryDate < now;
                const hasNotStarted = paymentDate > now;
                if (isExpired || hasNotStarted) {
                    return false;
                }
                const holderPaid = yield context.polymeshApi.query.capitalDistribution.holderPaid((0, utils_2.tuple)((0, conversion_1.corporateActionIdentifierToCaId)({ ticker, localId }, context), (0, conversion_1.stringToIdentityId)(did, context)));
                return !(0, conversion_1.boolToBoolean)(holderPaid);
            }));
        });
    }
    // eslint-disable-next-line require-jsdoc
    getSecondaryAccounts(args, callback) {
        return __awaiter(this, void 0, void 0, function* () {
            const { did, context, context: { polymeshApi: { query: { identity }, }, }, } = this;
            let opts;
            let cb = callback;
            switch (typeof args) {
                case 'undefined': {
                    break;
                }
                case 'function': {
                    cb = args;
                    break;
                }
                default: {
                    opts = args;
                    break;
                }
            }
            const keyToAccount = (key) => {
                const [, value] = key.args;
                const address = (0, conversion_1.accountIdToString)(value);
                return new internal_1.Account({ address }, context);
            };
            const { entries: keys, lastKey: next } = yield (0, internal_2.requestPaginated)(identity.didKeys, {
                arg: did,
                paginationOpts: opts,
            });
            const accounts = keys.map(([key]) => keyToAccount(key));
            if (cb) {
                return (0, internal_2.getSecondaryAccountPermissions)({ accounts }, context, cb);
            }
            const data = yield (0, internal_2.getSecondaryAccountPermissions)({ accounts }, context);
            return {
                data,
                next,
            };
        });
    }
    /**
     * Determine whether this Identity exists on chain
     *
     * @note asset Identities aren't considered to exist for this check
     */
    exists() {
        return __awaiter(this, void 0, void 0, function* () {
            const { did, context } = this;
            const didRecord = yield context.polymeshApi.query.identity.didRecords((0, conversion_1.stringToIdentityId)(did, context));
            if (didRecord.isNone) {
                return false;
            }
            const record = didRecord.unwrap();
            if (record.primaryKey.isNone) {
                return false;
            }
            return true;
        });
    }
    /**
     * Return the Identity's DID
     */
    toHuman() {
        return this.did;
    }
    /**
     * Retrieve all Instructions that have been associated with this Identity's DID
     *
     * @note uses the middleware V2
     */
    getHistoricalInstructions() {
        return __awaiter(this, void 0, void 0, function* () {
            const { context, did } = this;
            const { data: { legs: { nodes: instructionsResult }, }, } = yield context.queryMiddleware((0, queries_1.instructionsByDidQuery)(did));
            return instructionsResult.map(({ instruction }) => 
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            (0, conversion_1.middlewareInstructionToHistoricInstruction)(instruction, context));
        });
    }
    /**
     * Returns the list of all child identities
     *
     * @note this query can be potentially **SLOW** depending on the number of parent Identities present on the chain
     */
    getChildIdentities() {
        return __awaiter(this, void 0, void 0, function* () {
            const { context: { polymeshApi: { query: { identity }, }, }, context, did, } = this;
            const rawEntries = yield identity.parentDid.entries();
            return rawEntries
                .filter(([, rawParentDid]) => (0, conversion_1.identityIdToString)(rawParentDid.unwrapOrDefault()) === did)
                .map(([{ args: [rawChildDid], },]) => new internal_1.ChildIdentity({ did: (0, conversion_1.identityIdToString)(rawChildDid) }, context));
        });
    }
    /**
     * Check whether this Identity is a child Identity
     */
    isChild() {
        return __awaiter(this, void 0, void 0, function* () {
            const { did, context } = this;
            const childIdentity = new internal_1.ChildIdentity({ did }, context);
            return childIdentity.exists();
        });
    }
}
exports.Identity = Identity;
//# sourceMappingURL=index.js.map