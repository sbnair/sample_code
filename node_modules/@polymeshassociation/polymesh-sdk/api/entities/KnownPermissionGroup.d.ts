import { Context, PermissionGroup } from "../../internal";
import { GroupPermissions, PermissionGroupType } from "../../types";
export interface HumanReadable {
    type: PermissionGroupType;
    ticker: string;
}
export interface UniqueIdentifiers {
    type: PermissionGroupType;
    ticker: string;
}
/**
 * Represents a pre-defined group of permissions for an Asset
 */
export declare class KnownPermissionGroup extends PermissionGroup {
    /**
     * @hidden
     * Check if a value is of type {@link UniqueIdentifiers}
     */
    static isUniqueIdentifiers(identifier: unknown): identifier is UniqueIdentifiers;
    type: PermissionGroupType;
    /**
     * @hidden
     */
    constructor(identifiers: UniqueIdentifiers, context: Context);
    /**
     * Retrieve the Permissions associated with this Permission Group
     */
    getPermissions(): Promise<GroupPermissions>;
    /**
     * Determine whether this Known Permission Group exists on chain
     */
    exists(): Promise<boolean>;
    /**
     * Return the KnownPermissionGroup's static data
     */
    toHuman(): HumanReadable;
}
//# sourceMappingURL=KnownPermissionGroup.d.ts.map