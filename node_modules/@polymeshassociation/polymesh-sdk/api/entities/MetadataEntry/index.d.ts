import BigNumber from 'bignumber.js';
import { Context, Entity, FungibleAsset } from "../../../internal";
import { ProcedureMethod, SetMetadataParams } from "../../../types";
import { MetadataDetails, MetadataType, MetadataValue } from './types';
export interface UniqueIdentifiers {
    ticker: string;
    type: MetadataType;
    id: BigNumber;
}
export interface HumanReadable {
    id: string;
    ticker: string;
    type: MetadataType;
}
/**
 * Represents an Asset MetadataEntry in the Polymesh blockchain
 */
export declare class MetadataEntry extends Entity<UniqueIdentifiers, HumanReadable> {
    /**
     * Asset for which this is the metadata
     */
    asset: FungibleAsset;
    /**
     * Type of metadata represented by this instance
     */
    type: MetadataType;
    /**
     * identifier number of the MetadataEntry
     */
    id: BigNumber;
    /**
     * @hidden
     * Check if a value is of type {@link UniqueIdentifiers}
     */
    static isUniqueIdentifiers(identifier: unknown): identifier is UniqueIdentifiers;
    /**
     * @hidden
     */
    constructor(identifiers: UniqueIdentifiers, context: Context);
    /**
     * Assign new value for the MetadataEntry along with its details or optionally only set the details (expiry + lock status) of any Metadata value
     *
     * @note - Value or the details can only be set if the MetadataEntry is not locked
     */
    set: ProcedureMethod<SetMetadataParams, MetadataEntry>;
    /**
     * Retrieve name and specs for this MetadataEntry
     */
    details(): Promise<MetadataDetails>;
    /**
     * Retrieve the value and details (expiry + lock status) for this MetadataEntry
     *
     * @note - This returns `null` if no value is yet specified for this MetadataEntry
     */
    value(): Promise<MetadataValue | null>;
    /**
     * Determine whether this MetadataEntry exists on chain
     */
    exists(): Promise<boolean>;
    /**
     * Return the MetadataEntry's ID, Asset ticker and Metadata type
     */
    toHuman(): HumanReadable;
}
//# sourceMappingURL=index.d.ts.map