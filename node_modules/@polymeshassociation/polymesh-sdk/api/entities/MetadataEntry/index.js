"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetadataEntry = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const internal_1 = require("../../../internal");
const conversion_1 = require("../../../utils/conversion");
const internal_2 = require("../../../utils/internal");
const types_1 = require("./types");
/**
 * Represents an Asset MetadataEntry in the Polymesh blockchain
 */
class MetadataEntry extends internal_1.Entity {
    /**
     * @hidden
     */
    constructor(identifiers, context) {
        super(identifiers, context);
        const { ticker, type, id } = identifiers;
        this.asset = new internal_1.FungibleAsset({ ticker }, context);
        this.type = type;
        this.id = id;
        this.set = (0, internal_2.createProcedureMethod)({ getProcedureAndArgs: args => [internal_1.setMetadata, Object.assign(Object.assign({}, args), { metadataEntry: this })] }, context);
    }
    /**
     * @hidden
     * Check if a value is of type {@link UniqueIdentifiers}
     */
    static isUniqueIdentifiers(identifier) {
        const { id, ticker, type } = identifier;
        return id instanceof bignumber_js_1.default && typeof ticker === 'string' && type in types_1.MetadataType;
    }
    /**
     * Retrieve name and specs for this MetadataEntry
     */
    details() {
        return __awaiter(this, void 0, void 0, function* () {
            const { context: { polymeshApi: { query: { asset: { assetMetadataLocalKeyToName, assetMetadataLocalSpecs, assetMetadataGlobalKeyToName, assetMetadataGlobalSpecs, }, }, }, }, id, asset: { ticker }, type, context, } = this;
            const rawId = (0, conversion_1.bigNumberToU64)(id, context);
            const rawTicker = (0, conversion_1.stringToTicker)(ticker, context);
            let rawName, rawSpecs;
            if (type === types_1.MetadataType.Local) {
                [rawName, rawSpecs] = yield Promise.all([
                    assetMetadataLocalKeyToName(rawTicker, rawId),
                    assetMetadataLocalSpecs(rawTicker, rawId),
                ]);
            }
            else {
                [rawName, rawSpecs] = yield Promise.all([
                    assetMetadataGlobalKeyToName(rawId),
                    assetMetadataGlobalSpecs(rawId),
                ]);
            }
            return {
                name: (0, conversion_1.bytesToString)(rawName.unwrap()),
                specs: (0, conversion_1.meshMetadataSpecToMetadataSpec)(rawSpecs),
            };
        });
    }
    /**
     * Retrieve the value and details (expiry + lock status) for this MetadataEntry
     *
     * @note - This returns `null` if no value is yet specified for this MetadataEntry
     */
    value() {
        return __awaiter(this, void 0, void 0, function* () {
            const { context: { polymeshApi: { query: { asset: { assetMetadataValues, assetMetadataValueDetails }, }, }, }, id, type, asset: { ticker }, context, } = this;
            const rawMetadataKey = (0, conversion_1.metadataToMeshMetadataKey)(type, id, context);
            const rawTicker = (0, conversion_1.stringToTicker)(ticker, context);
            const [rawValue, rawValueDetails] = yield Promise.all([
                assetMetadataValues(rawTicker, rawMetadataKey),
                assetMetadataValueDetails(rawTicker, rawMetadataKey),
            ]);
            return (0, conversion_1.meshMetadataValueToMetadataValue)(rawValue, rawValueDetails);
        });
    }
    /**
     * Determine whether this MetadataEntry exists on chain
     */
    exists() {
        return __awaiter(this, void 0, void 0, function* () {
            return true;
        });
    }
    /**
     * Return the MetadataEntry's ID, Asset ticker and Metadata type
     */
    toHuman() {
        const { asset, id, type } = this;
        return (0, internal_2.toHumanReadable)({
            ticker: asset,
            id,
            type,
        });
    }
}
exports.MetadataEntry = MetadataEntry;
//# sourceMappingURL=index.js.map