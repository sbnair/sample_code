import { BigNumber } from 'bignumber.js';
import { Context, Entity, MultiSig } from "../../../internal";
import { MultiSigProposalDetails } from "../../../types";
interface UniqueIdentifiers {
    multiSigAddress: string;
    id: BigNumber;
}
export interface HumanReadable {
    multiSigAddress: string;
    id: string;
}
/**
 * A proposal for a MultiSig transaction. This is a wrapper around an extrinsic that will be executed when the amount of approvals reaches the signature threshold set on the MultiSig Account
 */
export declare class MultiSigProposal extends Entity<UniqueIdentifiers, HumanReadable> {
    multiSig: MultiSig;
    id: BigNumber;
    /**
     * @hidden
     */
    constructor(identifiers: UniqueIdentifiers, context: Context);
    /**
     * Fetches the details of the Proposal. This includes the amount of approvals and rejections, the expiry, and details of the wrapped extrinsic
     */
    details(): Promise<MultiSigProposalDetails>;
    /**
     * Determines whether this Proposal exists on chain
     */
    exists(): Promise<boolean>;
    /**
     * Returns a human readable representation
     */
    toHuman(): HumanReadable;
}
export {};
//# sourceMappingURL=index.d.ts.map