import BigNumber from 'bignumber.js';
import { Context, Portfolio } from "../../internal";
import { EventIdentifier, ProcedureMethod, RenamePortfolioParams } from "../../types";
export interface UniqueIdentifiers {
    did: string;
    id: BigNumber;
}
/**
 * Represents a numbered (non-default) Portfolio for an Identity
 */
export declare class NumberedPortfolio extends Portfolio {
    /**
     * @hidden
     * Check if a value is of type {@link UniqueIdentifiers}
     */
    static isUniqueIdentifiers(identifier: unknown): identifier is UniqueIdentifiers;
    /**
     * Portfolio identifier number
     */
    id: BigNumber;
    /**
     * @hidden
     */
    constructor(identifiers: UniqueIdentifiers, context: Context);
    /**
     * Rename portfolio
     *
     * @note Only the owner is allowed to rename the Portfolio.
     */
    modifyName: ProcedureMethod<RenamePortfolioParams, NumberedPortfolio>;
    /**
     * Return the Portfolio name
     */
    getName(): Promise<string>;
    /**
     * Retrieve the identifier data (block number, date and event index) of the event that was emitted when this Portfolio was created
     *
     * @note uses the middlewareV2
     * @note there is a possibility that the data is not ready by the time it is requested. In that case, `null` is returned
     */
    createdAt(): Promise<EventIdentifier | null>;
    /**
     * Return whether this Portfolio exists
     */
    exists(): Promise<boolean>;
}
//# sourceMappingURL=NumberedPortfolio.d.ts.map