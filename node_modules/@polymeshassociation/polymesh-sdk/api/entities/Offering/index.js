"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Offering = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const internal_1 = require("../../../internal");
const queries_1 = require("../../../middleware/queries");
const conversion_1 = require("../../../utils/conversion");
const internal_2 = require("../../../utils/internal");
/**
 * Represents an Asset Offering in the Polymesh blockchain
 */
class Offering extends internal_1.Entity {
    /**
     * @hidden
     */
    constructor(identifiers, context) {
        super(identifiers, context);
        const { id, ticker } = identifiers;
        this.id = id;
        this.asset = new internal_1.FungibleAsset({ ticker }, context);
        this.freeze = (0, internal_2.createProcedureMethod)({
            getProcedureAndArgs: () => [internal_1.toggleFreezeOffering, { ticker, id, freeze: true }],
            voidArgs: true,
        }, context);
        this.unfreeze = (0, internal_2.createProcedureMethod)({
            getProcedureAndArgs: () => [internal_1.toggleFreezeOffering, { ticker, id, freeze: false }],
            voidArgs: true,
        }, context);
        this.close = (0, internal_2.createProcedureMethod)({ getProcedureAndArgs: () => [internal_1.closeOffering, { ticker, id }], voidArgs: true }, context);
        this.modifyTimes = (0, internal_2.createProcedureMethod)({ getProcedureAndArgs: args => [internal_1.modifyOfferingTimes, Object.assign({ ticker, id }, args)] }, context);
        this.invest = (0, internal_2.createProcedureMethod)({ getProcedureAndArgs: args => [internal_1.investInOffering, Object.assign({ ticker, id }, args)] }, context);
    }
    /**
     * @hidden
     * Check if a value is of type {@link UniqueIdentifiers}
     */
    static isUniqueIdentifiers(identifier) {
        const { id, ticker } = identifier;
        return id instanceof bignumber_js_1.default && typeof ticker === 'string';
    }
    // eslint-disable-next-line require-jsdoc
    details(callback) {
        return __awaiter(this, void 0, void 0, function* () {
            const { context: { polymeshApi: { query: { sto }, }, }, id, asset: { ticker }, context, } = this;
            const assembleResult = (rawFundraiser, rawName) => {
                return (0, conversion_1.fundraiserToOfferingDetails)(rawFundraiser.unwrap(), rawName.unwrap(), context);
            };
            const rawTicker = (0, conversion_1.stringToTicker)(ticker, context);
            const rawU64 = (0, conversion_1.bigNumberToU64)(id, context);
            const fetchName = () => sto.fundraiserNames(rawTicker, rawU64);
            if (callback) {
                const fundraiserName = yield fetchName();
                return sto.fundraisers(rawTicker, rawU64, fundraiserData => {
                    // eslint-disable-next-line @typescript-eslint/no-floating-promises -- callback errors should be handled by the caller
                    callback(assembleResult(fundraiserData, fundraiserName));
                });
            }
            const [fundraiser, name] = yield Promise.all([sto.fundraisers(rawTicker, rawU64), fetchName()]);
            return assembleResult(fundraiser, name);
        });
    }
    /**
     * Retrieve all investments made on this Offering
     *
     * @param opts.size - page size
     * @param opts.start - page offset
     *
     * @note supports pagination
     * @note uses the middleware V2
     */
    getInvestments(opts = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const { context, id, asset: { ticker }, } = this;
            const { size, start } = opts;
            const { data: { investments: { nodes, totalCount }, }, } = yield context.queryMiddleware((0, queries_1.investmentsQuery)({
                stoId: id.toNumber(),
                offeringToken: ticker,
            }, size, start));
            const count = new bignumber_js_1.default(totalCount);
            const data = nodes.map(({ investorId: did, offeringTokenAmount, raiseTokenAmount }) => ({
                investor: new internal_1.Identity({ did }, context),
                soldAmount: new bignumber_js_1.default(offeringTokenAmount).shiftedBy(-6),
                investedAmount: new bignumber_js_1.default(raiseTokenAmount).shiftedBy(-6),
            }));
            const next = (0, internal_2.calculateNextKey)(count, data.length, start);
            return {
                data,
                next,
                count,
            };
        });
    }
    /**
     * Determine whether this Offering exists on chain
     */
    exists() {
        return __awaiter(this, void 0, void 0, function* () {
            const { asset: { ticker }, id, context, } = this;
            const fundraiser = yield context.polymeshApi.query.sto.fundraisers((0, conversion_1.stringToTicker)(ticker, context), (0, conversion_1.bigNumberToU64)(id, context));
            return fundraiser.isSome;
        });
    }
    /**
     * Return the Offering's ID and Asset ticker
     */
    toHuman() {
        const { asset, id } = this;
        return (0, internal_2.toHumanReadable)({
            ticker: asset,
            id,
        });
    }
}
exports.Offering = Offering;
//# sourceMappingURL=index.js.map