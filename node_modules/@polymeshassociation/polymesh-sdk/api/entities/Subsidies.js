"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Subsidies = void 0;
const internal_1 = require("../../internal");
const conversion_1 = require("../../utils/conversion");
/**
 * Handles all Account Subsidies related functionality
 */
class Subsidies extends internal_1.Namespace {
    /**
     * Get the list of Subsidy relationship along with their subsidized amount for which this Account is the subsidizer
     */
    getBeneficiaries() {
        return __awaiter(this, void 0, void 0, function* () {
            const { context: { polymeshApi: { query: { relayer: { subsidies }, }, }, }, context, parent: { address: subsidizer }, } = this;
            const rawSubsidizer = (0, conversion_1.stringToAccountId)(subsidizer, context);
            const entries = yield subsidies.entries();
            return entries.reduce((result, [{ args: [rawBeneficiary], }, rawSubsidy,]) => {
                const { payingKey, remaining } = rawSubsidy.unwrap();
                if (rawSubsidizer.eq(payingKey)) {
                    const beneficiary = (0, conversion_1.accountIdToString)(rawBeneficiary);
                    const subsidy = new internal_1.Subsidy({ beneficiary, subsidizer }, context);
                    const allowance = (0, conversion_1.balanceToBigNumber)(remaining);
                    return [...result, { subsidy, allowance }];
                }
                return result;
            }, []);
        });
    }
    // eslint-disable-next-line require-jsdoc
    getSubsidizer(callback) {
        const { context, parent: { address }, } = this;
        if (callback) {
            return context.accountSubsidy(address, callback);
        }
        return context.accountSubsidy(address);
    }
}
exports.Subsidies = Subsidies;
//# sourceMappingURL=Subsidies.js.map