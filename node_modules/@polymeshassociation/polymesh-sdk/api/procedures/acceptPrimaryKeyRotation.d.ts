import { AuthorizationRequest, Procedure } from "../../internal";
import { AcceptPrimaryKeyRotationParams } from "../../types";
import { ExtrinsicParams, ProcedureAuthorization, TransactionSpec } from "../../types/internal";
/**
 * @hidden
 */
export interface Storage {
    calledByTarget: boolean;
    ownerAuthRequest: AuthorizationRequest;
    cddAuthRequest?: AuthorizationRequest;
}
/**
 * @hidden
 */
export declare function prepareAcceptPrimaryKeyRotation(this: Procedure<AcceptPrimaryKeyRotationParams, void, Storage>): Promise<TransactionSpec<void, ExtrinsicParams<'identity', 'acceptPrimaryKey'>>>;
/**
 * @hidden
 */
export declare function getAuthorization(this: Procedure<AcceptPrimaryKeyRotationParams, void, Storage>): Promise<ProcedureAuthorization>;
/**
 * @hidden
 */
export declare function prepareStorage(this: Procedure<AcceptPrimaryKeyRotationParams, void, Storage>, { ownerAuth, cddAuth }: AcceptPrimaryKeyRotationParams): Promise<Storage>;
/**
 * @hidden
 */
export declare const acceptPrimaryKeyRotation: () => Procedure<AcceptPrimaryKeyRotationParams, void, Storage>;
//# sourceMappingURL=acceptPrimaryKeyRotation.d.ts.map