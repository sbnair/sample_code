"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.acceptPrimaryKeyRotation = exports.prepareStorage = exports.getAuthorization = exports.prepareAcceptPrimaryKeyRotation = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const utils_1 = require("./utils");
const internal_1 = require("../../internal");
const types_1 = require("../../types");
const conversion_1 = require("../../utils/conversion");
const internal_2 = require("../../utils/internal");
/**
 * @hidden
 */
function prepareAcceptPrimaryKeyRotation() {
    return __awaiter(this, void 0, void 0, function* () {
        const { context: { polymeshApi: { tx: { identity }, }, }, storage: { ownerAuthRequest, cddAuthRequest }, context, } = this;
        const validationPromises = [(0, utils_1.assertAuthorizationRequestValid)(ownerAuthRequest, context)];
        if (cddAuthRequest) {
            validationPromises.push((0, utils_1.assertAuthorizationRequestValid)(cddAuthRequest, context));
        }
        yield Promise.all(validationPromises);
        const { authId: ownerAuthId, issuer } = ownerAuthRequest;
        return {
            transaction: identity.acceptPrimaryKey,
            paidForBy: issuer,
            args: [
                (0, conversion_1.bigNumberToU64)(ownerAuthId, context),
                (0, internal_2.optionize)(conversion_1.bigNumberToU64)(cddAuthRequest === null || cddAuthRequest === void 0 ? void 0 : cddAuthRequest.authId, context),
            ],
            resolver: undefined,
        };
    });
}
exports.prepareAcceptPrimaryKeyRotation = prepareAcceptPrimaryKeyRotation;
/**
 * @hidden
 */
function getAuthorization() {
    return __awaiter(this, void 0, void 0, function* () {
        const { storage: { calledByTarget }, } = this;
        return {
            roles: calledByTarget ||
                `"${types_1.AuthorizationType.RotatePrimaryKey}" Authorization Requests must be accepted by the target Account`,
        };
    });
}
exports.getAuthorization = getAuthorization;
/**
 * @hidden
 */
function prepareStorage({ ownerAuth, cddAuth }) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context } = this;
        const signingAccount = context.getSigningAccount();
        const getAuthRequest = (auth) => __awaiter(this, void 0, void 0, function* () {
            if (auth && auth instanceof bignumber_js_1.default) {
                return signingAccount.authorizations.getOne({ id: auth });
            }
            return auth;
        });
        const ownerAuthRequest = yield getAuthRequest(ownerAuth);
        let calledByTarget = signingAccount.isEqual(ownerAuthRequest.target);
        let cddAuthRequest;
        if (cddAuth) {
            cddAuthRequest = yield getAuthRequest(cddAuth);
            calledByTarget = calledByTarget && signingAccount.isEqual(cddAuthRequest.target);
        }
        return {
            calledByTarget,
            ownerAuthRequest,
            cddAuthRequest,
        };
    });
}
exports.prepareStorage = prepareStorage;
/**
 * @hidden
 */
const acceptPrimaryKeyRotation = () => new internal_1.Procedure(prepareAcceptPrimaryKeyRotation, getAuthorization, prepareStorage);
exports.acceptPrimaryKeyRotation = acceptPrimaryKeyRotation;
//# sourceMappingURL=acceptPrimaryKeyRotation.js.map