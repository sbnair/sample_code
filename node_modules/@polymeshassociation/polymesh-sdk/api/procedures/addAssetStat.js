"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addAssetStat = exports.getAuthorization = exports.prepareAddAssetStat = void 0;
const internal_1 = require("../../internal");
const types_1 = require("../../types");
const conversion_1 = require("../../utils/conversion");
const internal_2 = require("../../utils/internal");
/**
 * @hidden
 */
function prepareAddAssetStat(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context: { polymeshApi: { query: { statistics: statisticsQuery }, tx: { statistics }, }, }, context, } = this;
        const { ticker, type } = args;
        const tickerKey = (0, conversion_1.stringToTickerKey)(ticker, context);
        const currentStats = yield statisticsQuery.activeAssetStats(tickerKey);
        const needStat = ![...currentStats].find(s => (0, internal_2.compareStatsToInput)(s, args));
        if (!needStat) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.NoDataChange,
                message: 'Stat is already enabled',
            });
        }
        const op = (0, conversion_1.statTypeToStatOpType)(type, context);
        const transactions = [];
        let rawClaimIssuer;
        if (type === types_1.StatType.ScopedCount || type === types_1.StatType.ScopedBalance) {
            rawClaimIssuer = (0, conversion_1.claimIssuerToMeshClaimIssuer)(args, context);
        }
        const newStat = (0, conversion_1.statisticsOpTypeToStatType)({ op, claimIssuer: rawClaimIssuer }, context);
        const newStats = (0, conversion_1.statisticStatTypesToBtreeStatType)([...currentStats, newStat], context);
        transactions.push((0, internal_2.checkTxType)({
            transaction: statistics.setActiveAssetStats,
            args: [tickerKey, newStats],
        }));
        // Count stats need the user to provide the initial value for the counter as computing may cause prohibitive gas charges on the chain
        // We require users to provide initial stats in this method so they won't miss setting initial values. It could be its own step
        if (args.type === types_1.StatType.Count) {
            const statValue = (0, conversion_1.countStatInputToStatUpdates)(args, context);
            transactions.push((0, internal_2.checkTxType)({
                transaction: statistics.batchUpdateAssetStats,
                args: [tickerKey, newStat, statValue],
            }));
        }
        else if (args.type === types_1.StatType.ScopedCount) {
            const statValue = (0, conversion_1.claimCountStatInputToStatUpdates)(args, context);
            transactions.push((0, internal_2.checkTxType)({
                transaction: statistics.batchUpdateAssetStats,
                args: [tickerKey, newStat, statValue],
            }));
        }
        return { transactions, resolver: undefined };
    });
}
exports.prepareAddAssetStat = prepareAddAssetStat;
/**
 * @hidden
 */
function getAuthorization({ type, ticker }) {
    const transactions = [types_1.TxTags.statistics.SetActiveAssetStats];
    if (type === types_1.StatType.Count || type === types_1.StatType.ScopedCount) {
        transactions.push(types_1.TxTags.statistics.BatchUpdateAssetStats);
    }
    const asset = new internal_1.FungibleAsset({ ticker }, this.context);
    return {
        permissions: {
            transactions,
            assets: [asset],
            portfolios: [],
        },
    };
}
exports.getAuthorization = getAuthorization;
/**
 * @hidden
 */
const addAssetStat = () => new internal_1.Procedure(prepareAddAssetStat, getAuthorization);
exports.addAssetStat = addAssetStat;
//# sourceMappingURL=addAssetStat.js.map