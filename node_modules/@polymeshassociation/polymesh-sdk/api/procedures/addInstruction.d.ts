import { ISubmittableResult } from '@polkadot/types/types';
import BigNumber from 'bignumber.js';
import { Context, DefaultPortfolio, Instruction, NumberedPortfolio, Procedure } from "../../internal";
import { AddInstructionsParams } from "../../types";
import { BatchTransactionSpec, ProcedureAuthorization } from "../../types/internal";
/**
 * @hidden
 */
export declare type Params = AddInstructionsParams & {
    venueId: BigNumber;
};
/**
 * @hidden
 */
export interface Storage {
    portfoliosToAffirm: (DefaultPortfolio | NumberedPortfolio)[][];
}
/**
 * @hidden
 */
export declare const createAddInstructionResolver: (context: Context) => (receipt: ISubmittableResult) => Instruction[];
/**
 * @hidden
 */
export declare function prepareAddInstruction(this: Procedure<Params, Instruction[], Storage>, args: Params): Promise<BatchTransactionSpec<Instruction[], unknown[][]>>;
/**
 * @hidden
 */
export declare function getAuthorization(this: Procedure<Params, Instruction[], Storage>, { venueId }: Params): Promise<ProcedureAuthorization>;
/**
 * @hidden
 */
export declare function prepareStorage(this: Procedure<Params, Instruction[], Storage>, { instructions }: Params): Promise<Storage>;
/**
 * @hidden
 */
export declare const addInstruction: () => Procedure<Params, Instruction[], Storage>;
//# sourceMappingURL=addInstruction.d.ts.map