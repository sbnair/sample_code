"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.addTransferRestriction = exports.getAuthorization = exports.prepareAddTransferRestriction = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const internal_1 = require("../../internal");
const types_1 = require("../../types");
const conversion_1 = require("../../utils/conversion");
const internal_2 = require("../../utils/internal");
/**
 * @hidden
 */
function prepareAddTransferRestriction(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context: { polymeshApi: { tx: { statistics }, query: { statistics: statisticsQuery }, consts, }, }, context, } = this;
        const { ticker, exemptedIdentities = [], type } = args;
        const tickerKey = (0, conversion_1.stringToTickerKey)(ticker, context);
        let claimIssuer;
        if (type === types_1.TransferRestrictionType.ClaimCount ||
            type === types_1.TransferRestrictionType.ClaimPercentage) {
            const { claim: { type: cType }, issuer, } = args;
            claimIssuer = { claimType: cType, issuer };
        }
        const [currentStats, { requirements: currentRestrictions }] = yield (0, internal_2.requestMulti)(context, [
            [statisticsQuery.activeAssetStats, tickerKey],
            [statisticsQuery.assetTransferCompliances, tickerKey],
        ]);
        const neededStat = (0, internal_2.neededStatTypeForRestrictionInput)({ type, claimIssuer }, context);
        (0, internal_2.assertStatIsSet)(currentStats, neededStat);
        const maxConditions = (0, conversion_1.u32ToBigNumber)(consts.statistics.maxTransferConditionsPerAsset);
        const restrictionAmount = new bignumber_js_1.default(currentRestrictions.size);
        if (restrictionAmount.gte(maxConditions)) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.LimitExceeded,
                message: 'Transfer Restriction limit reached',
                data: { limit: maxConditions },
            });
        }
        let restriction;
        let claimType;
        if (type === types_1.TransferRestrictionType.Count) {
            const value = args.count;
            restriction = { type, value };
        }
        else if (type === types_1.TransferRestrictionType.Percentage) {
            const value = args.percentage;
            restriction = { type, value };
        }
        else if (type === types_1.TransferRestrictionType.ClaimCount) {
            const { min, max: maybeMax, issuer, claim } = args;
            restriction = { type, value: { min, max: maybeMax, issuer, claim } };
            claimType = claim.type;
        }
        else {
            const { min, max, issuer, claim } = args;
            restriction = { type, value: { min, max, issuer, claim } };
            claimType = claim.type;
        }
        const rawTransferCondition = (0, conversion_1.transferRestrictionToPolymeshTransferCondition)(restriction, context);
        const hasRestriction = !![...currentRestrictions].find(r => r.eq(rawTransferCondition));
        if (hasRestriction) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.NoDataChange,
                message: 'Cannot add the same restriction more than once',
            });
        }
        const conditions = (0, conversion_1.complianceConditionsToBtreeSet)([...currentRestrictions, rawTransferCondition], context);
        const transactions = [];
        transactions.push((0, internal_2.checkTxType)({
            transaction: statistics.setAssetTransferCompliance,
            args: [tickerKey, conditions],
        }));
        if (exemptedIdentities.length) {
            const op = (0, conversion_1.transferRestrictionTypeToStatOpType)(type, context);
            const exemptedIdBtreeSet = yield (0, internal_2.getExemptedBtreeSet)(exemptedIdentities, ticker, context);
            const exemptKey = (0, conversion_1.toExemptKey)(tickerKey, op, claimType);
            transactions.push((0, internal_2.checkTxType)({
                transaction: statistics.setEntitiesExempt,
                feeMultiplier: new bignumber_js_1.default(exemptedIdBtreeSet.size),
                args: [true, exemptKey, exemptedIdBtreeSet],
            }));
        }
        return { transactions, resolver: restrictionAmount.plus(1) };
    });
}
exports.prepareAddTransferRestriction = prepareAddTransferRestriction;
/**
 * @hidden
 */
function getAuthorization({ ticker, exemptedIdentities = [] }) {
    const transactions = [types_1.TxTags.statistics.SetAssetTransferCompliance];
    if (exemptedIdentities.length) {
        transactions.push(types_1.TxTags.statistics.SetEntitiesExempt);
    }
    return {
        permissions: {
            assets: [new internal_1.FungibleAsset({ ticker }, this.context)],
            transactions,
            portfolios: [],
        },
    };
}
exports.getAuthorization = getAuthorization;
/**
 * @hidden
 */
const addTransferRestriction = () => new internal_1.Procedure(prepareAddTransferRestriction, getAuthorization);
exports.addTransferRestriction = addTransferRestriction;
//# sourceMappingURL=addTransferRestriction.js.map