"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.attestPrimaryKeyRotation = exports.prepareAttestPrimaryKeyRotation = void 0;
const utils_1 = require("./utils");
const internal_1 = require("../../internal");
const types_1 = require("../../types");
const conversion_1 = require("../../utils/conversion");
const internal_2 = require("../../utils/internal");
/**
 * @hidden
 */
function prepareAttestPrimaryKeyRotation(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context: { polymeshApi: { tx: { identity: { addAuthorization }, }, }, }, context, } = this;
        const { targetAccount, identity, expiry } = args;
        const issuerIdentity = yield context.getSigningIdentity();
        const target = (0, internal_2.asAccount)(targetAccount, context);
        const targetIdentity = (0, internal_2.asIdentity)(identity, context);
        const authorizationRequests = yield target.authorizations.getReceived({
            type: types_1.AuthorizationType.AttestPrimaryKeyRotation,
            includeExpired: false,
        });
        const pendingAuthorization = authorizationRequests.find(authorizationRequest => {
            const { value } = authorizationRequest.data;
            return value.did === targetIdentity.did;
        });
        if (pendingAuthorization) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.NoDataChange,
                message: 'The target Account already has a pending attestation to become the primary key of the target Identity',
                data: {
                    pendingAuthorization,
                },
            });
        }
        const rawSignatory = (0, conversion_1.signerToSignatory)(target, context);
        const authRequest = {
            type: types_1.AuthorizationType.AttestPrimaryKeyRotation,
            value: targetIdentity,
        };
        const rawAuthorizationData = (0, conversion_1.authorizationToAuthorizationData)(authRequest, context);
        const rawExpiry = (0, conversion_1.expiryToMoment)(expiry, context);
        return {
            transaction: addAuthorization,
            args: [rawSignatory, rawAuthorizationData, rawExpiry],
            resolver: (0, utils_1.createAuthorizationResolver)(authRequest, issuerIdentity, target, expiry !== null && expiry !== void 0 ? expiry : null, context),
        };
    });
}
exports.prepareAttestPrimaryKeyRotation = prepareAttestPrimaryKeyRotation;
/**
 * @hidden
 */
const attestPrimaryKeyRotation = () => new internal_1.Procedure(prepareAttestPrimaryKeyRotation, {
    roles: [{ type: types_1.RoleType.CddProvider }],
    permissions: {
        assets: [],
        portfolios: [],
        transactions: [types_1.TxTags.identity.AddAuthorization],
    },
});
exports.attestPrimaryKeyRotation = attestPrimaryKeyRotation;
//# sourceMappingURL=attestPrimaryKeyRotation.js.map