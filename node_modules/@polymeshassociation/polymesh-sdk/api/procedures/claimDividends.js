"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.claimDividends = exports.prepareClaimDividends = void 0;
const utils_1 = require("./utils");
const internal_1 = require("../../internal");
const types_1 = require("../../types");
const conversion_1 = require("../../utils/conversion");
/**
 * @hidden
 */
function prepareClaimDividends(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context: { polymeshApi: { tx }, }, context, } = this;
        const { distribution, distribution: { id: localId, asset: { ticker }, paymentDate, expiryDate, }, } = args;
        (0, utils_1.assertDistributionOpen)(paymentDate, expiryDate);
        const participant = yield distribution.getParticipant();
        if (!participant) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.UnmetPrerequisite,
                message: 'The signing Identity is not included in this Distribution',
            });
        }
        const { paid } = participant;
        if (paid) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.UnmetPrerequisite,
                message: 'The signing Identity has already claimed dividends',
            });
        }
        const rawCaId = (0, conversion_1.corporateActionIdentifierToCaId)({ ticker, localId }, context);
        return {
            transaction: tx.capitalDistribution.claim,
            args: [rawCaId],
            resolver: undefined,
        };
    });
}
exports.prepareClaimDividends = prepareClaimDividends;
/**
 * @hidden
 */
const claimDividends = () => new internal_1.Procedure(prepareClaimDividends, {
    permissions: {
        transactions: [types_1.TxTags.capitalDistribution.Claim],
        assets: [],
        portfolios: [],
    },
});
exports.claimDividends = claimDividends;
//# sourceMappingURL=claimDividends.js.map