import { ISubmittableResult } from '@polkadot/types/types';
import { Context, DefaultPortfolio, DividendDistribution, NumberedPortfolio, Procedure } from "../../internal";
import { ConfigureDividendDistributionParams } from "../../types";
import { ExtrinsicParams, ProcedureAuthorization, TransactionSpec } from "../../types/internal";
/**
 * @hidden
 */
export declare const createDividendDistributionResolver: (context: Context) => (receipt: ISubmittableResult) => Promise<DividendDistribution>;
/**
 * @hidden
 */
export declare type Params = ConfigureDividendDistributionParams & {
    ticker: string;
};
/**
 * @hidden
 */
export interface Storage {
    portfolio: DefaultPortfolio | NumberedPortfolio;
}
/**
 * @hidden
 */
export declare function prepareConfigureDividendDistribution(this: Procedure<Params, DividendDistribution, Storage>, args: Params): Promise<TransactionSpec<DividendDistribution, ExtrinsicParams<'corporateAction', 'initiateCorporateActionAndDistribute'>>>;
/**
 * @hidden
 */
export declare function getAuthorization(this: Procedure<Params, DividendDistribution, Storage>, { ticker }: Params): ProcedureAuthorization;
/**
 * @hidden
 */
export declare function prepareStorage(this: Procedure<Params, DividendDistribution, Storage>, { originPortfolio }: Params): Promise<Storage>;
/**
 * @hidden
 */
export declare const configureDividendDistribution: () => Procedure<Params, DividendDistribution, Storage>;
//# sourceMappingURL=configureDividendDistribution.d.ts.map