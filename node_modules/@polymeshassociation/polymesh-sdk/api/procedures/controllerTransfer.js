"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.controllerTransfer = exports.prepareStorage = exports.getAuthorization = exports.prepareControllerTransfer = void 0;
const internal_1 = require("../../internal");
const types_1 = require("../../types");
const conversion_1 = require("../../utils/conversion");
/**
 * @hidden
 */
function prepareControllerTransfer(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context: { polymeshApi: { tx }, }, storage: { did }, context, } = this;
        const { ticker, originPortfolio, amount } = args;
        const asset = new internal_1.FungibleAsset({ ticker }, context);
        const originPortfolioId = (0, conversion_1.portfolioLikeToPortfolioId)(originPortfolio);
        if (did === originPortfolioId.did) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.UnmetPrerequisite,
                message: 'Controller transfers to self are not allowed',
            });
        }
        const fromPortfolio = (0, conversion_1.portfolioIdToPortfolio)(originPortfolioId, context);
        const [{ free }] = yield fromPortfolio.getAssetBalances({
            assets: [asset],
        });
        if (free.lt(amount)) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.InsufficientBalance,
                message: 'The origin Portfolio does not have enough free balance for this transfer',
                data: { free },
            });
        }
        return {
            transaction: tx.asset.controllerTransfer,
            args: [
                (0, conversion_1.stringToTicker)(ticker, context),
                (0, conversion_1.bigNumberToBalance)(amount, context),
                (0, conversion_1.portfolioIdToMeshPortfolioId)(originPortfolioId, context),
            ],
            resolver: undefined,
        };
    });
}
exports.prepareControllerTransfer = prepareControllerTransfer;
/**
 * @hidden
 */
function getAuthorization({ ticker }) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context, storage: { did }, } = this;
        const asset = new internal_1.FungibleAsset({ ticker }, context);
        const portfolioId = { did };
        return {
            roles: [{ type: types_1.RoleType.PortfolioCustodian, portfolioId }],
            permissions: {
                assets: [asset],
                transactions: [types_1.TxTags.asset.ControllerTransfer],
                portfolios: [new internal_1.DefaultPortfolio({ did }, context)],
            },
        };
    });
}
exports.getAuthorization = getAuthorization;
/**
 * @hidden
 */
function prepareStorage() {
    return __awaiter(this, void 0, void 0, function* () {
        const { context } = this;
        const { did } = yield context.getSigningIdentity();
        return {
            did,
        };
    });
}
exports.prepareStorage = prepareStorage;
/**
 * @hidden
 */
const controllerTransfer = () => new internal_1.Procedure(prepareControllerTransfer, getAuthorization, prepareStorage);
exports.controllerTransfer = controllerTransfer;
//# sourceMappingURL=controllerTransfer.js.map