import { Bytes, u32 } from '@polkadot/types';
import { FungibleAsset, Identity, Procedure } from "../../internal";
import { CreateAssetWithTickerParams, TickerReservationStatus } from "../../types";
import { BatchTransactionSpec, ProcedureAuthorization } from "../../types/internal";
/**
 * @hidden
 */
export declare type Params = CreateAssetWithTickerParams & {
    reservationRequired: boolean;
};
/**
 * @hidden
 */
export interface Storage {
    /**
     * fetched custom asset type ID and raw value in bytes. If `id.isEmpty`, then the type should be registered. A
     *   null value means the type is not custom
     */
    customTypeData: {
        id: u32;
        rawValue: Bytes;
    } | null;
    status: TickerReservationStatus;
    signingIdentity: Identity;
}
/**
 * @hidden
 */
export declare function prepareCreateAsset(this: Procedure<Params, FungibleAsset, Storage>, args: Params): Promise<BatchTransactionSpec<FungibleAsset, unknown[][]>>;
/**
 * @hidden
 */
export declare function getAuthorization(this: Procedure<Params, FungibleAsset, Storage>, { ticker, documents, initialStatistics }: Params): Promise<ProcedureAuthorization>;
/**
 * @hidden
 */
export declare function prepareStorage(this: Procedure<Params, FungibleAsset, Storage>, { ticker, assetType }: Params): Promise<Storage>;
/**
 * @hidden
 */
export declare const createAsset: () => Procedure<Params, FungibleAsset, Storage>;
//# sourceMappingURL=createAsset.d.ts.map