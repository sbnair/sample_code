import { ISubmittableResult } from '@polkadot/types/types';
import { ChildIdentity, Context, Identity, Procedure } from "../../internal";
import { CreateChildIdentityParams } from "../../types";
import { ExtrinsicParams, ProcedureAuthorization, TransactionSpec } from "../../types/internal";
/**
 * @hidden
 */
export interface Storage {
    identity: Identity;
}
/**
 * @hidden
 */
export declare const createChildIdentityResolver: (context: Context) => (receipt: ISubmittableResult) => ChildIdentity;
/**
 * @hidden
 */
export declare function prepareCreateChildIdentity(this: Procedure<CreateChildIdentityParams, ChildIdentity, Storage>, args: CreateChildIdentityParams): Promise<TransactionSpec<ChildIdentity, ExtrinsicParams<'identity', 'createChildIdentity'>>>;
/**
 * @hidden
 */
export declare function getAuthorization(this: Procedure<CreateChildIdentityParams, ChildIdentity, Storage>): Promise<ProcedureAuthorization>;
/**
 * @hidden
 */
export declare function prepareStorage(this: Procedure<CreateChildIdentityParams, ChildIdentity, Storage>): Promise<Storage>;
/**
 * @hidden
 */
export declare const createChildIdentity: () => Procedure<CreateChildIdentityParams, ChildIdentity, Storage>;
//# sourceMappingURL=createChildIdentity.d.ts.map