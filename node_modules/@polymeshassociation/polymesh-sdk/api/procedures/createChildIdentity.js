"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createChildIdentity = exports.prepareStorage = exports.getAuthorization = exports.prepareCreateChildIdentity = exports.createChildIdentityResolver = void 0;
const internal_1 = require("../../internal");
const types_1 = require("../../types");
const conversion_1 = require("../../utils/conversion");
const internal_2 = require("../../utils/internal");
/**
 * @hidden
 */
const createChildIdentityResolver = (context) => (receipt) => {
    const [{ data }] = (0, internal_2.filterEventRecords)(receipt, 'identity', 'ChildDidCreated');
    const did = (0, conversion_1.identityIdToString)(data[1]);
    return new internal_1.ChildIdentity({ did }, context);
};
exports.createChildIdentityResolver = createChildIdentityResolver;
/**
 * @hidden
 */
function prepareCreateChildIdentity(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context: { polymeshApi: { tx, query }, }, context, storage: { identity: { did: signingDid }, }, } = this;
        const { secondaryKey } = args;
        const childAccount = (0, internal_2.asAccount)(secondaryKey, context);
        const rawIdentity = (0, conversion_1.stringToIdentityId)(signingDid, context);
        const rawChildAccount = (0, conversion_1.stringToAccountId)(childAccount.address, context);
        const childIdentity = new internal_1.ChildIdentity({ did: signingDid }, context);
        const [isSecondaryKey, multiSig, parentDid] = yield Promise.all([
            query.identity.didKeys(rawIdentity, rawChildAccount),
            childAccount.getMultiSig(),
            childIdentity.getParentDid(),
        ]);
        if (!(0, conversion_1.boolToBoolean)(isSecondaryKey)) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.UnmetPrerequisite,
                message: 'The `secondaryKey` provided is not a secondary key of the signing Identity',
            });
        }
        if (multiSig) {
            const { total } = yield multiSig.getBalance();
            if (total.gt(0)) {
                throw new internal_1.PolymeshError({
                    code: types_1.ErrorCode.UnmetPrerequisite,
                    message: "The `secondaryKey` can't be unlinked from the signing Identity",
                });
            }
        }
        if (parentDid) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.UnmetPrerequisite,
                message: 'The signing Identity is already a child Identity and cannot create further child identities',
                data: {
                    parentDid,
                },
            });
        }
        return {
            transaction: tx.identity.createChildIdentity,
            args: [rawChildAccount],
            resolver: (0, exports.createChildIdentityResolver)(context),
        };
    });
}
exports.prepareCreateChildIdentity = prepareCreateChildIdentity;
/**
 * @hidden
 */
function getAuthorization() {
    return __awaiter(this, void 0, void 0, function* () {
        const { context, storage: { identity }, } = this;
        const signingAccount = context.getSigningAccount();
        const { account: primaryAccount } = yield identity.getPrimaryAccount();
        if (!signingAccount.isEqual(primaryAccount)) {
            return {
                signerPermissions: "A child Identity can only be created by an Identity's primary Account",
            };
        }
        return {
            permissions: {
                transactions: [types_1.TxTags.identity.CreateChildIdentity],
                assets: [],
                portfolios: [],
            },
        };
    });
}
exports.getAuthorization = getAuthorization;
/**
 * @hidden
 */
function prepareStorage() {
    return __awaiter(this, void 0, void 0, function* () {
        const { context } = this;
        return {
            identity: yield context.getSigningIdentity(),
        };
    });
}
exports.prepareStorage = prepareStorage;
/**
 * @hidden
 */
const createChildIdentity = () => new internal_1.Procedure(prepareCreateChildIdentity, getAuthorization, prepareStorage);
exports.createChildIdentity = createChildIdentity;
//# sourceMappingURL=createChildIdentity.js.map