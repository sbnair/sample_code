"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMultiSigAccount = exports.prepareCreateMultiSigAccount = exports.createMultiSigResolver = void 0;
const internal_1 = require("../../internal");
const types_1 = require("../../types");
const conversion_1 = require("../../utils/conversion");
const internal_2 = require("../../utils/internal");
const createMultiSigResolver = (context) => (receipt) => {
    const [{ data }] = (0, internal_2.filterEventRecords)(receipt, 'multiSig', 'MultiSigCreated');
    const address = (0, conversion_1.accountIdToString)(data[1]);
    return new internal_1.MultiSig({ address }, context);
};
exports.createMultiSigResolver = createMultiSigResolver;
/**
 * @hidden
 */
function prepareCreateMultiSigAccount(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context: { polymeshApi: { tx }, }, context, } = this;
        const { signers, requiredSignatures } = args;
        if (requiredSignatures.gt(signers.length)) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.ValidationError,
                message: 'The number of required signatures should not exceed the number of signers',
            });
        }
        const rawRequiredSignatures = (0, conversion_1.bigNumberToU64)(requiredSignatures, context);
        const rawSignatories = signers.map(signer => (0, conversion_1.signerToSignatory)(signer, context));
        return {
            transaction: tx.multiSig.createMultisig,
            resolver: (0, exports.createMultiSigResolver)(context),
            args: [rawSignatories, rawRequiredSignatures],
        };
    });
}
exports.prepareCreateMultiSigAccount = prepareCreateMultiSigAccount;
/**
 * @hidden
 */
const createMultiSigAccount = () => new internal_1.Procedure(prepareCreateMultiSigAccount, {
    permissions: {
        transactions: [types_1.TxTags.multiSig.CreateMultisig],
    },
});
exports.createMultiSigAccount = createMultiSigAccount;
//# sourceMappingURL=createMultiSig.js.map