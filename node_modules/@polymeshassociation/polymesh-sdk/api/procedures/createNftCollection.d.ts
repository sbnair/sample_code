import { Bytes, u32 } from '@polkadot/types';
import { Identity, NftCollection, Procedure } from "../../internal";
import { CreateNftCollectionParams, TickerReservationStatus } from "../../types";
import { BatchTransactionSpec, ProcedureAuthorization } from "../../types/internal";
/**
 * @hidden
 */
export declare type Params = CreateNftCollectionParams;
/**
 * @hidden
 */
export interface Storage {
    /**
     * fetched custom asset type ID and raw value in bytes.
     * A null value means the type is not custom
     */
    customTypeData: {
        rawId: u32;
        rawValue: Bytes;
    } | null;
    status: TickerReservationStatus;
    signingIdentity: Identity;
    needsLocalMetadata: boolean;
}
/**
 * @hidden
 */
export declare function prepareCreateNftCollection(this: Procedure<Params, NftCollection, Storage>, args: Params): Promise<BatchTransactionSpec<NftCollection, unknown[][]>>;
/**
 * @hidden
 */
export declare function getAuthorization(this: Procedure<Params, NftCollection, Storage>, { ticker, documents }: Params): Promise<ProcedureAuthorization>;
/**
 * @hidden
 */
export declare function prepareStorage(this: Procedure<Params, NftCollection, Storage>, { ticker, nftType, collectionKeys }: Params): Promise<Storage>;
/**
 * @hidden
 */
export declare const createNftCollection: () => Procedure<Params, NftCollection, Storage>;
//# sourceMappingURL=createNftCollection.d.ts.map