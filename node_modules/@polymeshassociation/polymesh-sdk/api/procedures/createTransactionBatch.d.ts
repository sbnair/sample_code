import { Procedure } from "../../internal";
import { CreateTransactionBatchParams, TxTag } from "../../types";
import { BatchTransactionSpec, ProcedureAuthorization, ResolverFunction, TxWithArgs } from "../../types/internal";
export interface Storage {
    processedTransactions: TxWithArgs[];
    tags: TxTag[];
    resolvers: ResolverFunction<unknown>[];
}
/**
 * @hidden
 */
export declare function prepareCreateTransactionBatch<ReturnValues extends unknown[]>(this: Procedure<CreateTransactionBatchParams<ReturnValues>, ReturnValues, Storage>): Promise<BatchTransactionSpec<ReturnValues, unknown[][]>>;
/**
 * @hidden
 */
export declare function getAuthorization<ReturnValues extends unknown[]>(this: Procedure<CreateTransactionBatchParams<ReturnValues>, ReturnValues, Storage>): ProcedureAuthorization;
/**
 * @hidden
 */
export declare function prepareStorage<ReturnValues extends unknown[]>(this: Procedure<CreateTransactionBatchParams<ReturnValues>, ReturnValues, Storage>, args: CreateTransactionBatchParams<ReturnValues>): Storage;
/**
 * @hidden
 */
export declare const createTransactionBatch: <ReturnValues extends unknown[]>() => Procedure<CreateTransactionBatchParams<ReturnValues>, ReturnValues, Storage>;
//# sourceMappingURL=createTransactionBatch.d.ts.map