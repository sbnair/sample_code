import { ISubmittableResult } from '@polkadot/types/types';
import { AuthorizationRequest, BaseAsset, Identity, Procedure } from "../../internal";
import { InviteExternalAgentParams } from "../../types";
import { ExtrinsicParams, ProcedureAuthorization, TransactionSpec } from "../../types/internal";
export declare const createGroupAndAuthorizationResolver: (target: Identity) => (receipt: ISubmittableResult) => Promise<AuthorizationRequest>;
/**
 * @hidden
 */
export declare type Params = InviteExternalAgentParams & {
    ticker: string;
};
/**
 * @hidden
 */
export interface Storage {
    asset: BaseAsset;
}
/**
 * @hidden
 */
export declare function prepareInviteExternalAgent(this: Procedure<Params, AuthorizationRequest, Storage>, args: Params): Promise<TransactionSpec<AuthorizationRequest, ExtrinsicParams<'externalAgents', 'createGroupAndAddAuth'>> | TransactionSpec<AuthorizationRequest, ExtrinsicParams<'identity', 'addAuthorization'>>>;
/**
 * @hidden
 */
export declare function getAuthorization(this: Procedure<Params, AuthorizationRequest, Storage>): ProcedureAuthorization;
/**
 * @hidden
 */
export declare function prepareStorage(this: Procedure<Params, AuthorizationRequest, Storage>, { ticker }: Params): Storage;
/**
 * @hidden
 */
export declare const inviteExternalAgent: () => Procedure<Params, AuthorizationRequest, Storage>;
//# sourceMappingURL=inviteExternalAgent.d.ts.map