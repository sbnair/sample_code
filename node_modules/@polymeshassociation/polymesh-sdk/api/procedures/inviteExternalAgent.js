"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.inviteExternalAgent = exports.prepareStorage = exports.getAuthorization = exports.prepareInviteExternalAgent = exports.createGroupAndAuthorizationResolver = void 0;
const utils_1 = require("./utils");
const internal_1 = require("../../internal");
const types_1 = require("../../types");
const conversion_1 = require("../../utils/conversion");
const internal_2 = require("../../utils/internal");
const createGroupAndAuthorizationResolver = (target) => (receipt) => {
    const [{ data }] = (0, internal_2.filterEventRecords)(receipt, 'identity', 'AuthorizationAdded');
    const id = (0, conversion_1.u64ToBigNumber)(data[3]);
    return target.authorizations.getOne({ id });
};
exports.createGroupAndAuthorizationResolver = createGroupAndAuthorizationResolver;
/**
 * @hidden
 */
function prepareInviteExternalAgent(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context: { polymeshApi: { tx: { identity, externalAgents }, }, }, context, storage: { asset }, } = this;
        const { ticker, target, permissions, expiry = null } = args;
        const issuer = yield context.getSigningIdentity();
        const targetIdentity = yield context.getIdentity(target);
        const currentAgents = yield asset.permissions.getAgents();
        const isAgent = !!currentAgents.find(({ agent }) => agent.isEqual(targetIdentity));
        if (isAgent) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.NoDataChange,
                message: 'The target Identity is already an External Agent',
            });
        }
        const targetDid = (0, conversion_1.signerToString)(target);
        const rawSignatory = (0, conversion_1.signerValueToSignatory)({ type: types_1.SignerType.Identity, value: targetDid }, context);
        let newAuthorizationData;
        let rawAuthorizationData;
        // helper to transform permissions into the relevant Authorization
        const createBecomeAgentData = (value) => ({
            type: types_1.AuthorizationType.BecomeAgent,
            value,
        });
        if (permissions instanceof internal_1.KnownPermissionGroup || permissions instanceof internal_1.CustomPermissionGroup) {
            newAuthorizationData = createBecomeAgentData(permissions);
            rawAuthorizationData = (0, conversion_1.authorizationToAuthorizationData)(newAuthorizationData, context);
        }
        else {
            const rawTicker = (0, conversion_1.stringToTicker)(ticker, context);
            const { transactions } = (0, conversion_1.permissionsLikeToPermissions)(permissions, context);
            const matchingGroup = yield (0, utils_1.getGroupFromPermissions)(asset, transactions);
            /*
             * if there is no existing group with the passed permissions, we create it together with the Authorization Request.
             *   Otherwise, we use the existing group's ID to create the Authorization request
             */
            if (!matchingGroup) {
                return {
                    transaction: externalAgents.createGroupAndAddAuth,
                    args: [
                        rawTicker,
                        (0, conversion_1.transactionPermissionsToExtrinsicPermissions)(transactions, context),
                        (0, conversion_1.stringToIdentityId)(targetDid, context),
                        null,
                    ],
                    resolver: (0, exports.createGroupAndAuthorizationResolver)(targetIdentity),
                };
            }
            newAuthorizationData = createBecomeAgentData(matchingGroup);
            rawAuthorizationData = (0, conversion_1.authorizationToAuthorizationData)(newAuthorizationData, context);
        }
        const rawExpiry = (0, internal_2.optionize)(conversion_1.dateToMoment)(expiry, context);
        return {
            transaction: identity.addAuthorization,
            args: [rawSignatory, rawAuthorizationData, rawExpiry],
            resolver: (0, utils_1.createAuthorizationResolver)(newAuthorizationData, issuer, targetIdentity, expiry, context),
        };
    });
}
exports.prepareInviteExternalAgent = prepareInviteExternalAgent;
/**
 * @hidden
 */
function getAuthorization() {
    const { storage: { asset }, } = this;
    return {
        permissions: {
            transactions: [types_1.TxTags.identity.AddAuthorization],
            assets: [asset],
            portfolios: [],
        },
    };
}
exports.getAuthorization = getAuthorization;
/**
 * @hidden
 */
function prepareStorage({ ticker }) {
    const { context } = this;
    return {
        asset: new internal_1.BaseAsset({ ticker }, context),
    };
}
exports.prepareStorage = prepareStorage;
/**
 * @hidden
 */
const inviteExternalAgent = () => new internal_1.Procedure(prepareInviteExternalAgent, getAuthorization, prepareStorage);
exports.inviteExternalAgent = inviteExternalAgent;
//# sourceMappingURL=inviteExternalAgent.js.map