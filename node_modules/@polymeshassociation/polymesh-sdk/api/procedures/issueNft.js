"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.issueNft = exports.prepareStorage = exports.getAuthorization = exports.prepareIssueNft = exports.issueNftResolver = void 0;
const Nft_1 = require("../entities/Asset/NonFungible/Nft");
const internal_1 = require("../../internal");
const types_1 = require("../../types");
const conversion_1 = require("../../utils/conversion");
const internal_2 = require("../../utils/internal");
/**
 * @hidden
 */
const issueNftResolver = (context) => (receipt) => {
    const [{ data }] = (0, internal_2.filterEventRecords)(receipt, 'nft', 'NFTPortfolioUpdated');
    const { ticker, ids } = (0, conversion_1.meshNftToNftId)(data[1]);
    return new Nft_1.Nft({ ticker, id: ids[0] }, context);
};
exports.issueNftResolver = issueNftResolver;
/**
 * @hidden
 */
function prepareIssueNft(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context: { polymeshApi: { tx }, }, context, storage: { collection }, } = this;
        const { ticker, portfolioId, metadata } = args;
        const rawMetadataValues = (0, conversion_1.nftInputToNftMetadataVec)(metadata, context);
        const neededMetadata = yield collection.collectionMetadataKeys();
        // for each input, find and remove a value from needed
        args.metadata.forEach(value => {
            const matchedIndex = neededMetadata.findIndex(requiredValue => value.type === requiredValue.type && value.id.eq(requiredValue.id));
            if (matchedIndex < 0) {
                throw new internal_1.PolymeshError({
                    code: types_1.ErrorCode.ValidationError,
                    message: 'A metadata value was given that is not required for this collection',
                    data: { ticker, type: value.type, id: value.id },
                });
            }
            neededMetadata.splice(matchedIndex, 1);
        });
        if (neededMetadata.length > 0) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.ValidationError,
                message: 'The collection requires metadata that was not provided',
                data: { missingMetadata: JSON.stringify(neededMetadata) },
            });
        }
        const signingIdentity = yield context.getSigningIdentity();
        const portfolio = portfolioId
            ? yield signingIdentity.portfolios.getPortfolio({ portfolioId })
            : yield signingIdentity.portfolios.getPortfolio();
        const rawTicker = (0, conversion_1.stringToTicker)(ticker, context);
        const rawPortfolio = (0, conversion_1.portfolioToPortfolioKind)(portfolio, context);
        return {
            transaction: tx.nft.issueNft,
            args: [rawTicker, rawMetadataValues, rawPortfolio],
            resolver: (0, exports.issueNftResolver)(context),
        };
    });
}
exports.prepareIssueNft = prepareIssueNft;
/**
 * @hidden
 */
function getAuthorization() {
    const { storage: { collection }, } = this;
    return {
        permissions: {
            transactions: [types_1.TxTags.nft.IssueNft],
            assets: [collection],
            portfolios: [],
        },
    };
}
exports.getAuthorization = getAuthorization;
/**
 * @hidden
 */
function prepareStorage({ ticker }) {
    const { context } = this;
    return {
        collection: new internal_1.NftCollection({ ticker }, context),
    };
}
exports.prepareStorage = prepareStorage;
/**
 * @hidden
 */
const issueNft = () => new internal_1.Procedure(prepareIssueNft, getAuthorization, prepareStorage);
exports.issueNft = issueNft;
//# sourceMappingURL=issueNft.js.map