import { ISubmittableResult } from '@polkadot/types/types';
import { Context, Offering, Procedure } from "../../internal";
import { LaunchOfferingParams, PortfolioId } from "../../types";
import { ExtrinsicParams, ProcedureAuthorization, TransactionSpec } from "../../types/internal";
/**
 * @hidden
 */
export declare type Params = LaunchOfferingParams & {
    ticker: string;
};
/**
 * @hidden
 */
export interface Storage {
    offeringPortfolioId: PortfolioId;
    raisingPortfolioId: PortfolioId;
}
/**
 * @hidden
 */
export declare const createOfferingResolver: (ticker: string, context: Context) => (receipt: ISubmittableResult) => Offering;
/**
 * @hidden
 */
export declare function prepareLaunchOffering(this: Procedure<Params, Offering, Storage>, args: Params): Promise<TransactionSpec<Offering, ExtrinsicParams<'sto', 'createFundraiser'>>>;
/**
 * @hidden
 */
export declare function getAuthorization(this: Procedure<Params, Offering, Storage>, { ticker }: Params): ProcedureAuthorization;
/**
 * @hidden
 */
export declare function prepareStorage(this: Procedure<Params, Offering, Storage>, { offeringPortfolio, raisingPortfolio }: Params): Promise<Storage>;
/**
 * @hidden
 */
export declare const launchOffering: () => Procedure<Params, Offering, Storage>;
//# sourceMappingURL=launchOffering.d.ts.map