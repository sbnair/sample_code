"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.leaveIdentity = exports.prepareLeaveIdentity = void 0;
const internal_1 = require("../../internal");
const types_1 = require("../../types");
const internal_2 = require("../../utils/internal");
/**
 * @hidden
 */
function prepareLeaveIdentity() {
    return __awaiter(this, void 0, void 0, function* () {
        const { context: { polymeshApi: { tx }, }, context, } = this;
        const signingAccount = context.getSigningAccount();
        const signingIdentity = yield signingAccount.getIdentity();
        if (!signingIdentity) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.UnmetPrerequisite,
                message: 'There is no Identity associated to the signing Account',
            });
        }
        const [accountPermission] = yield (0, internal_2.getSecondaryAccountPermissions)({
            accounts: [signingAccount],
            identity: signingIdentity,
        }, context);
        const isSecondaryAccount = accountPermission && signingAccount.isEqual(accountPermission.account);
        if (!isSecondaryAccount) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.UnmetPrerequisite,
                message: 'Only secondary Accounts are allowed to leave an Identity',
            });
        }
        return { transaction: tx.identity.leaveIdentityAsKey, resolver: undefined };
    });
}
exports.prepareLeaveIdentity = prepareLeaveIdentity;
/**
 * @hidden
 */
const leaveIdentity = () => new internal_1.Procedure(prepareLeaveIdentity, {
    permissions: {
        assets: [],
        portfolios: [],
        transactions: [types_1.TxTags.identity.LeaveIdentityAsKey],
    },
});
exports.leaveIdentity = leaveIdentity;
//# sourceMappingURL=leaveIdentity.js.map