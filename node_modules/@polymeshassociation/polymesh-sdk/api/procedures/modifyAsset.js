"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.modifyAsset = exports.getAuthorization = exports.prepareModifyAsset = void 0;
const internal_1 = require("../../internal");
const types_1 = require("../../types");
const conversion_1 = require("../../utils/conversion");
const internal_2 = require("../../utils/internal");
/**
 * @hidden
 */
function prepareModifyAsset(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context: { polymeshApi: { tx }, }, context, } = this;
        const { ticker, makeDivisible, name: newName, fundingRound: newFundingRound, identifiers: newIdentifiers, } = args;
        const noArguments = makeDivisible === undefined &&
            newName === undefined &&
            newFundingRound === undefined &&
            newIdentifiers === undefined;
        if (noArguments) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.NoDataChange,
                message: 'Nothing to modify',
            });
        }
        const rawTicker = (0, conversion_1.stringToTicker)(ticker, context);
        const asset = new internal_1.FungibleAsset({ ticker }, context);
        const [{ isDivisible, name }, fundingRound, identifiers] = yield Promise.all([
            asset.details(),
            asset.currentFundingRound(),
            asset.getIdentifiers(),
        ]);
        const transactions = [];
        if (makeDivisible) {
            if (isDivisible) {
                throw new internal_1.PolymeshError({
                    code: types_1.ErrorCode.NoDataChange,
                    message: 'The Asset is already divisible',
                });
            }
            transactions.push((0, internal_2.checkTxType)({
                transaction: tx.asset.makeDivisible,
                args: [rawTicker],
            }));
        }
        if (newName) {
            if (newName === name) {
                throw new internal_1.PolymeshError({
                    code: types_1.ErrorCode.NoDataChange,
                    message: 'New name is the same as current name',
                });
            }
            const nameBytes = (0, conversion_1.nameToAssetName)(newName, context);
            transactions.push((0, internal_2.checkTxType)({
                transaction: tx.asset.renameAsset,
                args: [rawTicker, nameBytes],
            }));
        }
        if (newFundingRound) {
            if (newFundingRound === fundingRound) {
                throw new internal_1.PolymeshError({
                    code: types_1.ErrorCode.NoDataChange,
                    message: 'New funding round name is the same as current funding round',
                });
            }
            const fundingBytes = (0, conversion_1.fundingRoundToAssetFundingRound)(newFundingRound, context);
            transactions.push((0, internal_2.checkTxType)({
                transaction: tx.asset.setFundingRound,
                args: [rawTicker, fundingBytes],
            }));
        }
        if (newIdentifiers) {
            const identifiersAreEqual = (0, internal_2.hasSameElements)(identifiers, newIdentifiers);
            if (identifiersAreEqual) {
                throw new internal_1.PolymeshError({
                    code: types_1.ErrorCode.NoDataChange,
                    message: 'New identifiers are the same as current identifiers',
                });
            }
            transactions.push((0, internal_2.checkTxType)({
                transaction: tx.asset.updateIdentifiers,
                args: [
                    rawTicker,
                    newIdentifiers.map(newIdentifier => (0, conversion_1.securityIdentifierToAssetIdentifier)(newIdentifier, context)),
                ],
            }));
        }
        return { transactions, resolver: asset };
    });
}
exports.prepareModifyAsset = prepareModifyAsset;
/**
 * @hidden
 */
function getAuthorization({ ticker, makeDivisible, name, fundingRound, identifiers }) {
    const transactions = [];
    if (makeDivisible !== undefined) {
        transactions.push(types_1.TxTags.asset.MakeDivisible);
    }
    if (name) {
        transactions.push(types_1.TxTags.asset.RenameAsset);
    }
    if (fundingRound) {
        transactions.push(types_1.TxTags.asset.SetFundingRound);
    }
    if (identifiers) {
        transactions.push(types_1.TxTags.asset.UpdateIdentifiers);
    }
    return {
        permissions: {
            transactions,
            portfolios: [],
            assets: [new internal_1.FungibleAsset({ ticker }, this.context)],
        },
    };
}
exports.getAuthorization = getAuthorization;
/**
 * @hidden
 */
const modifyAsset = () => new internal_1.Procedure(prepareModifyAsset, getAuthorization);
exports.modifyAsset = modifyAsset;
//# sourceMappingURL=modifyAsset.js.map