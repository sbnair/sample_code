"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.modifyVenue = exports.getAuthorization = exports.prepareModifyVenue = void 0;
const internal_1 = require("../../internal");
const types_1 = require("../../types");
const conversion_1 = require("../../utils/conversion");
const internal_2 = require("../../utils/internal");
/**
 * @hidden
 */
function prepareModifyVenue(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context: { polymeshApi: { tx }, }, context, } = this;
        const { venue, description, type } = args;
        const { id: venueId } = venue;
        const { description: currentDescription, type: currentType } = yield venue.details();
        if (currentDescription === description) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.NoDataChange,
                message: 'New description is the same as the current one',
            });
        }
        if (currentType === type) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.NoDataChange,
                message: 'New type is the same as the current one',
            });
        }
        const transactions = [];
        if (description) {
            transactions.push((0, internal_2.checkTxType)({
                transaction: tx.settlement.updateVenueDetails,
                args: [(0, conversion_1.bigNumberToU64)(venueId, context), (0, conversion_1.stringToBytes)(description, context)],
            }));
        }
        if (type) {
            transactions.push((0, internal_2.checkTxType)({
                transaction: tx.settlement.updateVenueType,
                args: [(0, conversion_1.bigNumberToU64)(venueId, context), (0, conversion_1.venueTypeToMeshVenueType)(type, context)],
            }));
        }
        return { transactions, resolver: undefined };
    });
}
exports.prepareModifyVenue = prepareModifyVenue;
/**
 * @hidden
 */
function getAuthorization({ venue: { id: venueId }, description, type }) {
    const transactions = [];
    if (description) {
        transactions.push(types_1.TxTags.settlement.UpdateVenueDetails);
    }
    if (type) {
        transactions.push(types_1.TxTags.settlement.UpdateVenueType);
    }
    return {
        roles: [{ type: types_1.RoleType.VenueOwner, venueId }],
        permissions: {
            assets: [],
            portfolios: [],
            transactions,
        },
    };
}
exports.getAuthorization = getAuthorization;
/**
 * @hidden
 */
const modifyVenue = () => new internal_1.Procedure(prepareModifyVenue, getAuthorization);
exports.modifyVenue = modifyVenue;
//# sourceMappingURL=modifyVenue.js.map