"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.quitSubsidy = exports.getAuthorization = exports.prepareQuitSubsidy = void 0;
const internal_1 = require("../../internal");
const types_1 = require("../../types");
const conversion_1 = require("../../utils/conversion");
/**
 * @hidden
 */
function prepareQuitSubsidy(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context: { polymeshApi: { tx }, }, context, } = this;
        const { subsidy: { beneficiary: { address: beneficiaryAddress }, subsidizer: { address: subsidizerAddress }, }, subsidy, } = args;
        const exists = yield subsidy.exists();
        if (!exists) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.DataUnavailable,
                message: 'The Subsidy no longer exists',
            });
        }
        const rawBeneficiaryAccount = (0, conversion_1.stringToAccountId)(beneficiaryAddress, context);
        const rawSubsidizerAccount = (0, conversion_1.stringToAccountId)(subsidizerAddress, context);
        return {
            transaction: tx.relayer.removePayingKey,
            args: [rawBeneficiaryAccount, rawSubsidizerAccount],
            resolver: undefined,
        };
    });
}
exports.prepareQuitSubsidy = prepareQuitSubsidy;
/**
 * @hidden
 *
 * To quit a Subsidy, the caller should be either the beneficiary or the subsidizer
 */
function getAuthorization(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context } = this;
        const { subsidy: { beneficiary: { address: beneficiaryAddress }, subsidizer: { address: subsidizerAddress }, }, } = args;
        const { address } = context.getSigningAccount();
        const hasRoles = [beneficiaryAddress, subsidizerAddress].includes(address);
        return {
            roles: hasRoles || 'Only the subsidizer or the beneficiary are allowed to quit a Subsidy',
            permissions: {
                transactions: [types_1.TxTags.relayer.RemovePayingKey],
            },
        };
    });
}
exports.getAuthorization = getAuthorization;
/**
 * @hidden
 */
const quitSubsidy = () => new internal_1.Procedure(prepareQuitSubsidy, getAuthorization);
exports.quitSubsidy = quitSubsidy;
//# sourceMappingURL=quitSubsidy.js.map