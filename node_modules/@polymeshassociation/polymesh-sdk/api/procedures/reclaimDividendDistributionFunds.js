"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.reclaimDividendDistributionFunds = exports.getAuthorization = exports.prepareReclaimDividendDistributionFunds = void 0;
const internal_1 = require("../../internal");
const types_1 = require("../../types");
const conversion_1 = require("../../utils/conversion");
/**
 * @hidden
 */
function prepareReclaimDividendDistributionFunds(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context: { polymeshApi: { tx }, }, context, } = this;
        const { distribution: { id: localId, asset: { ticker }, expiryDate, }, distribution, } = args;
        if (expiryDate && expiryDate >= new Date()) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.UnmetPrerequisite,
                message: 'The Distribution must be expired',
                data: {
                    expiryDate,
                },
            });
        }
        const { fundsReclaimed } = yield distribution.details();
        if (fundsReclaimed) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.UnmetPrerequisite,
                message: 'Distribution funds have already been reclaimed',
            });
        }
        const rawCaId = (0, conversion_1.corporateActionIdentifierToCaId)({ ticker, localId }, context);
        return {
            transaction: tx.capitalDistribution.reclaim,
            args: [rawCaId],
            resolver: undefined,
        };
    });
}
exports.prepareReclaimDividendDistributionFunds = prepareReclaimDividendDistributionFunds;
/**
 * @hidden
 */
function getAuthorization({ distribution: { origin, asset: { ticker }, }, }) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context } = this;
        return {
            roles: [{ type: types_1.RoleType.PortfolioCustodian, portfolioId: (0, conversion_1.portfolioToPortfolioId)(origin) }],
            permissions: {
                transactions: [types_1.TxTags.capitalDistribution.Reclaim],
                assets: [new internal_1.FungibleAsset({ ticker }, context)],
                portfolios: [origin],
            },
        };
    });
}
exports.getAuthorization = getAuthorization;
/**
 * @hidden
 */
const reclaimDividendDistributionFunds = () => new internal_1.Procedure(prepareReclaimDividendDistributionFunds, getAuthorization);
exports.reclaimDividendDistributionFunds = reclaimDividendDistributionFunds;
//# sourceMappingURL=reclaimDividendDistributionFunds.js.map