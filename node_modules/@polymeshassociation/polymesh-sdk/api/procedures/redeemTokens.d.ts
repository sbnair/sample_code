import { DefaultPortfolio, NumberedPortfolio, Procedure } from "../../internal";
import { RedeemTokensParams } from "../../types";
import { ExtrinsicParams, ProcedureAuthorization, TransactionSpec } from "../../types/internal";
export interface Storage {
    fromPortfolio: DefaultPortfolio | NumberedPortfolio;
}
/**
 * @hidden
 */
export declare type Params = {
    ticker: string;
} & RedeemTokensParams;
/**
 * @hidden
 */
export declare function prepareRedeemTokens(this: Procedure<Params, void, Storage>, args: Params): Promise<TransactionSpec<void, ExtrinsicParams<'asset', 'redeem'>> | TransactionSpec<void, ExtrinsicParams<'asset', 'redeemFromPortfolio'>>>;
/**
 * @hidden
 */
export declare function getAuthorization(this: Procedure<Params, void, Storage>, { ticker, from }: Params): Promise<ProcedureAuthorization>;
/**
 * @hidden
 */
export declare function prepareStorage(this: Procedure<Params, void, Storage>, { from }: Params): Promise<Storage>;
/**
 * @hidden
 */
export declare const redeemTokens: () => Procedure<Params, void, Storage>;
//# sourceMappingURL=redeemTokens.d.ts.map