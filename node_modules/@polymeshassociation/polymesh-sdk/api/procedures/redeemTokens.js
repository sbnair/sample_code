"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.redeemTokens = exports.prepareStorage = exports.getAuthorization = exports.prepareRedeemTokens = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const internal_1 = require("../../internal");
const types_1 = require("../../types");
const conversion_1 = require("../../utils/conversion");
/**
 * @hidden
 */
function prepareRedeemTokens(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context, context: { polymeshApi: { tx }, }, storage: { fromPortfolio }, } = this;
        const { ticker, amount, from } = args;
        const asset = new internal_1.FungibleAsset({ ticker }, context);
        const rawTicker = (0, conversion_1.stringToTicker)(ticker, context);
        const [[{ free }], { isDivisible }] = yield Promise.all([
            fromPortfolio.getAssetBalances({ assets: [ticker] }),
            asset.details(),
        ]);
        if (free.lt(amount)) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.InsufficientBalance,
                message: 'Insufficient free balance',
                data: {
                    free,
                },
            });
        }
        const rawAmount = (0, conversion_1.bigNumberToBalance)(amount, context, isDivisible);
        if (from) {
            return {
                transaction: tx.asset.redeemFromPortfolio,
                args: [rawTicker, rawAmount, (0, conversion_1.portfolioToPortfolioKind)(fromPortfolio, context)],
                resolver: undefined,
            };
        }
        return {
            transaction: tx.asset.redeem,
            args: [rawTicker, rawAmount],
            resolver: undefined,
        };
    });
}
exports.prepareRedeemTokens = prepareRedeemTokens;
/**
 * @hidden
 */
function getAuthorization({ ticker, from }) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context, storage: { fromPortfolio }, } = this;
        return {
            permissions: {
                transactions: [from ? types_1.TxTags.asset.RedeemFromPortfolio : types_1.TxTags.asset.Redeem],
                assets: [new internal_1.FungibleAsset({ ticker }, context)],
                portfolios: [fromPortfolio],
            },
        };
    });
}
exports.getAuthorization = getAuthorization;
/**
 * @hidden
 */
function prepareStorage({ from }) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context } = this;
        const { did } = yield context.getSigningIdentity();
        let fromPortfolio;
        if (!from) {
            fromPortfolio = new internal_1.DefaultPortfolio({ did }, context);
        }
        else if (from instanceof bignumber_js_1.default) {
            fromPortfolio = new internal_1.NumberedPortfolio({ did, id: from }, context);
        }
        else {
            fromPortfolio = from;
        }
        return {
            fromPortfolio,
        };
    });
}
exports.prepareStorage = prepareStorage;
/**
 * @hidden
 */
const redeemTokens = () => new internal_1.Procedure(prepareRedeemTokens, getAuthorization, prepareStorage);
exports.redeemTokens = redeemTokens;
//# sourceMappingURL=redeemTokens.js.map