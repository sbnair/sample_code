"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerCustomClaimType = exports.prepareRegisterCustomClaimType = exports.createRegisterCustomClaimTypeResolver = void 0;
const internal_1 = require("../../internal");
const types_1 = require("../../types");
const conversion_1 = require("../../utils/conversion");
const internal_2 = require("../../utils/internal");
/**
 * @hidden
 */
const createRegisterCustomClaimTypeResolver = () => (receipt) => {
    const [{ data }] = (0, internal_2.filterEventRecords)(receipt, 'identity', 'CustomClaimTypeAdded');
    return (0, conversion_1.u32ToBigNumber)(data[1]);
};
exports.createRegisterCustomClaimTypeResolver = createRegisterCustomClaimTypeResolver;
/**
 * @hidden
 */
function prepareRegisterCustomClaimType(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context: { polymeshApi: { tx: { identity }, query: { identity: identityQuery }, consts: { base: { maxLen }, }, }, }, } = this;
        const { name } = args;
        const claimTypeMaxLength = (0, conversion_1.u32ToBigNumber)(maxLen);
        if (claimTypeMaxLength.lt(name.length)) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.ValidationError,
                message: 'CustomClaimType name length exceeded',
                data: {
                    maxLength: claimTypeMaxLength,
                },
            });
        }
        const customClaimTypeIdOpt = yield identityQuery.customClaimsInverse(name);
        if (customClaimTypeIdOpt.isSome) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.ValidationError,
                message: `The CustomClaimType with "${name}" already exists`,
            });
        }
        return {
            transaction: identity.registerCustomClaimType,
            args: [name],
            resolver: (0, exports.createRegisterCustomClaimTypeResolver)(),
        };
    });
}
exports.prepareRegisterCustomClaimType = prepareRegisterCustomClaimType;
/**
 * @hidden
 */
const registerCustomClaimType = () => new internal_1.Procedure(prepareRegisterCustomClaimType, {
    roles: [],
    permissions: {
        assets: [],
        portfolios: [],
        transactions: [types_1.TxTags.identity.RegisterCustomClaimType],
    },
});
exports.registerCustomClaimType = registerCustomClaimType;
//# sourceMappingURL=registerCustomClaimType.js.map