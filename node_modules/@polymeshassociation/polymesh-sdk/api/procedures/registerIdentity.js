"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerIdentity = exports.prepareRegisterIdentity = exports.createRegisterIdentityResolver = void 0;
const internal_1 = require("../../internal");
const types_1 = require("../../types");
const conversion_1 = require("../../utils/conversion");
const internal_2 = require("../../utils/internal");
/**
 * @hidden
 */
const createRegisterIdentityResolver = (context) => (receipt) => {
    const [{ data }] = (0, internal_2.filterEventRecords)(receipt, 'identity', 'DidCreated');
    const did = (0, conversion_1.identityIdToString)(data[0]);
    return new internal_1.Identity({ did }, context);
};
exports.createRegisterIdentityResolver = createRegisterIdentityResolver;
/**
 * @hidden
 */
function prepareRegisterIdentity(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context: { polymeshApi: { tx: { identity }, }, }, context, } = this;
        const { targetAccount, secondaryAccounts = [], createCdd = false, expiry } = args;
        const rawTargetAccount = (0, conversion_1.stringToAccountId)((0, conversion_1.signerToString)(targetAccount), context);
        const rawSecondaryKeys = secondaryAccounts.map((_a) => {
            var { permissions } = _a, rest = __rest(_a, ["permissions"]);
            return (0, conversion_1.secondaryAccountToMeshSecondaryKey)(Object.assign(Object.assign({}, rest), { permissions: (0, conversion_1.permissionsLikeToPermissions)(permissions, context) }), context);
        });
        if (createCdd) {
            const cddExpiry = (0, internal_2.optionize)(conversion_1.dateToMoment)(expiry, context);
            return {
                transaction: identity.cddRegisterDidWithCdd,
                args: [rawTargetAccount, rawSecondaryKeys, cddExpiry],
                resolver: (0, exports.createRegisterIdentityResolver)(context),
            };
        }
        else {
            if (expiry) {
                throw new internal_1.PolymeshError({
                    code: types_1.ErrorCode.ValidationError,
                    message: 'Expiry cannot be set unless a CDD claim is being created',
                });
            }
            return {
                transaction: identity.cddRegisterDid,
                args: [rawTargetAccount, rawSecondaryKeys],
                resolver: (0, exports.createRegisterIdentityResolver)(context),
            };
        }
    });
}
exports.prepareRegisterIdentity = prepareRegisterIdentity;
/**
 * @hidden
 */
const registerIdentity = () => new internal_1.Procedure(prepareRegisterIdentity, {
    roles: [{ type: types_1.RoleType.CddProvider }],
    permissions: {
        assets: [],
        portfolios: [],
        transactions: [types_1.TxTags.identity.CddRegisterDid],
    },
});
exports.registerIdentity = registerIdentity;
//# sourceMappingURL=registerIdentity.js.map