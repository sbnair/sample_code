import { ISubmittableResult } from '@polkadot/types/types';
import { Context, MetadataEntry, Procedure } from "../../internal";
import { RegisterMetadataParams } from "../../types";
import { ExtrinsicParams, ProcedureAuthorization, TransactionSpec } from "../../types/internal";
/**
 * @hidden
 */
export declare type Params = RegisterMetadataParams & {
    ticker: string;
};
/**
 * @hidden
 */
export declare const createMetadataResolver: (ticker: string, context: Context) => (receipt: ISubmittableResult) => MetadataEntry;
/**
 * @hidden
 */
export declare function prepareRegisterMetadata(this: Procedure<Params, MetadataEntry>, params: Params): Promise<TransactionSpec<MetadataEntry, ExtrinsicParams<'assets', 'registerAssetMetadataLocalType'>> | TransactionSpec<MetadataEntry, ExtrinsicParams<'assets', 'registerAndSetLocalAssetMetadata'>>>;
/**
 * @hidden
 */
export declare function getAuthorization(this: Procedure<Params, MetadataEntry>, params: Params): ProcedureAuthorization;
/**
 * @hidden
 */
export declare const registerMetadata: () => Procedure<Params, MetadataEntry>;
//# sourceMappingURL=registerMetadata.d.ts.map