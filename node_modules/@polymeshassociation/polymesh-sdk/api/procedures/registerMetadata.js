"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerMetadata = exports.getAuthorization = exports.prepareRegisterMetadata = exports.createMetadataResolver = void 0;
const internal_1 = require("../../internal");
const types_1 = require("../../types");
const conversion_1 = require("../../utils/conversion");
const internal_2 = require("../../utils/internal");
/**
 * @hidden
 */
const createMetadataResolver = (ticker, context) => (receipt) => {
    const [{ data }] = (0, internal_2.filterEventRecords)(receipt, 'asset', 'RegisterAssetMetadataLocalType');
    const id = (0, conversion_1.u64ToBigNumber)(data[3]);
    return new internal_1.MetadataEntry({ id, ticker, type: types_1.MetadataType.Local }, context);
};
exports.createMetadataResolver = createMetadataResolver;
/**
 * @hidden
 */
function prepareRegisterMetadata(params) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context: { polymeshApi: { tx, query: { asset: { assetMetadataGlobalNameToKey, assetMetadataLocalNameToKey }, }, consts: { asset: { assetMetadataNameMaxLength }, }, }, }, context, } = this;
        const { name, ticker, specs } = params;
        const rawTicker = (0, conversion_1.stringToTicker)(ticker, context);
        const metadataNameMaxLength = (0, conversion_1.u32ToBigNumber)(assetMetadataNameMaxLength);
        if (metadataNameMaxLength.lt(name.length)) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.ValidationError,
                message: 'Asset Metadata name length exceeded',
                data: {
                    maxLength: metadataNameMaxLength,
                },
            });
        }
        const rawName = (0, conversion_1.stringToBytes)(name, context);
        const [rawGlobalId, rawLocalId] = yield (0, internal_2.requestMulti)(context, [
            [assetMetadataGlobalNameToKey, rawName],
            [assetMetadataLocalNameToKey, [rawTicker, rawName]],
        ]);
        if (rawGlobalId.isSome || rawLocalId.isSome) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.UnmetPrerequisite,
                message: `Metadata with name "${name}" already exists`,
            });
        }
        const args = [rawTicker, rawName, (0, conversion_1.metadataSpecToMeshMetadataSpec)(specs, context)];
        if ('value' in params) {
            // eslint-disable-next-line @typescript-eslint/no-shadow, @typescript-eslint/no-unused-vars
            const { value, details } = params;
            return {
                transaction: tx.asset.registerAndSetLocalAssetMetadata,
                args: [
                    ...args,
                    (0, conversion_1.metadataValueToMeshMetadataValue)(value, context),
                    (0, internal_2.optionize)(conversion_1.metadataValueDetailToMeshMetadataValueDetail)(details, context),
                ],
                resolver: (0, exports.createMetadataResolver)(ticker, context),
            };
        }
        return {
            transaction: tx.asset.registerAssetMetadataLocalType,
            args,
            resolver: (0, exports.createMetadataResolver)(ticker, context),
        };
    });
}
exports.prepareRegisterMetadata = prepareRegisterMetadata;
/**
 * @hidden
 */
function getAuthorization(params) {
    const { context } = this;
    const { ticker } = params;
    const transactions = [];
    if ('value' in params) {
        transactions.push(types_1.TxTags.asset.RegisterAndSetLocalAssetMetadata);
    }
    else {
        transactions.push(types_1.TxTags.asset.RegisterAssetMetadataLocalType);
    }
    return {
        permissions: {
            transactions,
            assets: [new internal_1.FungibleAsset({ ticker }, context)],
            portfolios: [],
        },
    };
}
exports.getAuthorization = getAuthorization;
/**
 * @hidden
 */
const registerMetadata = () => new internal_1.Procedure(prepareRegisterMetadata, getAuthorization);
exports.registerMetadata = registerMetadata;
//# sourceMappingURL=registerMetadata.js.map