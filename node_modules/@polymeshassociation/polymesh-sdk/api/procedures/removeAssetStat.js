"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeAssetStat = exports.getAuthorization = exports.prepareRemoveAssetStat = void 0;
const internal_1 = require("../../internal");
const types_1 = require("../../types");
const conversion_1 = require("../../utils/conversion");
const internal_2 = require("../../utils/internal");
/**
 * @hidden
 */
function prepareRemoveAssetStat(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context: { polymeshApi: { tx: { statistics }, query: { statistics: statisticsQuery }, }, }, context, } = this;
        const { ticker, type } = args;
        const tickerKey = (0, conversion_1.stringToTickerKey)(ticker, context);
        const [currentStats, { requirements }] = yield (0, internal_2.requestMulti)(context, [
            [statisticsQuery.activeAssetStats, tickerKey],
            [statisticsQuery.assetTransferCompliances, tickerKey],
        ]);
        let claimIssuer;
        let rawClaimIssuer;
        if (type === types_1.StatType.ScopedCount || type === types_1.StatType.ScopedBalance) {
            claimIssuer = { issuer: args.issuer, claimType: args.claimType };
            rawClaimIssuer = (0, conversion_1.claimIssuerToMeshClaimIssuer)(claimIssuer, context);
        }
        requirements.forEach(r => {
            const used = (0, internal_2.compareTransferRestrictionToStat)(r, type, claimIssuer);
            if (used) {
                throw new internal_1.PolymeshError({
                    code: types_1.ErrorCode.UnmetPrerequisite,
                    message: 'The statistic cannot be removed because a Transfer Restriction is currently using it',
                });
            }
        });
        const op = (0, conversion_1.statTypeToStatOpType)(type, context);
        const removeTarget = (0, conversion_1.statisticsOpTypeToStatType)({ op, claimIssuer: rawClaimIssuer }, context);
        const statsArr = [...currentStats];
        const removeIndex = statsArr.findIndex(s => removeTarget.eq(s));
        if (removeIndex >= 0) {
            statsArr.splice(removeIndex, 1);
        }
        else {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.UnmetPrerequisite,
                message: 'Cannot remove a stat that is not enabled for this Asset',
            });
        }
        const newStats = (0, conversion_1.statisticStatTypesToBtreeStatType)(statsArr, context);
        return {
            transaction: statistics.setActiveAssetStats,
            args: [tickerKey, newStats],
            resolver: undefined,
        };
    });
}
exports.prepareRemoveAssetStat = prepareRemoveAssetStat;
/**
 * @hidden
 */
function getAuthorization({ ticker }) {
    const transactions = [types_1.TxTags.statistics.SetActiveAssetStats];
    const asset = new internal_1.FungibleAsset({ ticker }, this.context);
    return {
        permissions: {
            transactions,
            assets: [asset],
            portfolios: [],
        },
    };
}
exports.getAuthorization = getAuthorization;
/**
 * @hidden
 */
const removeAssetStat = () => new internal_1.Procedure(prepareRemoveAssetStat, getAuthorization);
exports.removeAssetStat = removeAssetStat;
//# sourceMappingURL=removeAssetStat.js.map