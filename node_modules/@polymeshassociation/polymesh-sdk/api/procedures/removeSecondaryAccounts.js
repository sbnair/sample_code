"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeSecondaryAccounts = exports.prepareRemoveSecondaryAccounts = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const utils_1 = require("./utils");
const internal_1 = require("../../internal");
const types_1 = require("../../types");
const conversion_1 = require("../../utils/conversion");
const internal_2 = require("../../utils/internal");
/**
 * @hidden
 */
function prepareRemoveSecondaryAccounts(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context: { polymeshApi: { tx }, }, context, } = this;
        const { accounts } = args;
        const identity = yield context.getSigningIdentity();
        const [{ account: primaryAccount }, secondaryAccounts] = yield Promise.all([
            identity.getPrimaryAccount(),
            (0, internal_2.getSecondaryAccountPermissions)({ accounts, identity }, context),
        ]);
        const isPrimaryAccountPresent = accounts.find(account => account.isEqual(primaryAccount));
        if (isPrimaryAccountPresent) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.UnmetPrerequisite,
                message: 'You cannot remove the primary Account',
            });
        }
        (0, utils_1.assertSecondaryAccounts)(accounts, secondaryAccounts);
        return {
            transaction: tx.identity.removeSecondaryKeys,
            feeMultiplier: new bignumber_js_1.default(accounts.length),
            args: [accounts.map(({ address }) => (0, conversion_1.stringToAccountId)(address, context))],
            resolver: undefined,
        };
    });
}
exports.prepareRemoveSecondaryAccounts = prepareRemoveSecondaryAccounts;
/**
 * @hidden
 */
const removeSecondaryAccounts = () => new internal_1.Procedure(prepareRemoveSecondaryAccounts, {
    permissions: {
        transactions: [types_1.TxTags.identity.RemoveSecondaryKeys],
        assets: [],
        portfolios: [],
    },
});
exports.removeSecondaryAccounts = removeSecondaryAccounts;
//# sourceMappingURL=removeSecondaryAccounts.js.map