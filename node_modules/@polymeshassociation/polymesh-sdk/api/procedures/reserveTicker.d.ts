import { ISubmittableResult } from '@polkadot/types/types';
import { Context, Procedure, TickerReservation } from "../../internal";
import { ReserveTickerParams } from "../../types";
import { ExtrinsicParams, ProcedureAuthorization, TransactionSpec } from "../../types/internal";
/**
 * @hidden
 * NOTE: this might seem redundant but it's done in case some mutation is done on the ticker on chain (e.g. upper case or truncating)
 */
export declare const createTickerReservationResolver: (context: Context) => (receipt: ISubmittableResult) => TickerReservation;
/**
 * @hidden
 */
export declare function prepareReserveTicker(this: Procedure<ReserveTickerParams, TickerReservation>, args: ReserveTickerParams): Promise<TransactionSpec<TickerReservation, ExtrinsicParams<'asset', 'registerTicker'>>>;
/**
 * @hidden
 * If extending a reservation, the user must be the ticker owner
 */
export declare function getAuthorization({ ticker, extendPeriod, }: ReserveTickerParams): ProcedureAuthorization;
/**
 * @hidden
 */
export declare const reserveTicker: () => Procedure<ReserveTickerParams, TickerReservation>;
//# sourceMappingURL=reserveTicker.d.ts.map