import { u32 } from '@polkadot/types';
import { Procedure } from "../../internal";
import { AssetDocument, SetAssetDocumentsParams } from "../../types";
import { BatchTransactionSpec, ProcedureAuthorization } from "../../types/internal";
export interface Storage {
    currentDocIds: u32[];
    currentDocs: AssetDocument[];
}
/**
 * @hidden
 */
export declare type Params = SetAssetDocumentsParams & {
    ticker: string;
};
/**
 * @hidden
 */
export declare function prepareSetAssetDocuments(this: Procedure<Params, void, Storage>, args: Params): Promise<BatchTransactionSpec<void, unknown[][]>>;
/**
 * @hidden
 */
export declare function getAuthorization(this: Procedure<Params, void, Storage>, { ticker, documents }: Params): ProcedureAuthorization;
/**
 * @hidden
 */
export declare function prepareStorage(this: Procedure<Params, void, Storage>, { ticker }: Params): Promise<Storage>;
/**
 * @hidden
 */
export declare const setAssetDocuments: () => Procedure<Params, void, Storage>;
//# sourceMappingURL=setAssetDocuments.d.ts.map