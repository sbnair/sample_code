"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setAssetDocuments = exports.prepareStorage = exports.getAuthorization = exports.prepareSetAssetDocuments = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const internal_1 = require("../../internal");
const types_1 = require("../../types");
const conversion_1 = require("../../utils/conversion");
const internal_2 = require("../../utils/internal");
/**
 * @hidden
 */
function prepareSetAssetDocuments(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context: { polymeshApi: { tx }, }, context, storage: { currentDocIds, currentDocs }, } = this;
        const { ticker, documents } = args;
        if ((0, internal_2.hasSameElements)(currentDocs, documents)) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.NoDataChange,
                message: 'The supplied document list is equal to the current one',
            });
        }
        const rawDocuments = documents.map(doc => (0, conversion_1.assetDocumentToDocument)(doc, context));
        const rawTicker = (0, conversion_1.stringToTicker)(ticker, context);
        const transactions = [];
        if (currentDocIds.length) {
            transactions.push((0, internal_2.checkTxType)({
                transaction: tx.asset.removeDocuments,
                feeMultiplier: new bignumber_js_1.default(currentDocIds.length),
                args: [currentDocIds, rawTicker],
            }));
        }
        if (rawDocuments.length) {
            transactions.push((0, internal_2.checkTxType)({
                transaction: tx.asset.addDocuments,
                feeMultiplier: new bignumber_js_1.default(rawDocuments.length),
                args: [rawDocuments, rawTicker],
            }));
        }
        return { transactions, resolver: undefined };
    });
}
exports.prepareSetAssetDocuments = prepareSetAssetDocuments;
/**
 * @hidden
 */
function getAuthorization({ ticker, documents }) {
    const { storage: { currentDocIds }, } = this;
    const transactions = [];
    if (documents.length) {
        transactions.push(types_1.TxTags.asset.AddDocuments);
    }
    if (currentDocIds.length) {
        transactions.push(types_1.TxTags.asset.RemoveDocuments);
    }
    return {
        permissions: {
            assets: [new internal_1.FungibleAsset({ ticker }, this.context)],
            transactions,
            portfolios: [],
        },
    };
}
exports.getAuthorization = getAuthorization;
/**
 * @hidden
 */
function prepareStorage({ ticker }) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context: { polymeshApi: { query }, }, context, } = this;
        const currentDocEntries = yield query.asset.assetDocuments.entries((0, conversion_1.stringToTicker)(ticker, context));
        const currentDocIds = [];
        const currentDocs = [];
        currentDocEntries.forEach(([key, doc]) => {
            const [, id] = key.args;
            if (doc.isSome) {
                currentDocIds.push(id);
                currentDocs.push((0, conversion_1.documentToAssetDocument)(doc.unwrap()));
            }
        });
        return {
            currentDocIds,
            currentDocs,
        };
    });
}
exports.prepareStorage = prepareStorage;
/**
 * @hidden
 */
const setAssetDocuments = () => new internal_1.Procedure(prepareSetAssetDocuments, getAuthorization, prepareStorage);
exports.setAssetDocuments = setAssetDocuments;
//# sourceMappingURL=setAssetDocuments.js.map