"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setMetadata = exports.getAuthorization = exports.prepareSetMetadata = void 0;
const internal_1 = require("../../internal");
const types_1 = require("../../types");
const conversion_1 = require("../../utils/conversion");
const internal_2 = require("../../utils/internal");
/**
 * @hidden
 */
function prepareSetMetadata(params) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context: { polymeshApi: { tx }, }, context, } = this;
        const { metadataEntry: { id, type, asset: { ticker }, }, metadataEntry } = params, rest = __rest(params, ["metadataEntry", "metadataEntry"]);
        const rawTicker = (0, conversion_1.stringToTicker)(ticker, context);
        const rawMetadataKey = (0, conversion_1.metadataToMeshMetadataKey)(type, id, context);
        const currentValue = yield metadataEntry.value();
        if (currentValue) {
            const { lockStatus } = currentValue;
            if (lockStatus === types_1.MetadataLockStatus.Locked) {
                throw new internal_1.PolymeshError({
                    code: types_1.ErrorCode.UnmetPrerequisite,
                    message: 'You cannot set details of a locked Metadata',
                });
            }
            if (lockStatus === types_1.MetadataLockStatus.LockedUntil) {
                const { lockedUntil } = currentValue;
                if (new Date() < lockedUntil) {
                    throw new internal_1.PolymeshError({
                        code: types_1.ErrorCode.UnmetPrerequisite,
                        message: 'Metadata is currently locked',
                        data: {
                            lockedUntil,
                        },
                    });
                }
            }
        }
        else {
            if (!('value' in rest)) {
                throw new internal_1.PolymeshError({
                    code: types_1.ErrorCode.ValidationError,
                    message: 'Metadata value details cannot be set for a metadata with no value',
                });
            }
        }
        let transaction;
        let args;
        if ('value' in rest) {
            const { value, details } = rest;
            transaction = tx.asset.setAssetMetadata;
            args = [
                (0, conversion_1.metadataValueToMeshMetadataValue)(value, context),
                (0, internal_2.optionize)(conversion_1.metadataValueDetailToMeshMetadataValueDetail)(details, context),
            ];
        }
        else {
            const { details } = rest;
            transaction = tx.asset.setAssetMetadataDetails;
            args = [(0, conversion_1.metadataValueDetailToMeshMetadataValueDetail)(details, context)];
        }
        return {
            transaction,
            args: [rawTicker, rawMetadataKey, ...args],
            resolver: new internal_1.MetadataEntry({ id, type, ticker }, context),
        };
    });
}
exports.prepareSetMetadata = prepareSetMetadata;
/**
 * @hidden
 */
function getAuthorization(params) {
    const { context } = this;
    const { metadataEntry: { asset: { ticker }, }, } = params;
    const transactions = [];
    if ('value' in params) {
        transactions.push(types_1.TxTags.asset.SetAssetMetadata);
    }
    else {
        transactions.push(types_1.TxTags.asset.SetAssetMetadataDetails);
    }
    return {
        permissions: {
            transactions,
            assets: [new internal_1.FungibleAsset({ ticker }, context)],
            portfolios: [],
        },
    };
}
exports.getAuthorization = getAuthorization;
/**
 * @hidden
 */
const setMetadata = () => new internal_1.Procedure(prepareSetMetadata, getAuthorization);
exports.setMetadata = setMetadata;
//# sourceMappingURL=setMetadata.js.map