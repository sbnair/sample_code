import { BaseAsset, CustomPermissionGroup, KnownPermissionGroup, Procedure } from "../../internal";
import { Identity, SetPermissionGroupParams } from "../../types";
import { ExtrinsicParams, ProcedureAuthorization, TransactionSpec } from "../../types/internal";
/**
 * @hidden
 */
export declare type Params = SetPermissionGroupParams & {
    identity: Identity;
};
/**
 * @hidden
 */
export interface Storage {
    asset: BaseAsset;
}
/**
 * @hidden
 */
export declare function prepareSetPermissionGroup(this: Procedure<Params, CustomPermissionGroup | KnownPermissionGroup, Storage>, args: Params): Promise<TransactionSpec<CustomPermissionGroup | KnownPermissionGroup, ExtrinsicParams<'externalAgents', 'createAndChangeCustomGroup'>> | TransactionSpec<KnownPermissionGroup | CustomPermissionGroup, ExtrinsicParams<'externalAgents', 'changeGroup'>>>;
/**
 * @hidden
 */
export declare function getAuthorization(this: Procedure<Params, CustomPermissionGroup | KnownPermissionGroup, Storage>): ProcedureAuthorization;
/**
 * @hidden
 */
export declare function prepareStorage(this: Procedure<Params, CustomPermissionGroup | KnownPermissionGroup, Storage>, { group: { asset } }: Params): Storage;
/**
 * @hidden
 */
export declare const setPermissionGroup: () => Procedure<Params, CustomPermissionGroup | KnownPermissionGroup, Storage>;
//# sourceMappingURL=setPermissionGroup.d.ts.map