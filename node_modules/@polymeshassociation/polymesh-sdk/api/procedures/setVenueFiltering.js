"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setVenueFiltering = exports.getAuthorization = exports.prepareVenueFiltering = void 0;
const internal_1 = require("../../internal");
const types_1 = require("../../types");
const conversion_1 = require("../../utils/conversion");
const internal_2 = require("../../utils/internal");
/**
 * @hidden
 */
function prepareVenueFiltering(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context: { polymeshApi: { tx, query }, }, context, } = this;
        const { ticker, enabled, allowedVenues, disallowedVenues } = args;
        const rawTicker = (0, conversion_1.stringToTicker)(ticker, context);
        const transactions = [];
        const isEnabled = yield query.settlement.venueFiltering(rawTicker);
        if (enabled !== undefined && isEnabled.valueOf() !== enabled) {
            transactions.push((0, internal_2.checkTxType)({
                transaction: tx.settlement.setVenueFiltering,
                args: [rawTicker, (0, conversion_1.booleanToBool)(enabled, context)],
            }));
        }
        if (allowedVenues === null || allowedVenues === void 0 ? void 0 : allowedVenues.length) {
            transactions.push((0, internal_2.checkTxType)({
                transaction: tx.settlement.allowVenues,
                args: [rawTicker, allowedVenues.map(venue => (0, conversion_1.bigNumberToU64)(venue, context))],
            }));
        }
        if (disallowedVenues === null || disallowedVenues === void 0 ? void 0 : disallowedVenues.length) {
            transactions.push((0, internal_2.checkTxType)({
                transaction: tx.settlement.disallowVenues,
                args: [rawTicker, disallowedVenues.map(venue => (0, conversion_1.bigNumberToU64)(venue, context))],
            }));
        }
        return { transactions, resolver: undefined };
    });
}
exports.prepareVenueFiltering = prepareVenueFiltering;
/**
 * @hidden
 */
function getAuthorization({ ticker, enabled, disallowedVenues, allowedVenues }) {
    const { context } = this;
    const transactions = [];
    if (enabled !== undefined) {
        transactions.push(types_1.TxTags.settlement.SetVenueFiltering);
    }
    if (allowedVenues === null || allowedVenues === void 0 ? void 0 : allowedVenues.length) {
        transactions.push(types_1.TxTags.settlement.AllowVenues);
    }
    if (disallowedVenues === null || disallowedVenues === void 0 ? void 0 : disallowedVenues.length) {
        transactions.push(types_1.TxTags.settlement.DisallowVenues);
    }
    return {
        permissions: {
            transactions,
            assets: [new internal_1.FungibleAsset({ ticker }, context)],
        },
    };
}
exports.getAuthorization = getAuthorization;
/**
 * @hidden
 */
const setVenueFiltering = () => new internal_1.Procedure(prepareVenueFiltering, getAuthorization);
exports.setVenueFiltering = setVenueFiltering;
//# sourceMappingURL=setVenueFiltering.js.map