"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.toggleFreezeSecondaryAccounts = exports.getAuthorization = exports.prepareToggleFreezeSecondaryAccounts = void 0;
const internal_1 = require("../../internal");
const types_1 = require("../../types");
/**
 * @hidden
 */
function prepareToggleFreezeSecondaryAccounts(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context: { polymeshApi: { tx: { identity: identityTx }, }, }, context, } = this;
        const { freeze } = args;
        const identity = yield context.getSigningIdentity();
        const areSecondaryAccountsFrozen = yield identity.areSecondaryAccountsFrozen();
        if (freeze) {
            if (areSecondaryAccountsFrozen) {
                throw new internal_1.PolymeshError({
                    code: types_1.ErrorCode.NoDataChange,
                    message: 'The secondary Accounts are already frozen',
                });
            }
            return { transaction: identityTx.freezeSecondaryKeys, resolver: undefined };
        }
        if (!areSecondaryAccountsFrozen) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.NoDataChange,
                message: 'The secondary Accounts are already unfrozen',
            });
        }
        return { transaction: identityTx.unfreezeSecondaryKeys, resolver: undefined };
    });
}
exports.prepareToggleFreezeSecondaryAccounts = prepareToggleFreezeSecondaryAccounts;
/**
 * @hidden
 */
function getAuthorization({ freeze }) {
    return {
        permissions: {
            transactions: [
                freeze ? types_1.TxTags.identity.FreezeSecondaryKeys : types_1.TxTags.identity.UnfreezeSecondaryKeys,
            ],
            assets: [],
            portfolios: [],
        },
    };
}
exports.getAuthorization = getAuthorization;
/**
 * @hidden
 */
const toggleFreezeSecondaryAccounts = () => new internal_1.Procedure(prepareToggleFreezeSecondaryAccounts, getAuthorization);
exports.toggleFreezeSecondaryAccounts = toggleFreezeSecondaryAccounts;
//# sourceMappingURL=toggleFreezeSecondaryAccounts.js.map