"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.unlinkChildIdentity = exports.prepareStorage = exports.getAuthorization = exports.prepareUnlinkChildIdentity = void 0;
const internal_1 = require("../../internal");
const types_1 = require("../../types");
const conversion_1 = require("../../utils/conversion");
const internal_2 = require("../../utils/internal");
/**
 * @hidden
 */
function prepareUnlinkChildIdentity(args) {
    return __awaiter(this, void 0, void 0, function* () {
        const { context: { polymeshApi: { tx }, }, context, storage: { identity: { did: signingDid }, }, } = this;
        const { child } = args;
        const childIdentity = (0, internal_2.asChildIdentity)(child, context);
        const parentIdentity = yield childIdentity.getParentDid();
        if (!parentIdentity) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.UnmetPrerequisite,
                message: "The `child` doesn't have a parent identity",
            });
        }
        const { did: parentDid } = parentIdentity;
        const { did: childDid } = childIdentity;
        if (![parentDid, childDid].includes(signingDid)) {
            throw new internal_1.PolymeshError({
                code: types_1.ErrorCode.UnmetPrerequisite,
                message: 'Only the parent or the child identity is authorized to unlink a child identity',
            });
        }
        return {
            transaction: tx.identity.unlinkChildIdentity,
            args: [(0, conversion_1.stringToIdentityId)(childDid, context)],
            resolver: undefined,
        };
    });
}
exports.prepareUnlinkChildIdentity = prepareUnlinkChildIdentity;
/**
 * @hidden
 */
function getAuthorization() {
    return __awaiter(this, void 0, void 0, function* () {
        const { context, storage: { identity }, } = this;
        const signingAccount = context.getSigningAccount();
        const { account: primaryAccount } = yield identity.getPrimaryAccount();
        if (!signingAccount.isEqual(primaryAccount)) {
            return {
                signerPermissions: 'Child identity can only be unlinked by primary key of either the child Identity or parent Identity',
            };
        }
        return {
            permissions: {
                transactions: [types_1.TxTags.identity.UnlinkChildIdentity],
                assets: [],
                portfolios: [],
            },
        };
    });
}
exports.getAuthorization = getAuthorization;
/**
 * @hidden
 */
function prepareStorage() {
    return __awaiter(this, void 0, void 0, function* () {
        const { context } = this;
        return {
            identity: yield context.getSigningIdentity(),
        };
    });
}
exports.prepareStorage = prepareStorage;
/**
 * @hidden
 */
const unlinkChildIdentity = () => new internal_1.Procedure(prepareUnlinkChildIdentity, getAuthorization, prepareStorage);
exports.unlinkChildIdentity = unlinkChildIdentity;
//# sourceMappingURL=unlinkChildIdentity.js.map