import { BaseAsset, Identity, Procedure } from "../../internal";
import { WaivePermissionsParams } from "../../types";
import { ExtrinsicParams, ProcedureAuthorization, TransactionSpec } from "../../types/internal";
/**
 * @hidden
 */
export declare type Params = WaivePermissionsParams & {
    identity: Identity;
};
/**
 * @hidden
 */
export interface Storage {
    asset: BaseAsset;
}
/**
 * @hidden
 */
export declare function prepareWaivePermissions(this: Procedure<Params, void, Storage>, args: Params): Promise<TransactionSpec<void, ExtrinsicParams<'externalAgents', 'abdicate'>>>;
/**
 * @hidden
 */
export declare function getAuthorization(this: Procedure<Params, void, Storage>, { identity: { did } }: Params): ProcedureAuthorization;
/**
 * @hidden
 */
export declare function prepareStorage(this: Procedure<Params, void, Storage>, { asset }: Params): Storage;
/**
 * @hidden
 */
export declare const waivePermissions: () => Procedure<Params, void, Storage>;
//# sourceMappingURL=waivePermissions.d.ts.map