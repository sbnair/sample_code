import { SubmittableExtrinsic } from '@polkadot/api/types';
import { ISubmittableResult } from '@polkadot/types/types';
import BigNumber from 'bignumber.js';
import { Context, PolymeshTransactionBase } from "../internal";
import { TxTag } from "../types";
import { TransactionConstructionData, TransactionSpec } from "../types/internal";
/**
 * Wrapper class for a Polymesh Transaction
 */
export declare class PolymeshTransaction<ReturnValue, TransformedReturnValue = ReturnValue, Args extends unknown[] | [] = unknown[]> extends PolymeshTransactionBase<ReturnValue, TransformedReturnValue> {
    /**
     * @hidden
     */
    static toTransactionSpec<R, T, A extends unknown[] | [] = unknown[]>(inputTransaction: PolymeshTransaction<R, T, A>): TransactionSpec<R, A, T>;
    /**
     * arguments for the transaction in SCALE format (polkadot.js Codec)
     */
    args: Args;
    /**
     * type of transaction represented by this instance (mostly for display purposes)
     */
    tag: TxTag;
    /**
     * @hidden
     *
     * underlying transaction to be executed
     */
    private transaction;
    /**
     * @hidden
     *
     * amount by which the protocol fees are multiplied. The total fees of some transactions depend on the size of the input.
     *   For example, when adding documents to an Asset, the fees are proportional to the amount of documents being added
     *
     * @note defaults to 1
     */
    protected feeMultiplier?: BigNumber;
    /**
     * @hidden
     *
     * used by procedures to set the protocol fee manually in case the protocol op can't be
     *   dynamically generated from the transaction name, or a specific procedure has
     *   special rules for calculating them
     */
    private protocolFee?;
    /**
     * @hidden
     */
    constructor(transactionSpec: TransactionSpec<ReturnValue, Args, TransformedReturnValue> & TransactionConstructionData, context: Context);
    protected composeTx(): SubmittableExtrinsic<'promise', ISubmittableResult>;
    getProtocolFees(): Promise<BigNumber>;
    protected ignoresSubsidy(): boolean;
    supportsSubsidy(): boolean;
}
//# sourceMappingURL=PolymeshTransaction.d.ts.map