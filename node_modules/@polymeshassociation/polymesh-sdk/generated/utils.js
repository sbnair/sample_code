"use strict";
/* istanbul ignore file */
Object.defineProperty(exports, "__esModule", { value: true });
exports.meshCountryCodeToCountryCode = exports.countryCodeToMeshCountryCode = void 0;
const types_1 = require("../types");
/**
 * @hidden
 */
function countryCodeToMeshCountryCode(countryCode, context) {
    return context.createType('PolymeshPrimitivesJurisdictionCountryCode', countryCode);
}
exports.countryCodeToMeshCountryCode = countryCodeToMeshCountryCode;
/**
 * @hidden
 */
function meshCountryCodeToCountryCode(meshCountryCode) {
    if (meshCountryCode.isAf) {
        return types_1.CountryCode.Af;
    }
    if (meshCountryCode.isAx) {
        return types_1.CountryCode.Ax;
    }
    if (meshCountryCode.isAl) {
        return types_1.CountryCode.Al;
    }
    if (meshCountryCode.isDz) {
        return types_1.CountryCode.Dz;
    }
    if (meshCountryCode.isAs) {
        return types_1.CountryCode.As;
    }
    if (meshCountryCode.isAd) {
        return types_1.CountryCode.Ad;
    }
    if (meshCountryCode.isAo) {
        return types_1.CountryCode.Ao;
    }
    if (meshCountryCode.isAi) {
        return types_1.CountryCode.Ai;
    }
    if (meshCountryCode.isAq) {
        return types_1.CountryCode.Aq;
    }
    if (meshCountryCode.isAg) {
        return types_1.CountryCode.Ag;
    }
    if (meshCountryCode.isAr) {
        return types_1.CountryCode.Ar;
    }
    if (meshCountryCode.isAm) {
        return types_1.CountryCode.Am;
    }
    if (meshCountryCode.isAw) {
        return types_1.CountryCode.Aw;
    }
    if (meshCountryCode.isAu) {
        return types_1.CountryCode.Au;
    }
    if (meshCountryCode.isAt) {
        return types_1.CountryCode.At;
    }
    if (meshCountryCode.isAz) {
        return types_1.CountryCode.Az;
    }
    if (meshCountryCode.isBs) {
        return types_1.CountryCode.Bs;
    }
    if (meshCountryCode.isBh) {
        return types_1.CountryCode.Bh;
    }
    if (meshCountryCode.isBd) {
        return types_1.CountryCode.Bd;
    }
    if (meshCountryCode.isBb) {
        return types_1.CountryCode.Bb;
    }
    if (meshCountryCode.isBy) {
        return types_1.CountryCode.By;
    }
    if (meshCountryCode.isBe) {
        return types_1.CountryCode.Be;
    }
    if (meshCountryCode.isBz) {
        return types_1.CountryCode.Bz;
    }
    if (meshCountryCode.isBj) {
        return types_1.CountryCode.Bj;
    }
    if (meshCountryCode.isBm) {
        return types_1.CountryCode.Bm;
    }
    if (meshCountryCode.isBt) {
        return types_1.CountryCode.Bt;
    }
    if (meshCountryCode.isBo) {
        return types_1.CountryCode.Bo;
    }
    if (meshCountryCode.isBa) {
        return types_1.CountryCode.Ba;
    }
    if (meshCountryCode.isBw) {
        return types_1.CountryCode.Bw;
    }
    if (meshCountryCode.isBv) {
        return types_1.CountryCode.Bv;
    }
    if (meshCountryCode.isBr) {
        return types_1.CountryCode.Br;
    }
    if (meshCountryCode.isVg) {
        return types_1.CountryCode.Vg;
    }
    if (meshCountryCode.isIo) {
        return types_1.CountryCode.Io;
    }
    if (meshCountryCode.isBn) {
        return types_1.CountryCode.Bn;
    }
    if (meshCountryCode.isBg) {
        return types_1.CountryCode.Bg;
    }
    if (meshCountryCode.isBf) {
        return types_1.CountryCode.Bf;
    }
    if (meshCountryCode.isBi) {
        return types_1.CountryCode.Bi;
    }
    if (meshCountryCode.isKh) {
        return types_1.CountryCode.Kh;
    }
    if (meshCountryCode.isCm) {
        return types_1.CountryCode.Cm;
    }
    if (meshCountryCode.isCa) {
        return types_1.CountryCode.Ca;
    }
    if (meshCountryCode.isCv) {
        return types_1.CountryCode.Cv;
    }
    if (meshCountryCode.isKy) {
        return types_1.CountryCode.Ky;
    }
    if (meshCountryCode.isCf) {
        return types_1.CountryCode.Cf;
    }
    if (meshCountryCode.isTd) {
        return types_1.CountryCode.Td;
    }
    if (meshCountryCode.isCl) {
        return types_1.CountryCode.Cl;
    }
    if (meshCountryCode.isCn) {
        return types_1.CountryCode.Cn;
    }
    if (meshCountryCode.isHk) {
        return types_1.CountryCode.Hk;
    }
    if (meshCountryCode.isMo) {
        return types_1.CountryCode.Mo;
    }
    if (meshCountryCode.isCx) {
        return types_1.CountryCode.Cx;
    }
    if (meshCountryCode.isCc) {
        return types_1.CountryCode.Cc;
    }
    if (meshCountryCode.isCo) {
        return types_1.CountryCode.Co;
    }
    if (meshCountryCode.isKm) {
        return types_1.CountryCode.Km;
    }
    if (meshCountryCode.isCg) {
        return types_1.CountryCode.Cg;
    }
    if (meshCountryCode.isCd) {
        return types_1.CountryCode.Cd;
    }
    if (meshCountryCode.isCk) {
        return types_1.CountryCode.Ck;
    }
    if (meshCountryCode.isCr) {
        return types_1.CountryCode.Cr;
    }
    if (meshCountryCode.isCi) {
        return types_1.CountryCode.Ci;
    }
    if (meshCountryCode.isHr) {
        return types_1.CountryCode.Hr;
    }
    if (meshCountryCode.isCu) {
        return types_1.CountryCode.Cu;
    }
    if (meshCountryCode.isCy) {
        return types_1.CountryCode.Cy;
    }
    if (meshCountryCode.isCz) {
        return types_1.CountryCode.Cz;
    }
    if (meshCountryCode.isDk) {
        return types_1.CountryCode.Dk;
    }
    if (meshCountryCode.isDj) {
        return types_1.CountryCode.Dj;
    }
    if (meshCountryCode.isDm) {
        return types_1.CountryCode.Dm;
    }
    if (meshCountryCode.isDo) {
        return types_1.CountryCode.Do;
    }
    if (meshCountryCode.isEc) {
        return types_1.CountryCode.Ec;
    }
    if (meshCountryCode.isEg) {
        return types_1.CountryCode.Eg;
    }
    if (meshCountryCode.isSv) {
        return types_1.CountryCode.Sv;
    }
    if (meshCountryCode.isGq) {
        return types_1.CountryCode.Gq;
    }
    if (meshCountryCode.isEr) {
        return types_1.CountryCode.Er;
    }
    if (meshCountryCode.isEe) {
        return types_1.CountryCode.Ee;
    }
    if (meshCountryCode.isEt) {
        return types_1.CountryCode.Et;
    }
    if (meshCountryCode.isFk) {
        return types_1.CountryCode.Fk;
    }
    if (meshCountryCode.isFo) {
        return types_1.CountryCode.Fo;
    }
    if (meshCountryCode.isFj) {
        return types_1.CountryCode.Fj;
    }
    if (meshCountryCode.isFi) {
        return types_1.CountryCode.Fi;
    }
    if (meshCountryCode.isFr) {
        return types_1.CountryCode.Fr;
    }
    if (meshCountryCode.isGf) {
        return types_1.CountryCode.Gf;
    }
    if (meshCountryCode.isPf) {
        return types_1.CountryCode.Pf;
    }
    if (meshCountryCode.isTf) {
        return types_1.CountryCode.Tf;
    }
    if (meshCountryCode.isGa) {
        return types_1.CountryCode.Ga;
    }
    if (meshCountryCode.isGm) {
        return types_1.CountryCode.Gm;
    }
    if (meshCountryCode.isGe) {
        return types_1.CountryCode.Ge;
    }
    if (meshCountryCode.isDe) {
        return types_1.CountryCode.De;
    }
    if (meshCountryCode.isGh) {
        return types_1.CountryCode.Gh;
    }
    if (meshCountryCode.isGi) {
        return types_1.CountryCode.Gi;
    }
    if (meshCountryCode.isGr) {
        return types_1.CountryCode.Gr;
    }
    if (meshCountryCode.isGl) {
        return types_1.CountryCode.Gl;
    }
    if (meshCountryCode.isGd) {
        return types_1.CountryCode.Gd;
    }
    if (meshCountryCode.isGp) {
        return types_1.CountryCode.Gp;
    }
    if (meshCountryCode.isGu) {
        return types_1.CountryCode.Gu;
    }
    if (meshCountryCode.isGt) {
        return types_1.CountryCode.Gt;
    }
    if (meshCountryCode.isGg) {
        return types_1.CountryCode.Gg;
    }
    if (meshCountryCode.isGn) {
        return types_1.CountryCode.Gn;
    }
    if (meshCountryCode.isGw) {
        return types_1.CountryCode.Gw;
    }
    if (meshCountryCode.isGy) {
        return types_1.CountryCode.Gy;
    }
    if (meshCountryCode.isHt) {
        return types_1.CountryCode.Ht;
    }
    if (meshCountryCode.isHm) {
        return types_1.CountryCode.Hm;
    }
    if (meshCountryCode.isVa) {
        return types_1.CountryCode.Va;
    }
    if (meshCountryCode.isHn) {
        return types_1.CountryCode.Hn;
    }
    if (meshCountryCode.isHu) {
        return types_1.CountryCode.Hu;
    }
    if (meshCountryCode.isIs) {
        return types_1.CountryCode.Is;
    }
    if (meshCountryCode.isIn) {
        return types_1.CountryCode.In;
    }
    if (meshCountryCode.isId) {
        return types_1.CountryCode.Id;
    }
    if (meshCountryCode.isIr) {
        return types_1.CountryCode.Ir;
    }
    if (meshCountryCode.isIq) {
        return types_1.CountryCode.Iq;
    }
    if (meshCountryCode.isIe) {
        return types_1.CountryCode.Ie;
    }
    if (meshCountryCode.isIm) {
        return types_1.CountryCode.Im;
    }
    if (meshCountryCode.isIl) {
        return types_1.CountryCode.Il;
    }
    if (meshCountryCode.isIt) {
        return types_1.CountryCode.It;
    }
    if (meshCountryCode.isJm) {
        return types_1.CountryCode.Jm;
    }
    if (meshCountryCode.isJp) {
        return types_1.CountryCode.Jp;
    }
    if (meshCountryCode.isJe) {
        return types_1.CountryCode.Je;
    }
    if (meshCountryCode.isJo) {
        return types_1.CountryCode.Jo;
    }
    if (meshCountryCode.isKz) {
        return types_1.CountryCode.Kz;
    }
    if (meshCountryCode.isKe) {
        return types_1.CountryCode.Ke;
    }
    if (meshCountryCode.isKi) {
        return types_1.CountryCode.Ki;
    }
    if (meshCountryCode.isKp) {
        return types_1.CountryCode.Kp;
    }
    if (meshCountryCode.isKr) {
        return types_1.CountryCode.Kr;
    }
    if (meshCountryCode.isKw) {
        return types_1.CountryCode.Kw;
    }
    if (meshCountryCode.isKg) {
        return types_1.CountryCode.Kg;
    }
    if (meshCountryCode.isLa) {
        return types_1.CountryCode.La;
    }
    if (meshCountryCode.isLv) {
        return types_1.CountryCode.Lv;
    }
    if (meshCountryCode.isLb) {
        return types_1.CountryCode.Lb;
    }
    if (meshCountryCode.isLs) {
        return types_1.CountryCode.Ls;
    }
    if (meshCountryCode.isLr) {
        return types_1.CountryCode.Lr;
    }
    if (meshCountryCode.isLy) {
        return types_1.CountryCode.Ly;
    }
    if (meshCountryCode.isLi) {
        return types_1.CountryCode.Li;
    }
    if (meshCountryCode.isLt) {
        return types_1.CountryCode.Lt;
    }
    if (meshCountryCode.isLu) {
        return types_1.CountryCode.Lu;
    }
    if (meshCountryCode.isMk) {
        return types_1.CountryCode.Mk;
    }
    if (meshCountryCode.isMg) {
        return types_1.CountryCode.Mg;
    }
    if (meshCountryCode.isMw) {
        return types_1.CountryCode.Mw;
    }
    if (meshCountryCode.isMy) {
        return types_1.CountryCode.My;
    }
    if (meshCountryCode.isMv) {
        return types_1.CountryCode.Mv;
    }
    if (meshCountryCode.isMl) {
        return types_1.CountryCode.Ml;
    }
    if (meshCountryCode.isMt) {
        return types_1.CountryCode.Mt;
    }
    if (meshCountryCode.isMh) {
        return types_1.CountryCode.Mh;
    }
    if (meshCountryCode.isMq) {
        return types_1.CountryCode.Mq;
    }
    if (meshCountryCode.isMr) {
        return types_1.CountryCode.Mr;
    }
    if (meshCountryCode.isMu) {
        return types_1.CountryCode.Mu;
    }
    if (meshCountryCode.isYt) {
        return types_1.CountryCode.Yt;
    }
    if (meshCountryCode.isMx) {
        return types_1.CountryCode.Mx;
    }
    if (meshCountryCode.isFm) {
        return types_1.CountryCode.Fm;
    }
    if (meshCountryCode.isMd) {
        return types_1.CountryCode.Md;
    }
    if (meshCountryCode.isMc) {
        return types_1.CountryCode.Mc;
    }
    if (meshCountryCode.isMn) {
        return types_1.CountryCode.Mn;
    }
    if (meshCountryCode.isMe) {
        return types_1.CountryCode.Me;
    }
    if (meshCountryCode.isMs) {
        return types_1.CountryCode.Ms;
    }
    if (meshCountryCode.isMa) {
        return types_1.CountryCode.Ma;
    }
    if (meshCountryCode.isMz) {
        return types_1.CountryCode.Mz;
    }
    if (meshCountryCode.isMm) {
        return types_1.CountryCode.Mm;
    }
    if (meshCountryCode.isNa) {
        return types_1.CountryCode.Na;
    }
    if (meshCountryCode.isNr) {
        return types_1.CountryCode.Nr;
    }
    if (meshCountryCode.isNp) {
        return types_1.CountryCode.Np;
    }
    if (meshCountryCode.isNl) {
        return types_1.CountryCode.Nl;
    }
    if (meshCountryCode.isAn) {
        return types_1.CountryCode.An;
    }
    if (meshCountryCode.isNc) {
        return types_1.CountryCode.Nc;
    }
    if (meshCountryCode.isNz) {
        return types_1.CountryCode.Nz;
    }
    if (meshCountryCode.isNi) {
        return types_1.CountryCode.Ni;
    }
    if (meshCountryCode.isNe) {
        return types_1.CountryCode.Ne;
    }
    if (meshCountryCode.isNg) {
        return types_1.CountryCode.Ng;
    }
    if (meshCountryCode.isNu) {
        return types_1.CountryCode.Nu;
    }
    if (meshCountryCode.isNf) {
        return types_1.CountryCode.Nf;
    }
    if (meshCountryCode.isMp) {
        return types_1.CountryCode.Mp;
    }
    if (meshCountryCode.isNo) {
        return types_1.CountryCode.No;
    }
    if (meshCountryCode.isOm) {
        return types_1.CountryCode.Om;
    }
    if (meshCountryCode.isPk) {
        return types_1.CountryCode.Pk;
    }
    if (meshCountryCode.isPw) {
        return types_1.CountryCode.Pw;
    }
    if (meshCountryCode.isPs) {
        return types_1.CountryCode.Ps;
    }
    if (meshCountryCode.isPa) {
        return types_1.CountryCode.Pa;
    }
    if (meshCountryCode.isPg) {
        return types_1.CountryCode.Pg;
    }
    if (meshCountryCode.isPy) {
        return types_1.CountryCode.Py;
    }
    if (meshCountryCode.isPe) {
        return types_1.CountryCode.Pe;
    }
    if (meshCountryCode.isPh) {
        return types_1.CountryCode.Ph;
    }
    if (meshCountryCode.isPn) {
        return types_1.CountryCode.Pn;
    }
    if (meshCountryCode.isPl) {
        return types_1.CountryCode.Pl;
    }
    if (meshCountryCode.isPt) {
        return types_1.CountryCode.Pt;
    }
    if (meshCountryCode.isPr) {
        return types_1.CountryCode.Pr;
    }
    if (meshCountryCode.isQa) {
        return types_1.CountryCode.Qa;
    }
    if (meshCountryCode.isRe) {
        return types_1.CountryCode.Re;
    }
    if (meshCountryCode.isRo) {
        return types_1.CountryCode.Ro;
    }
    if (meshCountryCode.isRu) {
        return types_1.CountryCode.Ru;
    }
    if (meshCountryCode.isRw) {
        return types_1.CountryCode.Rw;
    }
    if (meshCountryCode.isBl) {
        return types_1.CountryCode.Bl;
    }
    if (meshCountryCode.isSh) {
        return types_1.CountryCode.Sh;
    }
    if (meshCountryCode.isKn) {
        return types_1.CountryCode.Kn;
    }
    if (meshCountryCode.isLc) {
        return types_1.CountryCode.Lc;
    }
    if (meshCountryCode.isMf) {
        return types_1.CountryCode.Mf;
    }
    if (meshCountryCode.isPm) {
        return types_1.CountryCode.Pm;
    }
    if (meshCountryCode.isVc) {
        return types_1.CountryCode.Vc;
    }
    if (meshCountryCode.isWs) {
        return types_1.CountryCode.Ws;
    }
    if (meshCountryCode.isSm) {
        return types_1.CountryCode.Sm;
    }
    if (meshCountryCode.isSt) {
        return types_1.CountryCode.St;
    }
    if (meshCountryCode.isSa) {
        return types_1.CountryCode.Sa;
    }
    if (meshCountryCode.isSn) {
        return types_1.CountryCode.Sn;
    }
    if (meshCountryCode.isRs) {
        return types_1.CountryCode.Rs;
    }
    if (meshCountryCode.isSc) {
        return types_1.CountryCode.Sc;
    }
    if (meshCountryCode.isSl) {
        return types_1.CountryCode.Sl;
    }
    if (meshCountryCode.isSg) {
        return types_1.CountryCode.Sg;
    }
    if (meshCountryCode.isSk) {
        return types_1.CountryCode.Sk;
    }
    if (meshCountryCode.isSi) {
        return types_1.CountryCode.Si;
    }
    if (meshCountryCode.isSb) {
        return types_1.CountryCode.Sb;
    }
    if (meshCountryCode.isSo) {
        return types_1.CountryCode.So;
    }
    if (meshCountryCode.isZa) {
        return types_1.CountryCode.Za;
    }
    if (meshCountryCode.isGs) {
        return types_1.CountryCode.Gs;
    }
    if (meshCountryCode.isSs) {
        return types_1.CountryCode.Ss;
    }
    if (meshCountryCode.isEs) {
        return types_1.CountryCode.Es;
    }
    if (meshCountryCode.isLk) {
        return types_1.CountryCode.Lk;
    }
    if (meshCountryCode.isSd) {
        return types_1.CountryCode.Sd;
    }
    if (meshCountryCode.isSr) {
        return types_1.CountryCode.Sr;
    }
    if (meshCountryCode.isSj) {
        return types_1.CountryCode.Sj;
    }
    if (meshCountryCode.isSz) {
        return types_1.CountryCode.Sz;
    }
    if (meshCountryCode.isSe) {
        return types_1.CountryCode.Se;
    }
    if (meshCountryCode.isCh) {
        return types_1.CountryCode.Ch;
    }
    if (meshCountryCode.isSy) {
        return types_1.CountryCode.Sy;
    }
    if (meshCountryCode.isTw) {
        return types_1.CountryCode.Tw;
    }
    if (meshCountryCode.isTj) {
        return types_1.CountryCode.Tj;
    }
    if (meshCountryCode.isTz) {
        return types_1.CountryCode.Tz;
    }
    if (meshCountryCode.isTh) {
        return types_1.CountryCode.Th;
    }
    if (meshCountryCode.isTl) {
        return types_1.CountryCode.Tl;
    }
    if (meshCountryCode.isTg) {
        return types_1.CountryCode.Tg;
    }
    if (meshCountryCode.isTk) {
        return types_1.CountryCode.Tk;
    }
    if (meshCountryCode.isTo) {
        return types_1.CountryCode.To;
    }
    if (meshCountryCode.isTt) {
        return types_1.CountryCode.Tt;
    }
    if (meshCountryCode.isTn) {
        return types_1.CountryCode.Tn;
    }
    if (meshCountryCode.isTr) {
        return types_1.CountryCode.Tr;
    }
    if (meshCountryCode.isTm) {
        return types_1.CountryCode.Tm;
    }
    if (meshCountryCode.isTc) {
        return types_1.CountryCode.Tc;
    }
    if (meshCountryCode.isTv) {
        return types_1.CountryCode.Tv;
    }
    if (meshCountryCode.isUg) {
        return types_1.CountryCode.Ug;
    }
    if (meshCountryCode.isUa) {
        return types_1.CountryCode.Ua;
    }
    if (meshCountryCode.isAe) {
        return types_1.CountryCode.Ae;
    }
    if (meshCountryCode.isGb) {
        return types_1.CountryCode.Gb;
    }
    if (meshCountryCode.isUs) {
        return types_1.CountryCode.Us;
    }
    if (meshCountryCode.isUm) {
        return types_1.CountryCode.Um;
    }
    if (meshCountryCode.isUy) {
        return types_1.CountryCode.Uy;
    }
    if (meshCountryCode.isUz) {
        return types_1.CountryCode.Uz;
    }
    if (meshCountryCode.isVu) {
        return types_1.CountryCode.Vu;
    }
    if (meshCountryCode.isVe) {
        return types_1.CountryCode.Ve;
    }
    if (meshCountryCode.isVn) {
        return types_1.CountryCode.Vn;
    }
    if (meshCountryCode.isVi) {
        return types_1.CountryCode.Vi;
    }
    if (meshCountryCode.isWf) {
        return types_1.CountryCode.Wf;
    }
    if (meshCountryCode.isEh) {
        return types_1.CountryCode.Eh;
    }
    if (meshCountryCode.isYe) {
        return types_1.CountryCode.Ye;
    }
    if (meshCountryCode.isZm) {
        return types_1.CountryCode.Zm;
    }
    if (meshCountryCode.isZw) {
        return types_1.CountryCode.Zw;
    }
    if (meshCountryCode.isBq) {
        return types_1.CountryCode.Bq;
    }
    if (meshCountryCode.isCw) {
        return types_1.CountryCode.Cw;
    }
    return types_1.CountryCode.Sx;
}
exports.meshCountryCodeToCountryCode = meshCountryCodeToCountryCode;
//# sourceMappingURL=utils.js.map