import { QueryOptions } from '@apollo/client/core';
import BigNumber from 'bignumber.js';
import { ClaimTypeEnum } from "./enums";
import { Asset, AssetHolder, AssetHoldersOrderBy, AssetTransaction, Authorization, ClaimsGroupBy, ClaimsOrderBy, Distribution, DistributionPayment, Event, Extrinsic, ExtrinsicsOrderBy, Instruction, Investment, Leg, Portfolio, PortfolioMovement, TickerExternalAgent, TickerExternalAgentAction, TickerExternalAgentHistory, TrustedClaimIssuer } from "./types";
import { PaginatedQueryArgs, QueryArgs } from "../types/utils";
/**
 * @hidden
 *
 * Get the latest processed block number
 */
export declare function latestBlockQuery(): QueryOptions;
/**
 * @hidden
 *
 * Middleware V2 heartbeat
 */
export declare function heartbeatQuery(): QueryOptions;
/**
 * @hidden
 *
 * Get details about the SubQuery indexer
 */
export declare function metadataQuery(): QueryOptions;
/**
 * @hidden
 *
 * Get details about the latest Subquery version
 */
export declare function latestSqVersionQuery(): QueryOptions;
export interface ClaimsQueryFilter {
    dids?: string[];
    scope?: Record<string, unknown>;
    trustedClaimIssuers?: string[];
    claimTypes?: ClaimTypeEnum[];
    includeExpired?: boolean;
    expiryTimestamp?: number;
}
/**
 * @hidden
 *
 * Get all dids with at least one claim for a given scope and from one of the given trusted claim issuers
 */
export declare function claimsGroupingQuery(variables: ClaimsQueryFilter, orderBy?: ClaimsOrderBy, groupBy?: ClaimsGroupBy): QueryOptions<PaginatedQueryArgs<ClaimsQueryFilter>>;
/**
 * @hidden
 *
 * Get all claims that a given target DID has, with a given scope and from one of the given trustedClaimIssuers
 */
export declare function claimsQuery(filters: ClaimsQueryFilter, size?: BigNumber, start?: BigNumber): QueryOptions<PaginatedQueryArgs<ClaimsQueryFilter>>;
/**
 * @hidden
 *
 * Get all investments for a given offering
 */
export declare function investmentsQuery(filters: QueryArgs<Investment, 'stoId' | 'offeringToken'>, size?: BigNumber, start?: BigNumber): QueryOptions<PaginatedQueryArgs<QueryArgs<Investment, 'stoId' | 'offeringToken'>>>;
declare type InstructionArgs = 'id' | 'eventId' | 'venueId' | 'status';
/**
 * @hidden
 *
 * Get a specific instruction within a venue for a specific event
 */
export declare function instructionsQuery(filters: QueryArgs<Instruction, InstructionArgs>, size?: BigNumber, start?: BigNumber): QueryOptions<PaginatedQueryArgs<QueryArgs<Instruction, InstructionArgs>>>;
/**
 * @hidden
 *
 * Get Instructions where an identity is involved
 */
export declare function instructionsByDidQuery(identityId: string): QueryOptions<QueryArgs<Leg, 'fromId' | 'toId'>>;
declare type EventArgs = 'moduleId' | 'eventId' | 'eventArg0' | 'eventArg1' | 'eventArg2';
/**
 * @hidden
 *
 * Get a single event by any of its indexed arguments
 */
export declare function eventsByArgs(filters: QueryArgs<Event, EventArgs>, size?: BigNumber, start?: BigNumber): QueryOptions<PaginatedQueryArgs<QueryArgs<Event, EventArgs>>>;
/**
 * @hidden
 *
 * Get a transaction by hash
 */
export declare function extrinsicByHash(variables: QueryArgs<Extrinsic, 'extrinsicHash'>): QueryOptions<QueryArgs<Extrinsic, 'extrinsicHash'>>;
declare type ExtrinsicArgs = 'blockId' | 'address' | 'moduleId' | 'callId' | 'success';
/**
 * @hidden
 *
 * Get transactions
 */
export declare function extrinsicsByArgs(filters: QueryArgs<Extrinsic, ExtrinsicArgs>, size?: BigNumber, start?: BigNumber, orderBy?: ExtrinsicsOrderBy): QueryOptions<PaginatedQueryArgs<QueryArgs<Extrinsic, ExtrinsicArgs>>>;
/**
 * @hidden
 *
 * Get an trusted claim issuer event for an asset and an issuer
 */
export declare function trustedClaimIssuerQuery(variables: QueryArgs<TrustedClaimIssuer, 'issuer' | 'assetId'>): QueryOptions<QueryArgs<TrustedClaimIssuer, 'issuer' | 'assetId'>>;
/**
 * @hidden
 *
 * Get an trusted claim issuer event for an asset and an issuer
 */
export declare function trustingAssetsQuery(variables: QueryArgs<TrustedClaimIssuer, 'issuer'>): QueryOptions<QueryArgs<TrustedClaimIssuer, 'issuer'>>;
/**
 * @hidden
 *
 * Get portfolio details for a given DID and portfolio number
 */
export declare function portfolioQuery(variables: QueryArgs<Portfolio, 'identityId' | 'number'>): QueryOptions<QueryArgs<Portfolio, 'identityId' | 'number'>>;
/**
 * @hidden
 *
 * Get Asset details for a given ticker
 */
export declare function assetQuery(variables: QueryArgs<Asset, 'ticker'>): QueryOptions<QueryArgs<Asset, 'ticker'>>;
/**
 * @hidden
 *
 * Get the event details when external agent added for a ticker
 */
export declare function tickerExternalAgentsQuery(variables: QueryArgs<TickerExternalAgent, 'assetId'>): QueryOptions<QueryArgs<TickerExternalAgent, 'assetId'>>;
/**
 * @hidden
 *
 * Get the transaction history of each external agent of an Asset
 */
export declare function tickerExternalAgentHistoryQuery(variables: QueryArgs<TickerExternalAgentHistory, 'assetId'>): QueryOptions<QueryArgs<TickerExternalAgentHistory, 'assetId'>>;
declare type TickerExternalAgentActionArgs = 'assetId' | 'callerId' | 'palletName' | 'eventId';
/**
 * @hidden
 *
 * Get list of Events triggered by actions (from the set of actions that can only be performed by external agents) that have been performed on a specific Asset
 */
export declare function tickerExternalAgentActionsQuery(filters: QueryArgs<TickerExternalAgentAction, TickerExternalAgentActionArgs>, size?: BigNumber, start?: BigNumber): QueryOptions<PaginatedQueryArgs<QueryArgs<TickerExternalAgentAction, TickerExternalAgentActionArgs>>>;
/**
 * @hidden
 *
 * Get distribution details for a CAId
 */
export declare function distributionQuery(variables: QueryArgs<Distribution, 'id'>): QueryOptions<QueryArgs<Distribution, 'id'>>;
/**
 * @hidden
 *
 * Get history of claims for a distribution
 */
export declare function distributionPaymentsQuery(filters: QueryArgs<DistributionPayment, 'distributionId'>, size?: BigNumber, start?: BigNumber): QueryOptions<PaginatedQueryArgs<QueryArgs<DistributionPayment, 'distributionId'>>>;
/**
 * @hidden
 *
 * Get asset held by a DID
 */
export declare function assetHoldersQuery(filters: QueryArgs<AssetHolder, 'identityId'>, size?: BigNumber, start?: BigNumber, orderBy?: AssetHoldersOrderBy): QueryOptions<PaginatedQueryArgs<QueryArgs<DistributionPayment, 'distributionId'>>>;
export interface QuerySettlementFilters {
    identityId: string;
    portfolioId?: BigNumber;
    ticker?: string;
    address?: string;
}
/**
 * @hidden
 *
 * Get Settlements where a Portfolio is involved
 */
export declare function settlementsQuery(filters: QuerySettlementFilters): QueryOptions<QueryArgs<Leg, 'fromId' | 'toId' | 'assetId' | 'addresses'>>;
/**
 * @hidden
 *
 * Get Settlements where a Portfolio is involved
 */
export declare function portfolioMovementsQuery(filters: QuerySettlementFilters): QueryOptions<QueryArgs<PortfolioMovement, 'fromId' | 'toId' | 'assetId' | 'address'>>;
export interface QueryPolyxTransactionFilters {
    identityId?: string;
    addresses?: string[];
}
/**
 * @hidden
 *
 * Get the balance history for an Asset
 */
export declare function assetTransactionQuery(filters: QueryArgs<AssetTransaction, 'assetId'>, size?: BigNumber, start?: BigNumber): QueryOptions<PaginatedQueryArgs<QueryArgs<AssetTransaction, 'assetId'>>>;
/**
 * @hidden
 *
 * Get POLYX transactions where an Account or an Identity is involved
 */
export declare function polyxTransactionsQuery(filters: QueryPolyxTransactionFilters, size?: BigNumber, start?: BigNumber): QueryOptions<PaginatedQueryArgs<QueryPolyxTransactionFilters>>;
export declare type AuthorizationArgs = 'fromId' | 'type' | 'status' | 'toId' | 'toKey' | 'expiry';
/**
 * @hidden
 *
 * Get all authorizations with specified filters
 */
export declare function authorizationsQuery(filters: QueryArgs<Authorization, AuthorizationArgs>, size?: BigNumber, start?: BigNumber): QueryOptions<PaginatedQueryArgs<QueryArgs<Investment, 'stoId' | 'offeringToken'>>>;
export {};
//# sourceMappingURL=queries.d.ts.map