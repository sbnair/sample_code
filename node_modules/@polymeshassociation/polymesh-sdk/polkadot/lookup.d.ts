declare const _default: {
    /**
     * Lookup3: frame_system::AccountInfo<Index, polymesh_common_utilities::traits::balances::AccountData>
     **/
    FrameSystemAccountInfo: {
        nonce: string;
        consumers: string;
        providers: string;
        sufficients: string;
        data: string;
    };
    /**
     * Lookup5: polymesh_common_utilities::traits::balances::AccountData
     **/
    PolymeshCommonUtilitiesBalancesAccountData: {
        free: string;
        reserved: string;
        miscFrozen: string;
        feeFrozen: string;
    };
    /**
     * Lookup7: frame_support::dispatch::PerDispatchClass<sp_weights::weight_v2::Weight>
     **/
    FrameSupportDispatchPerDispatchClassWeight: {
        normal: string;
        operational: string;
        mandatory: string;
    };
    /**
     * Lookup8: sp_weights::weight_v2::Weight
     **/
    SpWeightsWeightV2Weight: {
        refTime: string;
        proofSize: string;
    };
    /**
     * Lookup13: sp_runtime::generic::digest::Digest
     **/
    SpRuntimeDigest: {
        logs: string;
    };
    /**
     * Lookup15: sp_runtime::generic::digest::DigestItem
     **/
    SpRuntimeDigestDigestItem: {
        _enum: {
            Other: string;
            __Unused1: string;
            __Unused2: string;
            __Unused3: string;
            Consensus: string;
            Seal: string;
            PreRuntime: string;
            __Unused7: string;
            RuntimeEnvironmentUpdated: string;
        };
    };
    /**
     * Lookup18: frame_system::EventRecord<polymesh_runtime_develop::runtime::RuntimeEvent, primitive_types::H256>
     **/
    FrameSystemEventRecord: {
        phase: string;
        event: string;
        topics: string;
    };
    /**
     * Lookup20: frame_system::pallet::Event<T>
     **/
    FrameSystemEvent: {
        _enum: {
            ExtrinsicSuccess: {
                dispatchInfo: string;
            };
            ExtrinsicFailed: {
                dispatchError: string;
                dispatchInfo: string;
            };
            CodeUpdated: string;
            NewAccount: {
                account: string;
            };
            KilledAccount: {
                account: string;
            };
            Remarked: {
                _alias: {
                    hash_: string;
                };
                sender: string;
                hash_: string;
            };
        };
    };
    /**
     * Lookup21: frame_support::dispatch::DispatchInfo
     **/
    FrameSupportDispatchDispatchInfo: {
        weight: string;
        class: string;
        paysFee: string;
    };
    /**
     * Lookup22: frame_support::dispatch::DispatchClass
     **/
    FrameSupportDispatchDispatchClass: {
        _enum: string[];
    };
    /**
     * Lookup23: frame_support::dispatch::Pays
     **/
    FrameSupportDispatchPays: {
        _enum: string[];
    };
    /**
     * Lookup24: sp_runtime::DispatchError
     **/
    SpRuntimeDispatchError: {
        _enum: {
            Other: string;
            CannotLookup: string;
            BadOrigin: string;
            Module: string;
            ConsumerRemaining: string;
            NoProviders: string;
            TooManyConsumers: string;
            Token: string;
            Arithmetic: string;
            Transactional: string;
            Exhausted: string;
            Corruption: string;
            Unavailable: string;
        };
    };
    /**
     * Lookup25: sp_runtime::ModuleError
     **/
    SpRuntimeModuleError: {
        index: string;
        error: string;
    };
    /**
     * Lookup26: sp_runtime::TokenError
     **/
    SpRuntimeTokenError: {
        _enum: string[];
    };
    /**
     * Lookup27: sp_arithmetic::ArithmeticError
     **/
    SpArithmeticArithmeticError: {
        _enum: string[];
    };
    /**
     * Lookup28: sp_runtime::TransactionalError
     **/
    SpRuntimeTransactionalError: {
        _enum: string[];
    };
    /**
     * Lookup29: pallet_indices::pallet::Event<T>
     **/
    PalletIndicesEvent: {
        _enum: {
            IndexAssigned: {
                who: string;
                index: string;
            };
            IndexFreed: {
                index: string;
            };
            IndexFrozen: {
                index: string;
                who: string;
            };
        };
    };
    /**
     * Lookup30: polymesh_common_utilities::traits::balances::RawEvent<sp_core::crypto::AccountId32>
     **/
    PolymeshCommonUtilitiesBalancesRawEvent: {
        _enum: {
            Endowed: string;
            Transfer: string;
            BalanceSet: string;
            AccountBalanceBurned: string;
            Reserved: string;
            Unreserved: string;
            ReserveRepatriated: string;
        };
    };
    /**
     * Lookup32: polymesh_primitives::identity_id::IdentityId
     **/
    PolymeshPrimitivesIdentityId: string;
    /**
     * Lookup34: polymesh_primitives::Memo
     **/
    PolymeshPrimitivesMemo: string;
    /**
     * Lookup35: frame_support::traits::tokens::misc::BalanceStatus
     **/
    FrameSupportTokensMiscBalanceStatus: {
        _enum: string[];
    };
    /**
     * Lookup36: pallet_transaction_payment::RawEvent<Balance, sp_core::crypto::AccountId32>
     **/
    PalletTransactionPaymentRawEvent: {
        _enum: {
            TransactionFeePaid: {
                who: string;
                actualFee: string;
                tip: string;
            };
        };
    };
    /**
     * Lookup37: polymesh_common_utilities::traits::identity::RawEvent<sp_core::crypto::AccountId32, Moment>
     **/
    PolymeshCommonUtilitiesIdentityRawEvent: {
        _enum: {
            DidCreated: string;
            SecondaryKeysAdded: string;
            SecondaryKeysRemoved: string;
            SecondaryKeyLeftIdentity: string;
            SecondaryKeyPermissionsUpdated: string;
            PrimaryKeyUpdated: string;
            ClaimAdded: string;
            ClaimRevoked: string;
            AssetDidRegistered: string;
            AuthorizationAdded: string;
            AuthorizationRevoked: string;
            AuthorizationRejected: string;
            AuthorizationConsumed: string;
            AuthorizationRetryLimitReached: string;
            CddRequirementForPrimaryKeyUpdated: string;
            CddClaimsInvalidated: string;
            SecondaryKeysFrozen: string;
            SecondaryKeysUnfrozen: string;
            CustomClaimTypeAdded: string;
            ChildDidCreated: string;
            ChildDidUnlinked: string;
        };
    };
    /**
     * Lookup39: polymesh_primitives::secondary_key::SecondaryKey<sp_core::crypto::AccountId32>
     **/
    PolymeshPrimitivesSecondaryKey: {
        key: string;
        permissions: string;
    };
    /**
     * Lookup40: polymesh_primitives::secondary_key::Permissions
     **/
    PolymeshPrimitivesSecondaryKeyPermissions: {
        asset: string;
        extrinsic: string;
        portfolio: string;
    };
    /**
     * Lookup41: polymesh_primitives::subset::SubsetRestriction<polymesh_primitives::ticker::Ticker>
     **/
    PolymeshPrimitivesSubsetSubsetRestrictionTicker: {
        _enum: {
            Whole: string;
            These: string;
            Except: string;
        };
    };
    /**
     * Lookup42: polymesh_primitives::ticker::Ticker
     **/
    PolymeshPrimitivesTicker: string;
    /**
     * Lookup46: polymesh_primitives::subset::SubsetRestriction<polymesh_primitives::secondary_key::PalletPermissions>
     **/
    PolymeshPrimitivesSubsetSubsetRestrictionPalletPermissions: {
        _enum: {
            Whole: string;
            These: string;
            Except: string;
        };
    };
    /**
     * Lookup47: polymesh_primitives::secondary_key::PalletPermissions
     **/
    PolymeshPrimitivesSecondaryKeyPalletPermissions: {
        palletName: string;
        dispatchableNames: string;
    };
    /**
     * Lookup49: polymesh_primitives::subset::SubsetRestriction<polymesh_primitives::DispatchableName>
     **/
    PolymeshPrimitivesSubsetSubsetRestrictionDispatchableName: {
        _enum: {
            Whole: string;
            These: string;
            Except: string;
        };
    };
    /**
     * Lookup55: polymesh_primitives::subset::SubsetRestriction<polymesh_primitives::identity_id::PortfolioId>
     **/
    PolymeshPrimitivesSubsetSubsetRestrictionPortfolioId: {
        _enum: {
            Whole: string;
            These: string;
            Except: string;
        };
    };
    /**
     * Lookup56: polymesh_primitives::identity_id::PortfolioId
     **/
    PolymeshPrimitivesIdentityIdPortfolioId: {
        did: string;
        kind: string;
    };
    /**
     * Lookup57: polymesh_primitives::identity_id::PortfolioKind
     **/
    PolymeshPrimitivesIdentityIdPortfolioKind: {
        _enum: {
            Default: string;
            User: string;
        };
    };
    /**
     * Lookup62: polymesh_primitives::identity_claim::IdentityClaim
     **/
    PolymeshPrimitivesIdentityClaim: {
        claimIssuer: string;
        issuanceDate: string;
        lastUpdateDate: string;
        expiry: string;
        claim: string;
    };
    /**
     * Lookup64: polymesh_primitives::identity_claim::Claim
     **/
    PolymeshPrimitivesIdentityClaimClaim: {
        _enum: {
            Accredited: string;
            Affiliate: string;
            BuyLockup: string;
            SellLockup: string;
            CustomerDueDiligence: string;
            KnowYourCustomer: string;
            Jurisdiction: string;
            Exempted: string;
            Blocked: string;
            Custom: string;
        };
    };
    /**
     * Lookup65: polymesh_primitives::identity_claim::Scope
     **/
    PolymeshPrimitivesIdentityClaimScope: {
        _enum: {
            Identity: string;
            Ticker: string;
            Custom: string;
        };
    };
    /**
     * Lookup66: polymesh_primitives::cdd_id::CddId
     **/
    PolymeshPrimitivesCddId: string;
    /**
     * Lookup67: polymesh_primitives::jurisdiction::CountryCode
     **/
    PolymeshPrimitivesJurisdictionCountryCode: {
        _enum: string[];
    };
    /**
     * Lookup71: polymesh_primitives::authorization::AuthorizationData<sp_core::crypto::AccountId32>
     **/
    PolymeshPrimitivesAuthorizationAuthorizationData: {
        _enum: {
            AttestPrimaryKeyRotation: string;
            RotatePrimaryKey: string;
            TransferTicker: string;
            AddMultiSigSigner: string;
            TransferAssetOwnership: string;
            JoinIdentity: string;
            PortfolioCustody: string;
            BecomeAgent: string;
            AddRelayerPayingKey: string;
            RotatePrimaryKeyToSecondary: string;
        };
    };
    /**
     * Lookup72: polymesh_primitives::agent::AgentGroup
     **/
    PolymeshPrimitivesAgentAgentGroup: {
        _enum: {
            Full: string;
            Custom: string;
            ExceptMeta: string;
            PolymeshV1CAA: string;
            PolymeshV1PIA: string;
        };
    };
    /**
     * Lookup75: polymesh_common_utilities::traits::group::RawEvent<sp_core::crypto::AccountId32, polymesh_runtime_develop::runtime::RuntimeEvent, pallet_group::Instance2>
     **/
    PolymeshCommonUtilitiesGroupRawEventInstance2: {
        _enum: {
            MemberAdded: string;
            MemberRemoved: string;
            MemberRevoked: string;
            MembersSwapped: string;
            MembersReset: string;
            ActiveLimitChanged: string;
            Dummy: string;
        };
    };
    /**
     * Lookup76: pallet_group::Instance2
     **/
    PalletGroupInstance2: string;
    /**
     * Lookup78: pallet_committee::RawEvent<primitive_types::H256, BlockNumber, pallet_committee::Instance1>
     **/
    PalletCommitteeRawEventInstance1: {
        _enum: {
            Proposed: string;
            Voted: string;
            VoteRetracted: string;
            FinalVotes: string;
            Approved: string;
            Rejected: string;
            Executed: string;
            ReleaseCoordinatorUpdated: string;
            ExpiresAfterUpdated: string;
            VoteThresholdUpdated: string;
        };
    };
    /**
     * Lookup79: pallet_committee::Instance1
     **/
    PalletCommitteeInstance1: string;
    /**
     * Lookup82: polymesh_common_utilities::MaybeBlock<BlockNumber>
     **/
    PolymeshCommonUtilitiesMaybeBlock: {
        _enum: {
            Some: string;
            None: string;
        };
    };
    /**
     * Lookup83: polymesh_common_utilities::traits::group::RawEvent<sp_core::crypto::AccountId32, polymesh_runtime_develop::runtime::RuntimeEvent, pallet_group::Instance1>
     **/
    PolymeshCommonUtilitiesGroupRawEventInstance1: {
        _enum: {
            MemberAdded: string;
            MemberRemoved: string;
            MemberRevoked: string;
            MembersSwapped: string;
            MembersReset: string;
            ActiveLimitChanged: string;
            Dummy: string;
        };
    };
    /**
     * Lookup84: pallet_group::Instance1
     **/
    PalletGroupInstance1: string;
    /**
     * Lookup85: pallet_committee::RawEvent<primitive_types::H256, BlockNumber, pallet_committee::Instance3>
     **/
    PalletCommitteeRawEventInstance3: {
        _enum: {
            Proposed: string;
            Voted: string;
            VoteRetracted: string;
            FinalVotes: string;
            Approved: string;
            Rejected: string;
            Executed: string;
            ReleaseCoordinatorUpdated: string;
            ExpiresAfterUpdated: string;
            VoteThresholdUpdated: string;
        };
    };
    /**
     * Lookup86: pallet_committee::Instance3
     **/
    PalletCommitteeInstance3: string;
    /**
     * Lookup87: polymesh_common_utilities::traits::group::RawEvent<sp_core::crypto::AccountId32, polymesh_runtime_develop::runtime::RuntimeEvent, pallet_group::Instance3>
     **/
    PolymeshCommonUtilitiesGroupRawEventInstance3: {
        _enum: {
            MemberAdded: string;
            MemberRemoved: string;
            MemberRevoked: string;
            MembersSwapped: string;
            MembersReset: string;
            ActiveLimitChanged: string;
            Dummy: string;
        };
    };
    /**
     * Lookup88: pallet_group::Instance3
     **/
    PalletGroupInstance3: string;
    /**
     * Lookup89: pallet_committee::RawEvent<primitive_types::H256, BlockNumber, pallet_committee::Instance4>
     **/
    PalletCommitteeRawEventInstance4: {
        _enum: {
            Proposed: string;
            Voted: string;
            VoteRetracted: string;
            FinalVotes: string;
            Approved: string;
            Rejected: string;
            Executed: string;
            ReleaseCoordinatorUpdated: string;
            ExpiresAfterUpdated: string;
            VoteThresholdUpdated: string;
        };
    };
    /**
     * Lookup90: pallet_committee::Instance4
     **/
    PalletCommitteeInstance4: string;
    /**
     * Lookup91: polymesh_common_utilities::traits::group::RawEvent<sp_core::crypto::AccountId32, polymesh_runtime_develop::runtime::RuntimeEvent, pallet_group::Instance4>
     **/
    PolymeshCommonUtilitiesGroupRawEventInstance4: {
        _enum: {
            MemberAdded: string;
            MemberRemoved: string;
            MemberRevoked: string;
            MembersSwapped: string;
            MembersReset: string;
            ActiveLimitChanged: string;
            Dummy: string;
        };
    };
    /**
     * Lookup92: pallet_group::Instance4
     **/
    PalletGroupInstance4: string;
    /**
     * Lookup93: polymesh_common_utilities::traits::multisig::RawEvent<sp_core::crypto::AccountId32>
     **/
    PolymeshCommonUtilitiesMultisigRawEvent: {
        _enum: {
            MultiSigCreated: string;
            ProposalAdded: string;
            ProposalExecuted: string;
            MultiSigSignerAdded: string;
            MultiSigSignerAuthorized: string;
            MultiSigSignerRemoved: string;
            MultiSigSignaturesRequiredChanged: string;
            ProposalApproved: string;
            ProposalRejectionVote: string;
            ProposalRejected: string;
            ProposalExecutionFailed: string;
            SchedulingFailed: string;
        };
    };
    /**
     * Lookup95: polymesh_primitives::secondary_key::Signatory<sp_core::crypto::AccountId32>
     **/
    PolymeshPrimitivesSecondaryKeySignatory: {
        _enum: {
            Identity: string;
            Account: string;
        };
    };
    /**
     * Lookup96: pallet_bridge::RawEvent<sp_core::crypto::AccountId32, BlockNumber>
     **/
    PalletBridgeRawEvent: {
        _enum: {
            ControllerChanged: string;
            AdminChanged: string;
            TimelockChanged: string;
            Bridged: string;
            Frozen: string;
            Unfrozen: string;
            FrozenTx: string;
            UnfrozenTx: string;
            ExemptedUpdated: string;
            BridgeLimitUpdated: string;
            TxsHandled: string;
            BridgeTxScheduled: string;
            BridgeTxScheduleFailed: string;
            FreezeAdminAdded: string;
            FreezeAdminRemoved: string;
            TxRemoved: string;
            BridgeTxFailed: string;
        };
    };
    /**
     * Lookup97: pallet_bridge::BridgeTx<sp_core::crypto::AccountId32>
     **/
    PalletBridgeBridgeTx: {
        nonce: string;
        recipient: string;
        amount: string;
        txHash: string;
    };
    /**
     * Lookup100: pallet_bridge::HandledTxStatus
     **/
    PalletBridgeHandledTxStatus: {
        _enum: {
            Success: string;
            Error: string;
        };
    };
    /**
     * Lookup101: pallet_staking::RawEvent<Balance, sp_core::crypto::AccountId32>
     **/
    PalletStakingRawEvent: {
        _enum: {
            EraPayout: string;
            Reward: string;
            Slash: string;
            OldSlashingReportDiscarded: string;
            StakingElection: string;
            SolutionStored: string;
            Bonded: string;
            Unbonded: string;
            Nominated: string;
            Withdrawn: string;
            PermissionedIdentityAdded: string;
            PermissionedIdentityRemoved: string;
            InvalidatedNominators: string;
            CommissionCapUpdated: string;
            MinimumBondThresholdUpdated: string;
            RewardPaymentSchedulingInterrupted: string;
            SlashingAllowedForChanged: string;
        };
    };
    /**
     * Lookup102: pallet_staking::ElectionCompute
     **/
    PalletStakingElectionCompute: {
        _enum: string[];
    };
    /**
     * Lookup104: pallet_staking::SlashingSwitch
     **/
    PalletStakingSlashingSwitch: {
        _enum: string[];
    };
    /**
     * Lookup105: pallet_offences::pallet::Event
     **/
    PalletOffencesEvent: {
        _enum: {
            Offence: {
                kind: string;
                timeslot: string;
            };
        };
    };
    /**
     * Lookup107: pallet_session::pallet::Event
     **/
    PalletSessionEvent: {
        _enum: {
            NewSession: {
                sessionIndex: string;
            };
        };
    };
    /**
     * Lookup108: pallet_grandpa::pallet::Event
     **/
    PalletGrandpaEvent: {
        _enum: {
            NewAuthorities: {
                authoritySet: string;
            };
            Paused: string;
            Resumed: string;
        };
    };
    /**
     * Lookup111: sp_consensus_grandpa::app::Public
     **/
    SpConsensusGrandpaAppPublic: string;
    /**
     * Lookup112: sp_core::ed25519::Public
     **/
    SpCoreEd25519Public: string;
    /**
     * Lookup113: pallet_im_online::pallet::Event<T>
     **/
    PalletImOnlineEvent: {
        _enum: {
            HeartbeatReceived: {
                authorityId: string;
            };
            AllGood: string;
            SomeOffline: {
                offline: string;
            };
        };
    };
    /**
     * Lookup114: pallet_im_online::sr25519::app_sr25519::Public
     **/
    PalletImOnlineSr25519AppSr25519Public: string;
    /**
     * Lookup115: sp_core::sr25519::Public
     **/
    SpCoreSr25519Public: string;
    /**
     * Lookup118: pallet_staking::Exposure<sp_core::crypto::AccountId32, Balance>
     **/
    PalletStakingExposure: {
        total: string;
        own: string;
        others: string;
    };
    /**
     * Lookup121: pallet_staking::IndividualExposure<sp_core::crypto::AccountId32, Balance>
     **/
    PalletStakingIndividualExposure: {
        who: string;
        value: string;
    };
    /**
     * Lookup122: pallet_sudo::RawEvent<sp_core::crypto::AccountId32>
     **/
    PalletSudoRawEvent: {
        _enum: {
            Sudid: string;
            KeyChanged: string;
            SudoAsDone: string;
        };
    };
    /**
     * Lookup123: polymesh_common_utilities::traits::asset::RawEvent<Moment, sp_core::crypto::AccountId32>
     **/
    PolymeshCommonUtilitiesAssetRawEvent: {
        _enum: {
            AssetCreated: string;
            IdentifiersUpdated: string;
            DivisibilityChanged: string;
            TransferWithData: string;
            IsIssuable: string;
            TickerRegistered: string;
            TickerTransferred: string;
            AssetOwnershipTransferred: string;
            AssetFrozen: string;
            AssetUnfrozen: string;
            AssetRenamed: string;
            FundingRoundSet: string;
            DocumentAdded: string;
            DocumentRemoved: string;
            ExtensionRemoved: string;
            ControllerTransfer: string;
            CustomAssetTypeExists: string;
            CustomAssetTypeRegistered: string;
            SetAssetMetadataValue: string;
            SetAssetMetadataValueDetails: string;
            RegisterAssetMetadataLocalType: string;
            RegisterAssetMetadataGlobalType: string;
            AssetTypeChanged: string;
            LocalMetadataKeyDeleted: string;
            MetadataValueDeleted: string;
            AssetBalanceUpdated: string;
        };
    };
    /**
     * Lookup124: polymesh_primitives::asset::AssetType
     **/
    PolymeshPrimitivesAssetAssetType: {
        _enum: {
            EquityCommon: string;
            EquityPreferred: string;
            Commodity: string;
            FixedIncome: string;
            REIT: string;
            Fund: string;
            RevenueShareAgreement: string;
            StructuredProduct: string;
            Derivative: string;
            Custom: string;
            StableCoin: string;
            NonFungible: string;
        };
    };
    /**
     * Lookup126: polymesh_primitives::asset::NonFungibleType
     **/
    PolymeshPrimitivesAssetNonFungibleType: {
        _enum: {
            Derivative: string;
            FixedIncome: string;
            Invoice: string;
            Custom: string;
        };
    };
    /**
     * Lookup129: polymesh_primitives::asset_identifier::AssetIdentifier
     **/
    PolymeshPrimitivesAssetIdentifier: {
        _enum: {
            CUSIP: string;
            CINS: string;
            ISIN: string;
            LEI: string;
            FIGI: string;
        };
    };
    /**
     * Lookup135: polymesh_primitives::document::Document
     **/
    PolymeshPrimitivesDocument: {
        uri: string;
        contentHash: string;
        name: string;
        docType: string;
        filingDate: string;
    };
    /**
     * Lookup137: polymesh_primitives::document_hash::DocumentHash
     **/
    PolymeshPrimitivesDocumentHash: {
        _enum: {
            None: string;
            H512: string;
            H384: string;
            H320: string;
            H256: string;
            H224: string;
            H192: string;
            H160: string;
            H128: string;
        };
    };
    /**
     * Lookup148: polymesh_primitives::asset_metadata::AssetMetadataValueDetail<Moment>
     **/
    PolymeshPrimitivesAssetMetadataAssetMetadataValueDetail: {
        expire: string;
        lockStatus: string;
    };
    /**
     * Lookup149: polymesh_primitives::asset_metadata::AssetMetadataLockStatus<Moment>
     **/
    PolymeshPrimitivesAssetMetadataAssetMetadataLockStatus: {
        _enum: {
            Unlocked: string;
            Locked: string;
            LockedUntil: string;
        };
    };
    /**
     * Lookup152: polymesh_primitives::asset_metadata::AssetMetadataSpec
     **/
    PolymeshPrimitivesAssetMetadataAssetMetadataSpec: {
        url: string;
        description: string;
        typeDef: string;
    };
    /**
     * Lookup159: polymesh_primitives::asset_metadata::AssetMetadataKey
     **/
    PolymeshPrimitivesAssetMetadataAssetMetadataKey: {
        _enum: {
            Global: string;
            Local: string;
        };
    };
    /**
     * Lookup161: polymesh_primitives::portfolio::PortfolioUpdateReason
     **/
    PolymeshPrimitivesPortfolioPortfolioUpdateReason: {
        _enum: {
            Issued: {
                fundingRoundName: string;
            };
            Redeemed: string;
            Transferred: {
                instructionId: string;
                instructionMemo: string;
            };
        };
    };
    /**
     * Lookup164: pallet_corporate_actions::distribution::Event
     **/
    PalletCorporateActionsDistributionEvent: {
        _enum: {
            Created: string;
            BenefitClaimed: string;
            Reclaimed: string;
            Removed: string;
        };
    };
    /**
     * Lookup165: polymesh_primitives::event_only::EventOnly<polymesh_primitives::identity_id::IdentityId>
     **/
    PolymeshPrimitivesEventOnly: string;
    /**
     * Lookup166: pallet_corporate_actions::CAId
     **/
    PalletCorporateActionsCaId: {
        ticker: string;
        localId: string;
    };
    /**
     * Lookup168: pallet_corporate_actions::distribution::Distribution
     **/
    PalletCorporateActionsDistribution: {
        from: string;
        currency: string;
        perShare: string;
        amount: string;
        remaining: string;
        reclaimed: string;
        paymentAt: string;
        expiresAt: string;
    };
    /**
     * Lookup170: polymesh_common_utilities::traits::checkpoint::Event
     **/
    PolymeshCommonUtilitiesCheckpointEvent: {
        _enum: {
            CheckpointCreated: string;
            MaximumSchedulesComplexityChanged: string;
            ScheduleCreated: string;
            ScheduleRemoved: string;
        };
    };
    /**
     * Lookup173: polymesh_common_utilities::traits::checkpoint::ScheduleCheckpoints
     **/
    PolymeshCommonUtilitiesCheckpointScheduleCheckpoints: {
        pending: string;
    };
    /**
     * Lookup176: polymesh_common_utilities::traits::compliance_manager::Event
     **/
    PolymeshCommonUtilitiesComplianceManagerEvent: {
        _enum: {
            ComplianceRequirementCreated: string;
            ComplianceRequirementRemoved: string;
            AssetComplianceReplaced: string;
            AssetComplianceReset: string;
            AssetComplianceResumed: string;
            AssetCompliancePaused: string;
            ComplianceRequirementChanged: string;
            TrustedDefaultClaimIssuerAdded: string;
            TrustedDefaultClaimIssuerRemoved: string;
        };
    };
    /**
     * Lookup177: polymesh_primitives::compliance_manager::ComplianceRequirement
     **/
    PolymeshPrimitivesComplianceManagerComplianceRequirement: {
        senderConditions: string;
        receiverConditions: string;
        id: string;
    };
    /**
     * Lookup179: polymesh_primitives::condition::Condition
     **/
    PolymeshPrimitivesCondition: {
        conditionType: string;
        issuers: string;
    };
    /**
     * Lookup180: polymesh_primitives::condition::ConditionType
     **/
    PolymeshPrimitivesConditionConditionType: {
        _enum: {
            IsPresent: string;
            IsAbsent: string;
            IsAnyOf: string;
            IsNoneOf: string;
            IsIdentity: string;
        };
    };
    /**
     * Lookup182: polymesh_primitives::condition::TargetIdentity
     **/
    PolymeshPrimitivesConditionTargetIdentity: {
        _enum: {
            ExternalAgent: string;
            Specific: string;
        };
    };
    /**
     * Lookup184: polymesh_primitives::condition::TrustedIssuer
     **/
    PolymeshPrimitivesConditionTrustedIssuer: {
        issuer: string;
        trustedFor: string;
    };
    /**
     * Lookup185: polymesh_primitives::condition::TrustedFor
     **/
    PolymeshPrimitivesConditionTrustedFor: {
        _enum: {
            Any: string;
            Specific: string;
        };
    };
    /**
     * Lookup187: polymesh_primitives::identity_claim::ClaimType
     **/
    PolymeshPrimitivesIdentityClaimClaimType: {
        _enum: {
            Accredited: string;
            Affiliate: string;
            BuyLockup: string;
            SellLockup: string;
            CustomerDueDiligence: string;
            KnowYourCustomer: string;
            Jurisdiction: string;
            Exempted: string;
            Blocked: string;
            Custom: string;
        };
    };
    /**
     * Lookup189: pallet_corporate_actions::Event
     **/
    PalletCorporateActionsEvent: {
        _enum: {
            MaxDetailsLengthChanged: string;
            DefaultTargetIdentitiesChanged: string;
            DefaultWithholdingTaxChanged: string;
            DidWithholdingTaxChanged: string;
            CAInitiated: string;
            CALinkedToDoc: string;
            CARemoved: string;
            RecordDateChanged: string;
        };
    };
    /**
     * Lookup190: pallet_corporate_actions::TargetIdentities
     **/
    PalletCorporateActionsTargetIdentities: {
        identities: string;
        treatment: string;
    };
    /**
     * Lookup191: pallet_corporate_actions::TargetTreatment
     **/
    PalletCorporateActionsTargetTreatment: {
        _enum: string[];
    };
    /**
     * Lookup193: pallet_corporate_actions::CorporateAction
     **/
    PalletCorporateActionsCorporateAction: {
        kind: string;
        declDate: string;
        recordDate: string;
        targets: string;
        defaultWithholdingTax: string;
        withholdingTax: string;
    };
    /**
     * Lookup194: pallet_corporate_actions::CAKind
     **/
    PalletCorporateActionsCaKind: {
        _enum: string[];
    };
    /**
     * Lookup196: pallet_corporate_actions::RecordDate
     **/
    PalletCorporateActionsRecordDate: {
        date: string;
        checkpoint: string;
    };
    /**
     * Lookup197: pallet_corporate_actions::CACheckpoint
     **/
    PalletCorporateActionsCaCheckpoint: {
        _enum: {
            Scheduled: string;
            Existing: string;
        };
    };
    /**
     * Lookup202: pallet_corporate_actions::ballot::Event
     **/
    PalletCorporateActionsBallotEvent: {
        _enum: {
            Created: string;
            VoteCast: string;
            RangeChanged: string;
            MetaChanged: string;
            RCVChanged: string;
            Removed: string;
        };
    };
    /**
     * Lookup203: pallet_corporate_actions::ballot::BallotTimeRange
     **/
    PalletCorporateActionsBallotBallotTimeRange: {
        start: string;
        end: string;
    };
    /**
     * Lookup204: pallet_corporate_actions::ballot::BallotMeta
     **/
    PalletCorporateActionsBallotBallotMeta: {
        title: string;
        motions: string;
    };
    /**
     * Lookup207: pallet_corporate_actions::ballot::Motion
     **/
    PalletCorporateActionsBallotMotion: {
        title: string;
        infoLink: string;
        choices: string;
    };
    /**
     * Lookup213: pallet_corporate_actions::ballot::BallotVote
     **/
    PalletCorporateActionsBallotBallotVote: {
        power: string;
        fallback: string;
    };
    /**
     * Lookup216: pallet_pips::RawEvent<sp_core::crypto::AccountId32, BlockNumber>
     **/
    PalletPipsRawEvent: {
        _enum: {
            HistoricalPipsPruned: string;
            ProposalCreated: string;
            ProposalStateUpdated: string;
            Voted: string;
            PipClosed: string;
            ExecutionScheduled: string;
            DefaultEnactmentPeriodChanged: string;
            MinimumProposalDepositChanged: string;
            PendingPipExpiryChanged: string;
            MaxPipSkipCountChanged: string;
            ActivePipLimitChanged: string;
            ProposalRefund: string;
            SnapshotCleared: string;
            SnapshotTaken: string;
            PipSkipped: string;
            SnapshotResultsEnacted: string;
            ExecutionSchedulingFailed: string;
            ExpiryScheduled: string;
            ExpirySchedulingFailed: string;
            ExecutionCancellingFailed: string;
        };
    };
    /**
     * Lookup217: pallet_pips::Proposer<sp_core::crypto::AccountId32>
     **/
    PalletPipsProposer: {
        _enum: {
            Community: string;
            Committee: string;
        };
    };
    /**
     * Lookup218: pallet_pips::Committee
     **/
    PalletPipsCommittee: {
        _enum: string[];
    };
    /**
     * Lookup222: pallet_pips::ProposalData
     **/
    PalletPipsProposalData: {
        _enum: {
            Hash: string;
            Proposal: string;
        };
    };
    /**
     * Lookup223: pallet_pips::ProposalState
     **/
    PalletPipsProposalState: {
        _enum: string[];
    };
    /**
     * Lookup226: pallet_pips::SnapshottedPip
     **/
    PalletPipsSnapshottedPip: {
        id: string;
        weight: string;
    };
    /**
     * Lookup232: polymesh_common_utilities::traits::portfolio::Event
     **/
    PolymeshCommonUtilitiesPortfolioEvent: {
        _enum: {
            PortfolioCreated: string;
            PortfolioDeleted: string;
            PortfolioRenamed: string;
            UserPortfolios: string;
            PortfolioCustodianChanged: string;
            FundsMovedBetweenPortfolios: string;
        };
    };
    /**
     * Lookup236: polymesh_primitives::portfolio::FundDescription
     **/
    PolymeshPrimitivesPortfolioFundDescription: {
        _enum: {
            Fungible: {
                ticker: string;
                amount: string;
            };
            NonFungible: string;
        };
    };
    /**
     * Lookup237: polymesh_primitives::nft::NFTs
     **/
    PolymeshPrimitivesNftNfTs: {
        ticker: string;
        ids: string;
    };
    /**
     * Lookup240: pallet_protocol_fee::RawEvent<sp_core::crypto::AccountId32>
     **/
    PalletProtocolFeeRawEvent: {
        _enum: {
            FeeSet: string;
            CoefficientSet: string;
            FeeCharged: string;
        };
    };
    /**
     * Lookup241: polymesh_primitives::PosRatio
     **/
    PolymeshPrimitivesPosRatio: string;
    /**
     * Lookup242: pallet_scheduler::pallet::Event<T>
     **/
    PalletSchedulerEvent: {
        _enum: {
            Scheduled: {
                when: string;
                index: string;
            };
            Canceled: {
                when: string;
                index: string;
            };
            Dispatched: {
                task: string;
                id: string;
                result: string;
            };
            CallUnavailable: {
                task: string;
                id: string;
            };
            PeriodicFailed: {
                task: string;
                id: string;
            };
            PermanentlyOverweight: {
                task: string;
                id: string;
            };
        };
    };
    /**
     * Lookup245: polymesh_common_utilities::traits::settlement::RawEvent<Moment, BlockNumber, sp_core::crypto::AccountId32>
     **/
    PolymeshCommonUtilitiesSettlementRawEvent: {
        _enum: {
            VenueCreated: string;
            VenueDetailsUpdated: string;
            VenueTypeUpdated: string;
            InstructionAffirmed: string;
            AffirmationWithdrawn: string;
            InstructionRejected: string;
            ReceiptClaimed: string;
            VenueFiltering: string;
            VenuesAllowed: string;
            VenuesBlocked: string;
            LegFailedExecution: string;
            InstructionFailed: string;
            InstructionExecuted: string;
            VenueUnauthorized: string;
            SchedulingFailed: string;
            InstructionRescheduled: string;
            VenueSignersUpdated: string;
            SettlementManuallyExecuted: string;
            InstructionCreated: string;
            FailedToExecuteInstruction: string;
        };
    };
    /**
     * Lookup248: polymesh_primitives::settlement::VenueType
     **/
    PolymeshPrimitivesSettlementVenueType: {
        _enum: string[];
    };
    /**
     * Lookup251: polymesh_primitives::settlement::ReceiptMetadata
     **/
    PolymeshPrimitivesSettlementReceiptMetadata: string;
    /**
     * Lookup253: polymesh_primitives::settlement::SettlementType<BlockNumber>
     **/
    PolymeshPrimitivesSettlementSettlementType: {
        _enum: {
            SettleOnAffirmation: string;
            SettleOnBlock: string;
            SettleManual: string;
        };
    };
    /**
     * Lookup255: polymesh_primitives::settlement::Leg
     **/
    PolymeshPrimitivesSettlementLeg: {
        _enum: {
            Fungible: {
                sender: string;
                receiver: string;
                ticker: string;
                amount: string;
            };
            NonFungible: {
                sender: string;
                receiver: string;
                nfts: string;
            };
            OffChain: {
                senderIdentity: string;
                receiverIdentity: string;
                ticker: string;
                amount: string;
            };
        };
    };
    /**
     * Lookup256: polymesh_common_utilities::traits::statistics::Event
     **/
    PolymeshCommonUtilitiesStatisticsEvent: {
        _enum: {
            StatTypesAdded: string;
            StatTypesRemoved: string;
            AssetStatsUpdated: string;
            SetAssetTransferCompliance: string;
            TransferConditionExemptionsAdded: string;
            TransferConditionExemptionsRemoved: string;
        };
    };
    /**
     * Lookup257: polymesh_primitives::statistics::AssetScope
     **/
    PolymeshPrimitivesStatisticsAssetScope: {
        _enum: {
            Ticker: string;
        };
    };
    /**
     * Lookup259: polymesh_primitives::statistics::StatType
     **/
    PolymeshPrimitivesStatisticsStatType: {
        op: string;
        claimIssuer: string;
    };
    /**
     * Lookup260: polymesh_primitives::statistics::StatOpType
     **/
    PolymeshPrimitivesStatisticsStatOpType: {
        _enum: string[];
    };
    /**
     * Lookup264: polymesh_primitives::statistics::StatUpdate
     **/
    PolymeshPrimitivesStatisticsStatUpdate: {
        key2: string;
        value: string;
    };
    /**
     * Lookup265: polymesh_primitives::statistics::Stat2ndKey
     **/
    PolymeshPrimitivesStatisticsStat2ndKey: {
        _enum: {
            NoClaimStat: string;
            Claim: string;
        };
    };
    /**
     * Lookup266: polymesh_primitives::statistics::StatClaim
     **/
    PolymeshPrimitivesStatisticsStatClaim: {
        _enum: {
            Accredited: string;
            Affiliate: string;
            Jurisdiction: string;
        };
    };
    /**
     * Lookup270: polymesh_primitives::transfer_compliance::TransferCondition
     **/
    PolymeshPrimitivesTransferComplianceTransferCondition: {
        _enum: {
            MaxInvestorCount: string;
            MaxInvestorOwnership: string;
            ClaimCount: string;
            ClaimOwnership: string;
        };
    };
    /**
     * Lookup271: polymesh_primitives::transfer_compliance::TransferConditionExemptKey
     **/
    PolymeshPrimitivesTransferComplianceTransferConditionExemptKey: {
        asset: string;
        op: string;
        claimType: string;
    };
    /**
     * Lookup273: pallet_sto::RawEvent<Moment>
     **/
    PalletStoRawEvent: {
        _enum: {
            FundraiserCreated: string;
            Invested: string;
            FundraiserFrozen: string;
            FundraiserUnfrozen: string;
            FundraiserWindowModified: string;
            FundraiserClosed: string;
        };
    };
    /**
     * Lookup276: pallet_sto::Fundraiser<Moment>
     **/
    PalletStoFundraiser: {
        creator: string;
        offeringPortfolio: string;
        offeringAsset: string;
        raisingPortfolio: string;
        raisingAsset: string;
        tiers: string;
        venueId: string;
        start: string;
        end: string;
        status: string;
        minimumInvestment: string;
    };
    /**
     * Lookup278: pallet_sto::FundraiserTier
     **/
    PalletStoFundraiserTier: {
        total: string;
        price: string;
        remaining: string;
    };
    /**
     * Lookup279: pallet_sto::FundraiserStatus
     **/
    PalletStoFundraiserStatus: {
        _enum: string[];
    };
    /**
     * Lookup280: pallet_treasury::RawEvent<Balance, sp_core::crypto::AccountId32>
     **/
    PalletTreasuryRawEvent: {
        _enum: {
            TreasuryDisbursement: string;
            TreasuryDisbursementFailed: string;
            TreasuryReimbursement: string;
        };
    };
    /**
     * Lookup281: pallet_utility::pallet::Event<T>
     **/
    PalletUtilityEvent: {
        _enum: {
            BatchInterrupted: {
                index: string;
                error: string;
            };
            BatchCompleted: string;
            BatchCompletedWithErrors: string;
            ItemCompleted: string;
            ItemFailed: {
                error: string;
            };
            DispatchedAs: {
                result: string;
            };
            RelayedTx: {
                callerDid: string;
                target: string;
                result: string;
            };
            BatchInterruptedOld: string;
            BatchOptimisticFailed: string;
            BatchCompletedOld: string;
        };
    };
    /**
     * Lookup285: polymesh_common_utilities::traits::base::Event
     **/
    PolymeshCommonUtilitiesBaseEvent: {
        _enum: {
            UnexpectedError: string;
        };
    };
    /**
     * Lookup287: polymesh_common_utilities::traits::external_agents::Event
     **/
    PolymeshCommonUtilitiesExternalAgentsEvent: {
        _enum: {
            GroupCreated: string;
            GroupPermissionsUpdated: string;
            AgentAdded: string;
            AgentRemoved: string;
            GroupChanged: string;
        };
    };
    /**
     * Lookup288: polymesh_common_utilities::traits::relayer::RawEvent<sp_core::crypto::AccountId32>
     **/
    PolymeshCommonUtilitiesRelayerRawEvent: {
        _enum: {
            AuthorizedPayingKey: string;
            AcceptedPayingKey: string;
            RemovedPayingKey: string;
            UpdatedPolyxLimit: string;
        };
    };
    /**
     * Lookup289: pallet_rewards::RawEvent<sp_core::crypto::AccountId32>
     **/
    PalletRewardsRawEvent: {
        _enum: {
            ItnRewardClaimed: string;
        };
    };
    /**
     * Lookup290: pallet_contracts::pallet::Event<T>
     **/
    PalletContractsEvent: {
        _enum: {
            Instantiated: {
                deployer: string;
                contract: string;
            };
            Terminated: {
                contract: string;
                beneficiary: string;
            };
            CodeStored: {
                codeHash: string;
            };
            ContractEmitted: {
                contract: string;
                data: string;
            };
            CodeRemoved: {
                codeHash: string;
            };
            ContractCodeUpdated: {
                contract: string;
                newCodeHash: string;
                oldCodeHash: string;
            };
            Called: {
                caller: string;
                contract: string;
            };
            DelegateCalled: {
                contract: string;
                codeHash: string;
            };
        };
    };
    /**
     * Lookup291: polymesh_contracts::Event
     **/
    PolymeshContractsEvent: string;
    /**
     * Lookup292: pallet_preimage::pallet::Event<T>
     **/
    PalletPreimageEvent: {
        _enum: {
            Noted: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
            Requested: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
            Cleared: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
        };
    };
    /**
     * Lookup293: polymesh_common_utilities::traits::nft::Event
     **/
    PolymeshCommonUtilitiesNftEvent: {
        _enum: {
            NftCollectionCreated: string;
            NFTPortfolioUpdated: string;
        };
    };
    /**
     * Lookup295: pallet_test_utils::RawEvent<sp_core::crypto::AccountId32>
     **/
    PalletTestUtilsRawEvent: {
        _enum: {
            DidStatus: string;
            CddStatus: string;
        };
    };
    /**
     * Lookup296: frame_system::Phase
     **/
    FrameSystemPhase: {
        _enum: {
            ApplyExtrinsic: string;
            Finalization: string;
            Initialization: string;
        };
    };
    /**
     * Lookup299: frame_system::LastRuntimeUpgradeInfo
     **/
    FrameSystemLastRuntimeUpgradeInfo: {
        specVersion: string;
        specName: string;
    };
    /**
     * Lookup302: frame_system::pallet::Call<T>
     **/
    FrameSystemCall: {
        _enum: {
            remark: {
                remark: string;
            };
            set_heap_pages: {
                pages: string;
            };
            set_code: {
                code: string;
            };
            set_code_without_checks: {
                code: string;
            };
            set_storage: {
                items: string;
            };
            kill_storage: {
                _alias: {
                    keys_: string;
                };
                keys_: string;
            };
            kill_prefix: {
                prefix: string;
                subkeys: string;
            };
            remark_with_event: {
                remark: string;
            };
        };
    };
    /**
     * Lookup306: frame_system::limits::BlockWeights
     **/
    FrameSystemLimitsBlockWeights: {
        baseBlock: string;
        maxBlock: string;
        perClass: string;
    };
    /**
     * Lookup307: frame_support::dispatch::PerDispatchClass<frame_system::limits::WeightsPerClass>
     **/
    FrameSupportDispatchPerDispatchClassWeightsPerClass: {
        normal: string;
        operational: string;
        mandatory: string;
    };
    /**
     * Lookup308: frame_system::limits::WeightsPerClass
     **/
    FrameSystemLimitsWeightsPerClass: {
        baseExtrinsic: string;
        maxExtrinsic: string;
        maxTotal: string;
        reserved: string;
    };
    /**
     * Lookup310: frame_system::limits::BlockLength
     **/
    FrameSystemLimitsBlockLength: {
        max: string;
    };
    /**
     * Lookup311: frame_support::dispatch::PerDispatchClass<T>
     **/
    FrameSupportDispatchPerDispatchClassU32: {
        normal: string;
        operational: string;
        mandatory: string;
    };
    /**
     * Lookup312: sp_weights::RuntimeDbWeight
     **/
    SpWeightsRuntimeDbWeight: {
        read: string;
        write: string;
    };
    /**
     * Lookup313: sp_version::RuntimeVersion
     **/
    SpVersionRuntimeVersion: {
        specName: string;
        implName: string;
        authoringVersion: string;
        specVersion: string;
        implVersion: string;
        apis: string;
        transactionVersion: string;
        stateVersion: string;
    };
    /**
     * Lookup318: frame_system::pallet::Error<T>
     **/
    FrameSystemError: {
        _enum: string[];
    };
    /**
     * Lookup321: sp_consensus_babe::app::Public
     **/
    SpConsensusBabeAppPublic: string;
    /**
     * Lookup324: sp_consensus_babe::digests::NextConfigDescriptor
     **/
    SpConsensusBabeDigestsNextConfigDescriptor: {
        _enum: {
            __Unused0: string;
            V1: {
                c: string;
                allowedSlots: string;
            };
        };
    };
    /**
     * Lookup326: sp_consensus_babe::AllowedSlots
     **/
    SpConsensusBabeAllowedSlots: {
        _enum: string[];
    };
    /**
     * Lookup330: sp_consensus_babe::digests::PreDigest
     **/
    SpConsensusBabeDigestsPreDigest: {
        _enum: {
            __Unused0: string;
            Primary: string;
            SecondaryPlain: string;
            SecondaryVRF: string;
        };
    };
    /**
     * Lookup331: sp_consensus_babe::digests::PrimaryPreDigest
     **/
    SpConsensusBabeDigestsPrimaryPreDigest: {
        authorityIndex: string;
        slot: string;
        vrfOutput: string;
        vrfProof: string;
    };
    /**
     * Lookup332: sp_consensus_babe::digests::SecondaryPlainPreDigest
     **/
    SpConsensusBabeDigestsSecondaryPlainPreDigest: {
        authorityIndex: string;
        slot: string;
    };
    /**
     * Lookup333: sp_consensus_babe::digests::SecondaryVRFPreDigest
     **/
    SpConsensusBabeDigestsSecondaryVRFPreDigest: {
        authorityIndex: string;
        slot: string;
        vrfOutput: string;
        vrfProof: string;
    };
    /**
     * Lookup334: sp_consensus_babe::BabeEpochConfiguration
     **/
    SpConsensusBabeBabeEpochConfiguration: {
        c: string;
        allowedSlots: string;
    };
    /**
     * Lookup338: pallet_babe::pallet::Call<T>
     **/
    PalletBabeCall: {
        _enum: {
            report_equivocation: {
                equivocationProof: string;
                keyOwnerProof: string;
            };
            report_equivocation_unsigned: {
                equivocationProof: string;
                keyOwnerProof: string;
            };
            plan_config_change: {
                config: string;
            };
        };
    };
    /**
     * Lookup339: sp_consensus_slots::EquivocationProof<sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>, sp_consensus_babe::app::Public>
     **/
    SpConsensusSlotsEquivocationProof: {
        offender: string;
        slot: string;
        firstHeader: string;
        secondHeader: string;
    };
    /**
     * Lookup340: sp_runtime::generic::header::Header<Number, sp_runtime::traits::BlakeTwo256>
     **/
    SpRuntimeHeader: {
        parentHash: string;
        number: string;
        stateRoot: string;
        extrinsicsRoot: string;
        digest: string;
    };
    /**
     * Lookup341: sp_runtime::traits::BlakeTwo256
     **/
    SpRuntimeBlakeTwo256: string;
    /**
     * Lookup342: sp_session::MembershipProof
     **/
    SpSessionMembershipProof: {
        session: string;
        trieNodes: string;
        validatorCount: string;
    };
    /**
     * Lookup343: pallet_babe::pallet::Error<T>
     **/
    PalletBabeError: {
        _enum: string[];
    };
    /**
     * Lookup344: pallet_timestamp::pallet::Call<T>
     **/
    PalletTimestampCall: {
        _enum: {
            set: {
                now: string;
            };
        };
    };
    /**
     * Lookup346: pallet_indices::pallet::Call<T>
     **/
    PalletIndicesCall: {
        _enum: {
            claim: {
                index: string;
            };
            transfer: {
                _alias: {
                    new_: string;
                };
                new_: string;
                index: string;
            };
            free: {
                index: string;
            };
            force_transfer: {
                _alias: {
                    new_: string;
                };
                new_: string;
                index: string;
                freeze: string;
            };
            freeze: {
                index: string;
            };
        };
    };
    /**
     * Lookup348: pallet_indices::pallet::Error<T>
     **/
    PalletIndicesError: {
        _enum: string[];
    };
    /**
     * Lookup350: pallet_balances::BalanceLock<Balance>
     **/
    PalletBalancesBalanceLock: {
        id: string;
        amount: string;
        reasons: string;
    };
    /**
     * Lookup351: polymesh_common_utilities::traits::balances::Reasons
     **/
    PolymeshCommonUtilitiesBalancesReasons: {
        _enum: string[];
    };
    /**
     * Lookup352: pallet_balances::Call<T>
     **/
    PalletBalancesCall: {
        _enum: {
            transfer: {
                dest: string;
                value: string;
            };
            transfer_with_memo: {
                dest: string;
                value: string;
                memo: string;
            };
            deposit_block_reward_reserve_balance: {
                value: string;
            };
            set_balance: {
                who: string;
                newFree: string;
                newReserved: string;
            };
            force_transfer: {
                source: string;
                dest: string;
                value: string;
            };
            burn_account_balance: {
                amount: string;
            };
        };
    };
    /**
     * Lookup353: pallet_balances::Error<T>
     **/
    PalletBalancesError: {
        _enum: string[];
    };
    /**
     * Lookup355: pallet_transaction_payment::Releases
     **/
    PalletTransactionPaymentReleases: {
        _enum: string[];
    };
    /**
     * Lookup357: sp_weights::WeightToFeeCoefficient<Balance>
     **/
    SpWeightsWeightToFeeCoefficient: {
        coeffInteger: string;
        coeffFrac: string;
        negative: string;
        degree: string;
    };
    /**
     * Lookup358: polymesh_primitives::identity::DidRecord<sp_core::crypto::AccountId32>
     **/
    PolymeshPrimitivesIdentityDidRecord: {
        primaryKey: string;
    };
    /**
     * Lookup360: pallet_identity::types::Claim1stKey
     **/
    PalletIdentityClaim1stKey: {
        target: string;
        claimType: string;
    };
    /**
     * Lookup361: pallet_identity::types::Claim2ndKey
     **/
    PalletIdentityClaim2ndKey: {
        issuer: string;
        scope: string;
    };
    /**
     * Lookup362: polymesh_primitives::secondary_key::KeyRecord<sp_core::crypto::AccountId32>
     **/
    PolymeshPrimitivesSecondaryKeyKeyRecord: {
        _enum: {
            PrimaryKey: string;
            SecondaryKey: string;
            MultiSigSignerKey: string;
        };
    };
    /**
     * Lookup365: polymesh_primitives::authorization::Authorization<sp_core::crypto::AccountId32, Moment>
     **/
    PolymeshPrimitivesAuthorization: {
        authorizationData: string;
        authorizedBy: string;
        expiry: string;
        authId: string;
        count: string;
    };
    /**
     * Lookup368: pallet_identity::Call<T>
     **/
    PalletIdentityCall: {
        _enum: {
            cdd_register_did: {
                targetAccount: string;
                secondaryKeys: string;
            };
            invalidate_cdd_claims: {
                cdd: string;
                disableFrom: string;
                expiry: string;
            };
            accept_primary_key: {
                rotationAuthId: string;
                optionalCddAuthId: string;
            };
            change_cdd_requirement_for_mk_rotation: {
                authRequired: string;
            };
            join_identity_as_key: {
                authId: string;
            };
            leave_identity_as_key: string;
            add_claim: {
                target: string;
                claim: string;
                expiry: string;
            };
            revoke_claim: {
                target: string;
                claim: string;
            };
            freeze_secondary_keys: string;
            unfreeze_secondary_keys: string;
            add_authorization: {
                target: string;
                data: string;
                expiry: string;
            };
            remove_authorization: {
                target: string;
                authId: string;
                authIssuerPays: string;
            };
            gc_add_cdd_claim: {
                target: string;
            };
            gc_revoke_cdd_claim: {
                target: string;
            };
            revoke_claim_by_index: {
                target: string;
                claimType: string;
                scope: string;
            };
            rotate_primary_key_to_secondary: {
                authId: string;
                optionalCddAuthId: string;
            };
            add_secondary_keys_with_authorization: {
                additionalKeys: string;
                expiresAt: string;
            };
            set_secondary_key_permissions: {
                key: string;
                perms: string;
            };
            remove_secondary_keys: {
                keysToRemove: string;
            };
            register_custom_claim_type: {
                ty: string;
            };
            cdd_register_did_with_cdd: {
                targetAccount: string;
                secondaryKeys: string;
                expiry: string;
            };
            create_child_identity: {
                secondaryKey: string;
            };
            create_child_identities: {
                childKeys: string;
                expiresAt: string;
            };
            unlink_child_identity: {
                childDid: string;
            };
        };
    };
    /**
     * Lookup370: polymesh_common_utilities::traits::identity::SecondaryKeyWithAuth<sp_core::crypto::AccountId32>
     **/
    PolymeshCommonUtilitiesIdentitySecondaryKeyWithAuth: {
        secondaryKey: string;
        authSignature: string;
    };
    /**
     * Lookup373: polymesh_common_utilities::traits::identity::CreateChildIdentityWithAuth<sp_core::crypto::AccountId32>
     **/
    PolymeshCommonUtilitiesIdentityCreateChildIdentityWithAuth: {
        key: string;
        authSignature: string;
    };
    /**
     * Lookup374: pallet_identity::Error<T>
     **/
    PalletIdentityError: {
        _enum: string[];
    };
    /**
     * Lookup376: polymesh_common_utilities::traits::group::InactiveMember<Moment>
     **/
    PolymeshCommonUtilitiesGroupInactiveMember: {
        id: string;
        deactivatedAt: string;
        expiry: string;
    };
    /**
     * Lookup377: pallet_group::Call<T, I>
     **/
    PalletGroupCall: {
        _enum: {
            set_active_members_limit: {
                limit: string;
            };
            disable_member: {
                who: string;
                expiry: string;
                at: string;
            };
            add_member: {
                who: string;
            };
            remove_member: {
                who: string;
            };
            swap_member: {
                remove: string;
                add: string;
            };
            reset_members: {
                members: string;
            };
            abdicate_membership: string;
        };
    };
    /**
     * Lookup378: pallet_group::Error<T, I>
     **/
    PalletGroupError: {
        _enum: string[];
    };
    /**
     * Lookup380: pallet_committee::Call<T, I>
     **/
    PalletCommitteeCall: {
        _enum: {
            set_vote_threshold: {
                n: string;
                d: string;
            };
            set_release_coordinator: {
                id: string;
            };
            set_expires_after: {
                expiry: string;
            };
            vote_or_propose: {
                approve: string;
                call: string;
            };
            vote: {
                proposal: string;
                index: string;
                approve: string;
            };
        };
    };
    /**
     * Lookup386: pallet_multisig::Call<T>
     **/
    PalletMultisigCall: {
        _enum: {
            create_multisig: {
                signers: string;
                sigsRequired: string;
            };
            create_or_approve_proposal_as_identity: {
                multisig: string;
                proposal: string;
                expiry: string;
                autoClose: string;
            };
            create_or_approve_proposal_as_key: {
                multisig: string;
                proposal: string;
                expiry: string;
                autoClose: string;
            };
            create_proposal_as_identity: {
                multisig: string;
                proposal: string;
                expiry: string;
                autoClose: string;
            };
            create_proposal_as_key: {
                multisig: string;
                proposal: string;
                expiry: string;
                autoClose: string;
            };
            approve_as_identity: {
                multisig: string;
                proposalId: string;
            };
            approve_as_key: {
                multisig: string;
                proposalId: string;
            };
            reject_as_identity: {
                multisig: string;
                proposalId: string;
            };
            reject_as_key: {
                multisig: string;
                proposalId: string;
            };
            accept_multisig_signer_as_identity: {
                authId: string;
            };
            accept_multisig_signer_as_key: {
                authId: string;
            };
            add_multisig_signer: {
                signer: string;
            };
            remove_multisig_signer: {
                signer: string;
            };
            add_multisig_signers_via_creator: {
                multisig: string;
                signers: string;
            };
            remove_multisig_signers_via_creator: {
                multisig: string;
                signers: string;
            };
            change_sigs_required: {
                sigsRequired: string;
            };
            make_multisig_secondary: {
                multisig: string;
            };
            make_multisig_primary: {
                multisig: string;
                optionalCddAuthId: string;
            };
            execute_scheduled_proposal: {
                multisig: string;
                proposalId: string;
                multisigDid: string;
                proposalWeight: string;
            };
            change_sigs_required_via_creator: {
                multisigAccount: string;
                signaturesRequired: string;
            };
            remove_creator_controls: {
                multisigAccount: string;
            };
        };
    };
    /**
     * Lookup387: pallet_bridge::Call<T>
     **/
    PalletBridgeCall: {
        _enum: {
            change_controller: {
                controller: string;
            };
            change_admin: {
                admin: string;
            };
            change_timelock: {
                timelock: string;
            };
            freeze: string;
            unfreeze: string;
            change_bridge_limit: {
                amount: string;
                duration: string;
            };
            change_bridge_exempted: {
                exempted: string;
            };
            force_handle_bridge_tx: {
                bridgeTx: string;
            };
            batch_propose_bridge_tx: {
                bridgeTxs: string;
            };
            propose_bridge_tx: {
                bridgeTx: string;
            };
            handle_bridge_tx: {
                bridgeTx: string;
            };
            freeze_txs: {
                bridgeTxs: string;
            };
            unfreeze_txs: {
                bridgeTxs: string;
            };
            handle_scheduled_bridge_tx: {
                bridgeTx: string;
            };
            add_freeze_admin: {
                freezeAdmin: string;
            };
            remove_freeze_admin: {
                freezeAdmin: string;
            };
            remove_txs: {
                bridgeTxs: string;
            };
        };
    };
    /**
     * Lookup391: pallet_staking::Call<T>
     **/
    PalletStakingCall: {
        _enum: {
            bond: {
                controller: string;
                value: string;
                payee: string;
            };
            bond_extra: {
                maxAdditional: string;
            };
            unbond: {
                value: string;
            };
            withdraw_unbonded: {
                numSlashingSpans: string;
            };
            validate: {
                prefs: string;
            };
            nominate: {
                targets: string;
            };
            chill: string;
            set_payee: {
                payee: string;
            };
            set_controller: {
                controller: string;
            };
            set_validator_count: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            increase_validator_count: {
                additional: string;
            };
            scale_validator_count: {
                factor: string;
            };
            add_permissioned_validator: {
                identity: string;
                intendedCount: string;
            };
            remove_permissioned_validator: {
                identity: string;
            };
            validate_cdd_expiry_nominators: {
                targets: string;
            };
            set_commission_cap: {
                newCap: string;
            };
            set_min_bond_threshold: {
                newValue: string;
            };
            force_no_eras: string;
            force_new_era: string;
            set_invulnerables: {
                invulnerables: string;
            };
            force_unstake: {
                stash: string;
                numSlashingSpans: string;
            };
            force_new_era_always: string;
            cancel_deferred_slash: {
                era: string;
                slashIndices: string;
            };
            payout_stakers: {
                validatorStash: string;
                era: string;
            };
            rebond: {
                value: string;
            };
            set_history_depth: {
                newHistoryDepth: string;
                eraItemsDeleted: string;
            };
            reap_stash: {
                stash: string;
                numSlashingSpans: string;
            };
            submit_election_solution: {
                _alias: {
                    size_: string;
                };
                winners: string;
                compact: string;
                score: string;
                era: string;
                size_: string;
            };
            submit_election_solution_unsigned: {
                _alias: {
                    size_: string;
                };
                winners: string;
                compact: string;
                score: string;
                era: string;
                size_: string;
            };
            payout_stakers_by_system: {
                validatorStash: string;
                era: string;
            };
            change_slashing_allowed_for: {
                slashingSwitch: string;
            };
            update_permissioned_validator_intended_count: {
                identity: string;
                newIntendedCount: string;
            };
            chill_from_governance: {
                identity: string;
                stashKeys: string;
            };
        };
    };
    /**
     * Lookup392: pallet_staking::RewardDestination<sp_core::crypto::AccountId32>
     **/
    PalletStakingRewardDestination: {
        _enum: {
            Staked: string;
            Stash: string;
            Controller: string;
            Account: string;
        };
    };
    /**
     * Lookup393: pallet_staking::ValidatorPrefs
     **/
    PalletStakingValidatorPrefs: {
        commission: string;
        blocked: string;
    };
    /**
     * Lookup399: pallet_staking::CompactAssignments
     **/
    PalletStakingCompactAssignments: {
        votes1: string;
        votes2: string;
        votes3: string;
        votes4: string;
        votes5: string;
        votes6: string;
        votes7: string;
        votes8: string;
        votes9: string;
        votes10: string;
        votes11: string;
        votes12: string;
        votes13: string;
        votes14: string;
        votes15: string;
        votes16: string;
    };
    /**
     * Lookup450: sp_npos_elections::ElectionScore
     **/
    SpNposElectionsElectionScore: {
        minimalStake: string;
        sumStake: string;
        sumStakeSquared: string;
    };
    /**
     * Lookup451: pallet_staking::ElectionSize
     **/
    PalletStakingElectionSize: {
        validators: string;
        nominators: string;
    };
    /**
     * Lookup452: pallet_session::pallet::Call<T>
     **/
    PalletSessionCall: {
        _enum: {
            set_keys: {
                _alias: {
                    keys_: string;
                };
                keys_: string;
                proof: string;
            };
            purge_keys: string;
        };
    };
    /**
     * Lookup453: polymesh_runtime_develop::runtime::SessionKeys
     **/
    PolymeshRuntimeDevelopRuntimeSessionKeys: {
        grandpa: string;
        babe: string;
        imOnline: string;
        authorityDiscovery: string;
    };
    /**
     * Lookup454: sp_authority_discovery::app::Public
     **/
    SpAuthorityDiscoveryAppPublic: string;
    /**
     * Lookup455: pallet_grandpa::pallet::Call<T>
     **/
    PalletGrandpaCall: {
        _enum: {
            report_equivocation: {
                equivocationProof: string;
                keyOwnerProof: string;
            };
            report_equivocation_unsigned: {
                equivocationProof: string;
                keyOwnerProof: string;
            };
            note_stalled: {
                delay: string;
                bestFinalizedBlockNumber: string;
            };
        };
    };
    /**
     * Lookup456: sp_consensus_grandpa::EquivocationProof<primitive_types::H256, N>
     **/
    SpConsensusGrandpaEquivocationProof: {
        setId: string;
        equivocation: string;
    };
    /**
     * Lookup457: sp_consensus_grandpa::Equivocation<primitive_types::H256, N>
     **/
    SpConsensusGrandpaEquivocation: {
        _enum: {
            Prevote: string;
            Precommit: string;
        };
    };
    /**
     * Lookup458: finality_grandpa::Equivocation<sp_consensus_grandpa::app::Public, finality_grandpa::Prevote<primitive_types::H256, N>, sp_consensus_grandpa::app::Signature>
     **/
    FinalityGrandpaEquivocationPrevote: {
        roundNumber: string;
        identity: string;
        first: string;
        second: string;
    };
    /**
     * Lookup459: finality_grandpa::Prevote<primitive_types::H256, N>
     **/
    FinalityGrandpaPrevote: {
        targetHash: string;
        targetNumber: string;
    };
    /**
     * Lookup460: sp_consensus_grandpa::app::Signature
     **/
    SpConsensusGrandpaAppSignature: string;
    /**
     * Lookup461: sp_core::ed25519::Signature
     **/
    SpCoreEd25519Signature: string;
    /**
     * Lookup463: finality_grandpa::Equivocation<sp_consensus_grandpa::app::Public, finality_grandpa::Precommit<primitive_types::H256, N>, sp_consensus_grandpa::app::Signature>
     **/
    FinalityGrandpaEquivocationPrecommit: {
        roundNumber: string;
        identity: string;
        first: string;
        second: string;
    };
    /**
     * Lookup464: finality_grandpa::Precommit<primitive_types::H256, N>
     **/
    FinalityGrandpaPrecommit: {
        targetHash: string;
        targetNumber: string;
    };
    /**
     * Lookup466: pallet_im_online::pallet::Call<T>
     **/
    PalletImOnlineCall: {
        _enum: {
            heartbeat: {
                heartbeat: string;
                signature: string;
            };
        };
    };
    /**
     * Lookup467: pallet_im_online::Heartbeat<BlockNumber>
     **/
    PalletImOnlineHeartbeat: {
        blockNumber: string;
        networkState: string;
        sessionIndex: string;
        authorityIndex: string;
        validatorsLen: string;
    };
    /**
     * Lookup468: sp_core::offchain::OpaqueNetworkState
     **/
    SpCoreOffchainOpaqueNetworkState: {
        peerId: string;
        externalAddresses: string;
    };
    /**
     * Lookup472: pallet_im_online::sr25519::app_sr25519::Signature
     **/
    PalletImOnlineSr25519AppSr25519Signature: string;
    /**
     * Lookup473: sp_core::sr25519::Signature
     **/
    SpCoreSr25519Signature: string;
    /**
     * Lookup474: pallet_sudo::Call<T>
     **/
    PalletSudoCall: {
        _enum: {
            sudo: {
                call: string;
            };
            sudo_unchecked_weight: {
                call: string;
                weight: string;
            };
            set_key: {
                _alias: {
                    new_: string;
                };
                new_: string;
            };
            sudo_as: {
                who: string;
                call: string;
            };
        };
    };
    /**
     * Lookup475: pallet_asset::Call<T>
     **/
    PalletAssetCall: {
        _enum: {
            register_ticker: {
                ticker: string;
            };
            accept_ticker_transfer: {
                authId: string;
            };
            accept_asset_ownership_transfer: {
                authId: string;
            };
            create_asset: {
                name: string;
                ticker: string;
                divisible: string;
                assetType: string;
                identifiers: string;
                fundingRound: string;
            };
            freeze: {
                ticker: string;
            };
            unfreeze: {
                ticker: string;
            };
            rename_asset: {
                ticker: string;
                name: string;
            };
            issue: {
                ticker: string;
                amount: string;
                portfolioKind: string;
            };
            redeem: {
                ticker: string;
                value: string;
            };
            make_divisible: {
                ticker: string;
            };
            add_documents: {
                docs: string;
                ticker: string;
            };
            remove_documents: {
                ids: string;
                ticker: string;
            };
            set_funding_round: {
                ticker: string;
                name: string;
            };
            update_identifiers: {
                ticker: string;
                identifiers: string;
            };
            controller_transfer: {
                ticker: string;
                value: string;
                fromPortfolio: string;
            };
            register_custom_asset_type: {
                ty: string;
            };
            create_asset_with_custom_type: {
                name: string;
                ticker: string;
                divisible: string;
                customAssetType: string;
                identifiers: string;
                fundingRound: string;
            };
            set_asset_metadata: {
                ticker: string;
                key: string;
                value: string;
                detail: string;
            };
            set_asset_metadata_details: {
                ticker: string;
                key: string;
                detail: string;
            };
            register_and_set_local_asset_metadata: {
                ticker: string;
                name: string;
                spec: string;
                value: string;
                detail: string;
            };
            register_asset_metadata_local_type: {
                ticker: string;
                name: string;
                spec: string;
            };
            register_asset_metadata_global_type: {
                name: string;
                spec: string;
            };
            redeem_from_portfolio: {
                ticker: string;
                value: string;
                portfolio: string;
            };
            update_asset_type: {
                ticker: string;
                assetType: string;
            };
            remove_local_metadata_key: {
                ticker: string;
                localKey: string;
            };
            remove_metadata_value: {
                ticker: string;
                metadataKey: string;
            };
            exempt_ticker_affirmation: {
                ticker: string;
            };
            remove_ticker_affirmation_exemption: {
                ticker: string;
            };
            pre_approve_ticker: {
                ticker: string;
            };
            remove_ticker_pre_approval: {
                ticker: string;
            };
        };
    };
    /**
     * Lookup477: pallet_corporate_actions::distribution::Call<T>
     **/
    PalletCorporateActionsDistributionCall: {
        _enum: {
            distribute: {
                caId: string;
                portfolio: string;
                currency: string;
                perShare: string;
                amount: string;
                paymentAt: string;
                expiresAt: string;
            };
            claim: {
                caId: string;
            };
            push_benefit: {
                caId: string;
                holder: string;
            };
            reclaim: {
                caId: string;
            };
            remove_distribution: {
                caId: string;
            };
        };
    };
    /**
     * Lookup479: pallet_asset::checkpoint::Call<T>
     **/
    PalletAssetCheckpointCall: {
        _enum: {
            create_checkpoint: {
                ticker: string;
            };
            set_schedules_max_complexity: {
                maxComplexity: string;
            };
            create_schedule: {
                ticker: string;
                schedule: string;
            };
            remove_schedule: {
                ticker: string;
                id: string;
            };
        };
    };
    /**
     * Lookup480: pallet_compliance_manager::Call<T>
     **/
    PalletComplianceManagerCall: {
        _enum: {
            add_compliance_requirement: {
                ticker: string;
                senderConditions: string;
                receiverConditions: string;
            };
            remove_compliance_requirement: {
                ticker: string;
                id: string;
            };
            replace_asset_compliance: {
                ticker: string;
                assetCompliance: string;
            };
            reset_asset_compliance: {
                ticker: string;
            };
            pause_asset_compliance: {
                ticker: string;
            };
            resume_asset_compliance: {
                ticker: string;
            };
            add_default_trusted_claim_issuer: {
                ticker: string;
                issuer: string;
            };
            remove_default_trusted_claim_issuer: {
                ticker: string;
                issuer: string;
            };
            change_compliance_requirement: {
                ticker: string;
                newReq: string;
            };
        };
    };
    /**
     * Lookup481: pallet_corporate_actions::Call<T>
     **/
    PalletCorporateActionsCall: {
        _enum: {
            set_max_details_length: {
                length: string;
            };
            set_default_targets: {
                ticker: string;
                targets: string;
            };
            set_default_withholding_tax: {
                ticker: string;
                tax: string;
            };
            set_did_withholding_tax: {
                ticker: string;
                taxedDid: string;
                tax: string;
            };
            initiate_corporate_action: {
                ticker: string;
                kind: string;
                declDate: string;
                recordDate: string;
                details: string;
                targets: string;
                defaultWithholdingTax: string;
                withholdingTax: string;
            };
            link_ca_doc: {
                id: string;
                docs: string;
            };
            remove_ca: {
                caId: string;
            };
            change_record_date: {
                caId: string;
                recordDate: string;
            };
            initiate_corporate_action_and_distribute: {
                caArgs: string;
                portfolio: string;
                currency: string;
                perShare: string;
                amount: string;
                paymentAt: string;
                expiresAt: string;
            };
        };
    };
    /**
     * Lookup483: pallet_corporate_actions::RecordDateSpec
     **/
    PalletCorporateActionsRecordDateSpec: {
        _enum: {
            Scheduled: string;
            ExistingSchedule: string;
            Existing: string;
        };
    };
    /**
     * Lookup486: pallet_corporate_actions::InitiateCorporateActionArgs
     **/
    PalletCorporateActionsInitiateCorporateActionArgs: {
        ticker: string;
        kind: string;
        declDate: string;
        recordDate: string;
        details: string;
        targets: string;
        defaultWithholdingTax: string;
        withholdingTax: string;
    };
    /**
     * Lookup487: pallet_corporate_actions::ballot::Call<T>
     **/
    PalletCorporateActionsBallotCall: {
        _enum: {
            attach_ballot: {
                caId: string;
                range: string;
                meta: string;
                rcv: string;
            };
            vote: {
                caId: string;
                votes: string;
            };
            change_end: {
                caId: string;
                end: string;
            };
            change_meta: {
                caId: string;
                meta: string;
            };
            change_rcv: {
                caId: string;
                rcv: string;
            };
            remove_ballot: {
                caId: string;
            };
        };
    };
    /**
     * Lookup488: pallet_pips::Call<T>
     **/
    PalletPipsCall: {
        _enum: {
            set_prune_historical_pips: {
                prune: string;
            };
            set_min_proposal_deposit: {
                deposit: string;
            };
            set_default_enactment_period: {
                duration: string;
            };
            set_pending_pip_expiry: {
                expiry: string;
            };
            set_max_pip_skip_count: {
                max: string;
            };
            set_active_pip_limit: {
                limit: string;
            };
            propose: {
                proposal: string;
                deposit: string;
                url: string;
                description: string;
            };
            vote: {
                id: string;
                ayeOrNay: string;
                deposit: string;
            };
            approve_committee_proposal: {
                id: string;
            };
            reject_proposal: {
                id: string;
            };
            prune_proposal: {
                id: string;
            };
            reschedule_execution: {
                id: string;
                until: string;
            };
            clear_snapshot: string;
            snapshot: string;
            enact_snapshot_results: {
                results: string;
            };
            execute_scheduled_pip: {
                id: string;
            };
            expire_scheduled_pip: {
                did: string;
                id: string;
            };
        };
    };
    /**
     * Lookup491: pallet_pips::SnapshotResult
     **/
    PalletPipsSnapshotResult: {
        _enum: string[];
    };
    /**
     * Lookup492: pallet_portfolio::Call<T>
     **/
    PalletPortfolioCall: {
        _enum: {
            create_portfolio: {
                name: string;
            };
            delete_portfolio: {
                num: string;
            };
            rename_portfolio: {
                num: string;
                toName: string;
            };
            quit_portfolio_custody: {
                pid: string;
            };
            accept_portfolio_custody: {
                authId: string;
            };
            move_portfolio_funds: {
                from: string;
                to: string;
                funds: string;
            };
            pre_approve_portfolio: {
                ticker: string;
                portfolioId: string;
            };
            remove_portfolio_pre_approval: {
                ticker: string;
                portfolioId: string;
            };
        };
    };
    /**
     * Lookup494: polymesh_primitives::portfolio::Fund
     **/
    PolymeshPrimitivesPortfolioFund: {
        description: string;
        memo: string;
    };
    /**
     * Lookup495: pallet_protocol_fee::Call<T>
     **/
    PalletProtocolFeeCall: {
        _enum: {
            change_coefficient: {
                coefficient: string;
            };
            change_base_fee: {
                op: string;
                baseFee: string;
            };
        };
    };
    /**
     * Lookup496: polymesh_common_utilities::protocol_fee::ProtocolOp
     **/
    PolymeshCommonUtilitiesProtocolFeeProtocolOp: {
        _enum: string[];
    };
    /**
     * Lookup497: pallet_scheduler::pallet::Call<T>
     **/
    PalletSchedulerCall: {
        _enum: {
            schedule: {
                when: string;
                maybePeriodic: string;
                priority: string;
                call: string;
            };
            cancel: {
                when: string;
                index: string;
            };
            schedule_named: {
                id: string;
                when: string;
                maybePeriodic: string;
                priority: string;
                call: string;
            };
            cancel_named: {
                id: string;
            };
            schedule_after: {
                after: string;
                maybePeriodic: string;
                priority: string;
                call: string;
            };
            schedule_named_after: {
                id: string;
                after: string;
                maybePeriodic: string;
                priority: string;
                call: string;
            };
        };
    };
    /**
     * Lookup499: pallet_settlement::Call<T>
     **/
    PalletSettlementCall: {
        _enum: {
            create_venue: {
                details: string;
                signers: string;
                typ: string;
            };
            update_venue_details: {
                id: string;
                details: string;
            };
            update_venue_type: {
                id: string;
                typ: string;
            };
            affirm_with_receipts: {
                id: string;
                receiptDetails: string;
                portfolios: string;
            };
            set_venue_filtering: {
                ticker: string;
                enabled: string;
            };
            allow_venues: {
                ticker: string;
                venues: string;
            };
            disallow_venues: {
                ticker: string;
                venues: string;
            };
            update_venue_signers: {
                id: string;
                signers: string;
                addSigners: string;
            };
            execute_manual_instruction: {
                id: string;
                portfolio: string;
                fungibleTransfers: string;
                nftsTransfers: string;
                offchainTransfers: string;
                weightLimit: string;
            };
            add_instruction: {
                venueId: string;
                settlementType: string;
                tradeDate: string;
                valueDate: string;
                legs: string;
                instructionMemo: string;
            };
            add_and_affirm_instruction: {
                venueId: string;
                settlementType: string;
                tradeDate: string;
                valueDate: string;
                legs: string;
                portfolios: string;
                instructionMemo: string;
            };
            affirm_instruction: {
                id: string;
                portfolios: string;
            };
            withdraw_affirmation: {
                id: string;
                portfolios: string;
            };
            reject_instruction: {
                id: string;
                portfolio: string;
            };
            execute_scheduled_instruction: {
                id: string;
                weightLimit: string;
            };
        };
    };
    /**
     * Lookup501: polymesh_primitives::settlement::ReceiptDetails<sp_core::crypto::AccountId32, sp_runtime::MultiSignature>
     **/
    PolymeshPrimitivesSettlementReceiptDetails: {
        uid: string;
        instructionId: string;
        legId: string;
        signer: string;
        signature: string;
        metadata: string;
    };
    /**
     * Lookup502: sp_runtime::MultiSignature
     **/
    SpRuntimeMultiSignature: {
        _enum: {
            Ed25519: string;
            Sr25519: string;
            Ecdsa: string;
        };
    };
    /**
     * Lookup503: sp_core::ecdsa::Signature
     **/
    SpCoreEcdsaSignature: string;
    /**
     * Lookup505: pallet_statistics::Call<T>
     **/
    PalletStatisticsCall: {
        _enum: {
            set_active_asset_stats: {
                asset: string;
                statTypes: string;
            };
            batch_update_asset_stats: {
                asset: string;
                statType: string;
                values: string;
            };
            set_asset_transfer_compliance: {
                asset: string;
                transferConditions: string;
            };
            set_entities_exempt: {
                isExempt: string;
                exemptKey: string;
                entities: string;
            };
        };
    };
    /**
     * Lookup510: pallet_sto::Call<T>
     **/
    PalletStoCall: {
        _enum: {
            create_fundraiser: {
                offeringPortfolio: string;
                offeringAsset: string;
                raisingPortfolio: string;
                raisingAsset: string;
                tiers: string;
                venueId: string;
                start: string;
                end: string;
                minimumInvestment: string;
                fundraiserName: string;
            };
            invest: {
                investmentPortfolio: string;
                fundingPortfolio: string;
                offeringAsset: string;
                id: string;
                purchaseAmount: string;
                maxPrice: string;
                receipt: string;
            };
            freeze_fundraiser: {
                offeringAsset: string;
                id: string;
            };
            unfreeze_fundraiser: {
                offeringAsset: string;
                id: string;
            };
            modify_fundraiser_window: {
                offeringAsset: string;
                id: string;
                start: string;
                end: string;
            };
            stop: {
                offeringAsset: string;
                id: string;
            };
        };
    };
    /**
     * Lookup512: pallet_sto::PriceTier
     **/
    PalletStoPriceTier: {
        total: string;
        price: string;
    };
    /**
     * Lookup514: pallet_treasury::Call<T>
     **/
    PalletTreasuryCall: {
        _enum: {
            disbursement: {
                beneficiaries: string;
            };
            reimbursement: {
                amount: string;
            };
        };
    };
    /**
     * Lookup516: polymesh_primitives::Beneficiary<Balance>
     **/
    PolymeshPrimitivesBeneficiary: {
        id: string;
        amount: string;
    };
    /**
     * Lookup517: pallet_utility::pallet::Call<T>
     **/
    PalletUtilityCall: {
        _enum: {
            batch: {
                calls: string;
            };
            relay_tx: {
                target: string;
                signature: string;
                call: string;
            };
            batch_all: {
                calls: string;
            };
            dispatch_as: {
                asOrigin: string;
                call: string;
            };
            force_batch: {
                calls: string;
            };
            with_weight: {
                call: string;
                weight: string;
            };
            batch_old: {
                calls: string;
            };
            batch_atomic: {
                calls: string;
            };
            batch_optimistic: {
                calls: string;
            };
        };
    };
    /**
     * Lookup519: pallet_utility::UniqueCall<polymesh_runtime_develop::runtime::RuntimeCall>
     **/
    PalletUtilityUniqueCall: {
        nonce: string;
        call: string;
    };
    /**
     * Lookup520: polymesh_runtime_develop::runtime::OriginCaller
     **/
    PolymeshRuntimeDevelopRuntimeOriginCaller: {
        _enum: {
            system: string;
            __Unused1: string;
            __Unused2: string;
            __Unused3: string;
            Void: string;
            __Unused5: string;
            __Unused6: string;
            __Unused7: string;
            __Unused8: string;
            PolymeshCommittee: string;
            __Unused10: string;
            TechnicalCommittee: string;
            __Unused12: string;
            UpgradeCommittee: string;
        };
    };
    /**
     * Lookup521: frame_support::dispatch::RawOrigin<sp_core::crypto::AccountId32>
     **/
    FrameSupportDispatchRawOrigin: {
        _enum: {
            Root: string;
            Signed: string;
            None: string;
        };
    };
    /**
     * Lookup522: pallet_committee::RawOrigin<sp_core::crypto::AccountId32, pallet_committee::Instance1>
     **/
    PalletCommitteeRawOriginInstance1: {
        _enum: string[];
    };
    /**
     * Lookup523: pallet_committee::RawOrigin<sp_core::crypto::AccountId32, pallet_committee::Instance3>
     **/
    PalletCommitteeRawOriginInstance3: {
        _enum: string[];
    };
    /**
     * Lookup524: pallet_committee::RawOrigin<sp_core::crypto::AccountId32, pallet_committee::Instance4>
     **/
    PalletCommitteeRawOriginInstance4: {
        _enum: string[];
    };
    /**
     * Lookup525: sp_core::Void
     **/
    SpCoreVoid: string;
    /**
     * Lookup526: pallet_base::Call<T>
     **/
    PalletBaseCall: string;
    /**
     * Lookup527: pallet_external_agents::Call<T>
     **/
    PalletExternalAgentsCall: {
        _enum: {
            create_group: {
                ticker: string;
                perms: string;
            };
            set_group_permissions: {
                ticker: string;
                id: string;
                perms: string;
            };
            remove_agent: {
                ticker: string;
                agent: string;
            };
            abdicate: {
                ticker: string;
            };
            change_group: {
                ticker: string;
                agent: string;
                group: string;
            };
            accept_become_agent: {
                authId: string;
            };
            create_group_and_add_auth: {
                ticker: string;
                perms: string;
                target: string;
                expiry: string;
            };
            create_and_change_custom_group: {
                ticker: string;
                perms: string;
                agent: string;
            };
        };
    };
    /**
     * Lookup528: pallet_relayer::Call<T>
     **/
    PalletRelayerCall: {
        _enum: {
            set_paying_key: {
                userKey: string;
                polyxLimit: string;
            };
            accept_paying_key: {
                authId: string;
            };
            remove_paying_key: {
                userKey: string;
                payingKey: string;
            };
            update_polyx_limit: {
                userKey: string;
                polyxLimit: string;
            };
            increase_polyx_limit: {
                userKey: string;
                amount: string;
            };
            decrease_polyx_limit: {
                userKey: string;
                amount: string;
            };
        };
    };
    /**
     * Lookup529: pallet_rewards::Call<T>
     **/
    PalletRewardsCall: {
        _enum: {
            claim_itn_reward: {
                rewardAddress: string;
                itnAddress: string;
                signature: string;
            };
            set_itn_reward_status: {
                itnAddress: string;
                status: string;
            };
        };
    };
    /**
     * Lookup530: pallet_rewards::ItnRewardStatus
     **/
    PalletRewardsItnRewardStatus: {
        _enum: {
            Unclaimed: string;
            Claimed: string;
        };
    };
    /**
     * Lookup531: pallet_contracts::pallet::Call<T>
     **/
    PalletContractsCall: {
        _enum: {
            call_old_weight: {
                dest: string;
                value: string;
                gasLimit: string;
                storageDepositLimit: string;
                data: string;
            };
            instantiate_with_code_old_weight: {
                value: string;
                gasLimit: string;
                storageDepositLimit: string;
                code: string;
                data: string;
                salt: string;
            };
            instantiate_old_weight: {
                value: string;
                gasLimit: string;
                storageDepositLimit: string;
                codeHash: string;
                data: string;
                salt: string;
            };
            upload_code: {
                code: string;
                storageDepositLimit: string;
                determinism: string;
            };
            remove_code: {
                codeHash: string;
            };
            set_code: {
                dest: string;
                codeHash: string;
            };
            call: {
                dest: string;
                value: string;
                gasLimit: string;
                storageDepositLimit: string;
                data: string;
            };
            instantiate_with_code: {
                value: string;
                gasLimit: string;
                storageDepositLimit: string;
                code: string;
                data: string;
                salt: string;
            };
            instantiate: {
                value: string;
                gasLimit: string;
                storageDepositLimit: string;
                codeHash: string;
                data: string;
                salt: string;
            };
        };
    };
    /**
     * Lookup535: pallet_contracts::wasm::Determinism
     **/
    PalletContractsWasmDeterminism: {
        _enum: string[];
    };
    /**
     * Lookup536: polymesh_contracts::Call<T>
     **/
    PolymeshContractsCall: {
        _enum: {
            instantiate_with_code_perms: {
                endowment: string;
                gasLimit: string;
                storageDepositLimit: string;
                code: string;
                data: string;
                salt: string;
                perms: string;
            };
            instantiate_with_hash_perms: {
                endowment: string;
                gasLimit: string;
                storageDepositLimit: string;
                codeHash: string;
                data: string;
                salt: string;
                perms: string;
            };
            update_call_runtime_whitelist: {
                updates: string;
            };
        };
    };
    /**
     * Lookup539: polymesh_contracts::chain_extension::ExtrinsicId
     **/
    PolymeshContractsChainExtensionExtrinsicId: string;
    /**
     * Lookup540: pallet_preimage::pallet::Call<T>
     **/
    PalletPreimageCall: {
        _enum: {
            note_preimage: {
                bytes: string;
            };
            unnote_preimage: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
            request_preimage: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
            unrequest_preimage: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
        };
    };
    /**
     * Lookup541: pallet_nft::Call<T>
     **/
    PalletNftCall: {
        _enum: {
            create_nft_collection: {
                ticker: string;
                nftType: string;
                collectionKeys: string;
            };
            issue_nft: {
                ticker: string;
                nftMetadataAttributes: string;
                portfolioKind: string;
            };
            redeem_nft: {
                ticker: string;
                nftId: string;
                portfolioKind: string;
            };
        };
    };
    /**
     * Lookup543: polymesh_primitives::nft::NFTCollectionKeys
     **/
    PolymeshPrimitivesNftNftCollectionKeys: string;
    /**
     * Lookup546: polymesh_primitives::nft::NFTMetadataAttribute
     **/
    PolymeshPrimitivesNftNftMetadataAttribute: {
        key: string;
        value: string;
    };
    /**
     * Lookup547: pallet_test_utils::Call<T>
     **/
    PalletTestUtilsCall: {
        _enum: {
            register_did: {
                secondaryKeys: string;
            };
            mock_cdd_register_did: {
                targetAccount: string;
            };
            get_my_did: string;
            get_cdd_of: {
                of: string;
            };
        };
    };
    /**
     * Lookup548: pallet_committee::PolymeshVotes<BlockNumber>
     **/
    PalletCommitteePolymeshVotes: {
        index: string;
        ayes: string;
        nays: string;
        expiry: string;
    };
    /**
     * Lookup550: pallet_committee::Error<T, I>
     **/
    PalletCommitteeError: {
        _enum: string[];
    };
    /**
     * Lookup560: polymesh_primitives::multisig::ProposalDetails<T>
     **/
    PolymeshPrimitivesMultisigProposalDetails: {
        approvals: string;
        rejections: string;
        status: string;
        expiry: string;
        autoClose: string;
    };
    /**
     * Lookup561: polymesh_primitives::multisig::ProposalStatus
     **/
    PolymeshPrimitivesMultisigProposalStatus: {
        _enum: string[];
    };
    /**
     * Lookup563: pallet_multisig::Error<T>
     **/
    PalletMultisigError: {
        _enum: string[];
    };
    /**
     * Lookup565: pallet_bridge::BridgeTxDetail<BlockNumber>
     **/
    PalletBridgeBridgeTxDetail: {
        amount: string;
        status: string;
        executionBlock: string;
        txHash: string;
    };
    /**
     * Lookup566: pallet_bridge::BridgeTxStatus
     **/
    PalletBridgeBridgeTxStatus: {
        _enum: {
            Absent: string;
            Pending: string;
            Frozen: string;
            Timelocked: string;
            Handled: string;
        };
    };
    /**
     * Lookup569: pallet_bridge::Error<T>
     **/
    PalletBridgeError: {
        _enum: string[];
    };
    /**
     * Lookup570: pallet_staking::StakingLedger<sp_core::crypto::AccountId32, Balance>
     **/
    PalletStakingStakingLedger: {
        stash: string;
        total: string;
        active: string;
        unlocking: string;
        claimedRewards: string;
    };
    /**
     * Lookup572: pallet_staking::UnlockChunk<Balance>
     **/
    PalletStakingUnlockChunk: {
        value: string;
        era: string;
    };
    /**
     * Lookup573: pallet_staking::Nominations<sp_core::crypto::AccountId32>
     **/
    PalletStakingNominations: {
        targets: string;
        submittedIn: string;
        suppressed: string;
    };
    /**
     * Lookup574: pallet_staking::ActiveEraInfo
     **/
    PalletStakingActiveEraInfo: {
        index: string;
        start: string;
    };
    /**
     * Lookup576: pallet_staking::EraRewardPoints<sp_core::crypto::AccountId32>
     **/
    PalletStakingEraRewardPoints: {
        total: string;
        individual: string;
    };
    /**
     * Lookup579: pallet_staking::Forcing
     **/
    PalletStakingForcing: {
        _enum: string[];
    };
    /**
     * Lookup581: pallet_staking::UnappliedSlash<sp_core::crypto::AccountId32, Balance>
     **/
    PalletStakingUnappliedSlash: {
        validator: string;
        own: string;
        others: string;
        reporters: string;
        payout: string;
    };
    /**
     * Lookup585: pallet_staking::slashing::SlashingSpans
     **/
    PalletStakingSlashingSlashingSpans: {
        spanIndex: string;
        lastStart: string;
        lastNonzeroSlash: string;
        prior: string;
    };
    /**
     * Lookup586: pallet_staking::slashing::SpanRecord<Balance>
     **/
    PalletStakingSlashingSpanRecord: {
        slashed: string;
        paidOut: string;
    };
    /**
     * Lookup589: pallet_staking::ElectionResult<sp_core::crypto::AccountId32, Balance>
     **/
    PalletStakingElectionResult: {
        electedStashes: string;
        exposures: string;
        compute: string;
    };
    /**
     * Lookup590: pallet_staking::ElectionStatus<BlockNumber>
     **/
    PalletStakingElectionStatus: {
        _enum: {
            Closed: string;
            Open: string;
        };
    };
    /**
     * Lookup591: pallet_staking::PermissionedIdentityPrefs
     **/
    PalletStakingPermissionedIdentityPrefs: {
        intendedCount: string;
        runningCount: string;
    };
    /**
     * Lookup592: pallet_staking::Releases
     **/
    PalletStakingReleases: {
        _enum: string[];
    };
    /**
     * Lookup594: pallet_staking::Error<T>
     **/
    PalletStakingError: {
        _enum: string[];
    };
    /**
     * Lookup595: sp_staking::offence::OffenceDetails<sp_core::crypto::AccountId32, Offender>
     **/
    SpStakingOffenceOffenceDetails: {
        offender: string;
        reporters: string;
    };
    /**
     * Lookup600: sp_core::crypto::KeyTypeId
     **/
    SpCoreCryptoKeyTypeId: string;
    /**
     * Lookup601: pallet_session::pallet::Error<T>
     **/
    PalletSessionError: {
        _enum: string[];
    };
    /**
     * Lookup602: pallet_grandpa::StoredState<N>
     **/
    PalletGrandpaStoredState: {
        _enum: {
            Live: string;
            PendingPause: {
                scheduledAt: string;
                delay: string;
            };
            Paused: string;
            PendingResume: {
                scheduledAt: string;
                delay: string;
            };
        };
    };
    /**
     * Lookup603: pallet_grandpa::StoredPendingChange<N, Limit>
     **/
    PalletGrandpaStoredPendingChange: {
        scheduledAt: string;
        delay: string;
        nextAuthorities: string;
        forced: string;
    };
    /**
     * Lookup605: pallet_grandpa::pallet::Error<T>
     **/
    PalletGrandpaError: {
        _enum: string[];
    };
    /**
     * Lookup609: pallet_im_online::BoundedOpaqueNetworkState<PeerIdEncodingLimit, MultiAddrEncodingLimit, AddressesLimit>
     **/
    PalletImOnlineBoundedOpaqueNetworkState: {
        peerId: string;
        externalAddresses: string;
    };
    /**
     * Lookup613: pallet_im_online::pallet::Error<T>
     **/
    PalletImOnlineError: {
        _enum: string[];
    };
    /**
     * Lookup615: pallet_sudo::Error<T>
     **/
    PalletSudoError: {
        _enum: string[];
    };
    /**
     * Lookup616: pallet_asset::TickerRegistration<U>
     **/
    PalletAssetTickerRegistration: {
        owner: string;
        expiry: string;
    };
    /**
     * Lookup617: pallet_asset::TickerRegistrationConfig<U>
     **/
    PalletAssetTickerRegistrationConfig: {
        maxTickerLength: string;
        registrationLength: string;
    };
    /**
     * Lookup618: pallet_asset::SecurityToken
     **/
    PalletAssetSecurityToken: {
        totalSupply: string;
        ownerDid: string;
        divisible: string;
        assetType: string;
    };
    /**
     * Lookup622: pallet_asset::AssetOwnershipRelation
     **/
    PalletAssetAssetOwnershipRelation: {
        _enum: string[];
    };
    /**
     * Lookup628: pallet_asset::Error<T>
     **/
    PalletAssetError: {
        _enum: string[];
    };
    /**
     * Lookup631: pallet_corporate_actions::distribution::Error<T>
     **/
    PalletCorporateActionsDistributionError: {
        _enum: string[];
    };
    /**
     * Lookup635: polymesh_common_utilities::traits::checkpoint::NextCheckpoints
     **/
    PolymeshCommonUtilitiesCheckpointNextCheckpoints: {
        nextAt: string;
        totalPending: string;
        schedules: string;
    };
    /**
     * Lookup641: pallet_asset::checkpoint::Error<T>
     **/
    PalletAssetCheckpointError: {
        _enum: string[];
    };
    /**
     * Lookup642: polymesh_primitives::compliance_manager::AssetCompliance
     **/
    PolymeshPrimitivesComplianceManagerAssetCompliance: {
        paused: string;
        requirements: string;
    };
    /**
     * Lookup644: pallet_compliance_manager::Error<T>
     **/
    PalletComplianceManagerError: {
        _enum: string[];
    };
    /**
     * Lookup647: pallet_corporate_actions::Error<T>
     **/
    PalletCorporateActionsError: {
        _enum: string[];
    };
    /**
     * Lookup649: pallet_corporate_actions::ballot::Error<T>
     **/
    PalletCorporateActionsBallotError: {
        _enum: string[];
    };
    /**
     * Lookup650: pallet_permissions::Error<T>
     **/
    PalletPermissionsError: {
        _enum: string[];
    };
    /**
     * Lookup651: pallet_pips::PipsMetadata<BlockNumber>
     **/
    PalletPipsPipsMetadata: {
        id: string;
        url: string;
        description: string;
        createdAt: string;
        transactionVersion: string;
        expiry: string;
    };
    /**
     * Lookup653: pallet_pips::DepositInfo<sp_core::crypto::AccountId32>
     **/
    PalletPipsDepositInfo: {
        owner: string;
        amount: string;
    };
    /**
     * Lookup654: pallet_pips::Pip<polymesh_runtime_develop::runtime::RuntimeCall, sp_core::crypto::AccountId32>
     **/
    PalletPipsPip: {
        id: string;
        proposal: string;
        proposer: string;
    };
    /**
     * Lookup655: pallet_pips::VotingResult
     **/
    PalletPipsVotingResult: {
        ayesCount: string;
        ayesStake: string;
        naysCount: string;
        naysStake: string;
    };
    /**
     * Lookup656: pallet_pips::Vote
     **/
    PalletPipsVote: string;
    /**
     * Lookup657: pallet_pips::SnapshotMetadata<BlockNumber, sp_core::crypto::AccountId32>
     **/
    PalletPipsSnapshotMetadata: {
        createdAt: string;
        madeBy: string;
        id: string;
    };
    /**
     * Lookup659: pallet_pips::Error<T>
     **/
    PalletPipsError: {
        _enum: string[];
    };
    /**
     * Lookup667: pallet_portfolio::Error<T>
     **/
    PalletPortfolioError: {
        _enum: string[];
    };
    /**
     * Lookup668: pallet_protocol_fee::Error<T>
     **/
    PalletProtocolFeeError: {
        _enum: string[];
    };
    /**
     * Lookup671: pallet_scheduler::Scheduled<Name, frame_support::traits::preimages::Bounded<polymesh_runtime_develop::runtime::RuntimeCall>, BlockNumber, polymesh_runtime_develop::runtime::OriginCaller, sp_core::crypto::AccountId32>
     **/
    PalletSchedulerScheduled: {
        maybeId: string;
        priority: string;
        call: string;
        maybePeriodic: string;
        origin: string;
    };
    /**
     * Lookup672: frame_support::traits::preimages::Bounded<polymesh_runtime_develop::runtime::RuntimeCall>
     **/
    FrameSupportPreimagesBounded: {
        _enum: {
            Legacy: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
            };
            Inline: string;
            Lookup: {
                _alias: {
                    hash_: string;
                };
                hash_: string;
                len: string;
            };
        };
    };
    /**
     * Lookup675: pallet_scheduler::pallet::Error<T>
     **/
    PalletSchedulerError: {
        _enum: string[];
    };
    /**
     * Lookup676: polymesh_primitives::settlement::Venue
     **/
    PolymeshPrimitivesSettlementVenue: {
        creator: string;
        venueType: string;
    };
    /**
     * Lookup680: polymesh_primitives::settlement::Instruction<Moment, BlockNumber>
     **/
    PolymeshPrimitivesSettlementInstruction: {
        instructionId: string;
        venueId: string;
        settlementType: string;
        createdAt: string;
        tradeDate: string;
        valueDate: string;
    };
    /**
     * Lookup682: polymesh_primitives::settlement::LegStatus<sp_core::crypto::AccountId32>
     **/
    PolymeshPrimitivesSettlementLegStatus: {
        _enum: {
            PendingTokenLock: string;
            ExecutionPending: string;
            ExecutionToBeSkipped: string;
        };
    };
    /**
     * Lookup684: polymesh_primitives::settlement::AffirmationStatus
     **/
    PolymeshPrimitivesSettlementAffirmationStatus: {
        _enum: string[];
    };
    /**
     * Lookup688: polymesh_primitives::settlement::InstructionStatus<BlockNumber>
     **/
    PolymeshPrimitivesSettlementInstructionStatus: {
        _enum: {
            Unknown: string;
            Pending: string;
            Failed: string;
            Success: string;
            Rejected: string;
        };
    };
    /**
     * Lookup689: pallet_settlement::Error<T>
     **/
    PalletSettlementError: {
        _enum: string[];
    };
    /**
     * Lookup692: polymesh_primitives::statistics::Stat1stKey
     **/
    PolymeshPrimitivesStatisticsStat1stKey: {
        asset: string;
        statType: string;
    };
    /**
     * Lookup693: polymesh_primitives::transfer_compliance::AssetTransferCompliance<S>
     **/
    PolymeshPrimitivesTransferComplianceAssetTransferCompliance: {
        paused: string;
        requirements: string;
    };
    /**
     * Lookup697: pallet_statistics::Error<T>
     **/
    PalletStatisticsError: {
        _enum: string[];
    };
    /**
     * Lookup699: pallet_sto::Error<T>
     **/
    PalletStoError: {
        _enum: string[];
    };
    /**
     * Lookup700: pallet_treasury::Error<T>
     **/
    PalletTreasuryError: {
        _enum: string[];
    };
    /**
     * Lookup701: pallet_utility::pallet::Error<T>
     **/
    PalletUtilityError: {
        _enum: string[];
    };
    /**
     * Lookup702: pallet_base::Error<T>
     **/
    PalletBaseError: {
        _enum: string[];
    };
    /**
     * Lookup704: pallet_external_agents::Error<T>
     **/
    PalletExternalAgentsError: {
        _enum: string[];
    };
    /**
     * Lookup705: pallet_relayer::Subsidy<sp_core::crypto::AccountId32>
     **/
    PalletRelayerSubsidy: {
        payingKey: string;
        remaining: string;
    };
    /**
     * Lookup706: pallet_relayer::Error<T>
     **/
    PalletRelayerError: {
        _enum: string[];
    };
    /**
     * Lookup707: pallet_rewards::Error<T>
     **/
    PalletRewardsError: {
        _enum: string[];
    };
    /**
     * Lookup709: pallet_contracts::wasm::PrefabWasmModule<T>
     **/
    PalletContractsWasmPrefabWasmModule: {
        instructionWeightsVersion: string;
        initial: string;
        maximum: string;
        code: string;
        determinism: string;
    };
    /**
     * Lookup711: pallet_contracts::wasm::OwnerInfo<T>
     **/
    PalletContractsWasmOwnerInfo: {
        owner: string;
        deposit: string;
        refcount: string;
    };
    /**
     * Lookup712: pallet_contracts::storage::ContractInfo<T>
     **/
    PalletContractsStorageContractInfo: {
        trieId: string;
        depositAccount: string;
        codeHash: string;
        storageBytes: string;
        storageItems: string;
        storageByteDeposit: string;
        storageItemDeposit: string;
        storageBaseDeposit: string;
    };
    /**
     * Lookup715: pallet_contracts::storage::DeletedContract
     **/
    PalletContractsStorageDeletedContract: {
        trieId: string;
    };
    /**
     * Lookup717: pallet_contracts::schedule::Schedule<T>
     **/
    PalletContractsSchedule: {
        limits: string;
        instructionWeights: string;
        hostFnWeights: string;
    };
    /**
     * Lookup718: pallet_contracts::schedule::Limits
     **/
    PalletContractsScheduleLimits: {
        eventTopics: string;
        globals: string;
        locals: string;
        parameters: string;
        memoryPages: string;
        tableSize: string;
        brTableSize: string;
        subjectLen: string;
        payloadLen: string;
    };
    /**
     * Lookup719: pallet_contracts::schedule::InstructionWeights<T>
     **/
    PalletContractsScheduleInstructionWeights: {
        _alias: {
            r_if: string;
        };
        version: string;
        fallback: string;
        i64const: string;
        i64load: string;
        i64store: string;
        select: string;
        r_if: string;
        br: string;
        brIf: string;
        brTable: string;
        brTablePerEntry: string;
        call: string;
        callIndirect: string;
        callIndirectPerParam: string;
        callPerLocal: string;
        localGet: string;
        localSet: string;
        localTee: string;
        globalGet: string;
        globalSet: string;
        memoryCurrent: string;
        memoryGrow: string;
        i64clz: string;
        i64ctz: string;
        i64popcnt: string;
        i64eqz: string;
        i64extendsi32: string;
        i64extendui32: string;
        i32wrapi64: string;
        i64eq: string;
        i64ne: string;
        i64lts: string;
        i64ltu: string;
        i64gts: string;
        i64gtu: string;
        i64les: string;
        i64leu: string;
        i64ges: string;
        i64geu: string;
        i64add: string;
        i64sub: string;
        i64mul: string;
        i64divs: string;
        i64divu: string;
        i64rems: string;
        i64remu: string;
        i64and: string;
        i64or: string;
        i64xor: string;
        i64shl: string;
        i64shrs: string;
        i64shru: string;
        i64rotl: string;
        i64rotr: string;
    };
    /**
     * Lookup720: pallet_contracts::schedule::HostFnWeights<T>
     **/
    PalletContractsScheduleHostFnWeights: {
        _alias: {
            r_return: string;
        };
        caller: string;
        isContract: string;
        codeHash: string;
        ownCodeHash: string;
        callerIsOrigin: string;
        address: string;
        gasLeft: string;
        balance: string;
        valueTransferred: string;
        minimumBalance: string;
        blockNumber: string;
        now: string;
        weightToFee: string;
        gas: string;
        input: string;
        inputPerByte: string;
        r_return: string;
        returnPerByte: string;
        terminate: string;
        random: string;
        depositEvent: string;
        depositEventPerTopic: string;
        depositEventPerByte: string;
        debugMessage: string;
        debugMessagePerByte: string;
        setStorage: string;
        setStoragePerNewByte: string;
        setStoragePerOldByte: string;
        setCodeHash: string;
        clearStorage: string;
        clearStoragePerByte: string;
        containsStorage: string;
        containsStoragePerByte: string;
        getStorage: string;
        getStoragePerByte: string;
        takeStorage: string;
        takeStoragePerByte: string;
        transfer: string;
        call: string;
        delegateCall: string;
        callTransferSurcharge: string;
        callPerClonedByte: string;
        instantiate: string;
        instantiateTransferSurcharge: string;
        instantiatePerInputByte: string;
        instantiatePerSaltByte: string;
        hashSha2256: string;
        hashSha2256PerByte: string;
        hashKeccak256: string;
        hashKeccak256PerByte: string;
        hashBlake2256: string;
        hashBlake2256PerByte: string;
        hashBlake2128: string;
        hashBlake2128PerByte: string;
        ecdsaRecover: string;
        ecdsaToEthAddress: string;
        reentranceCount: string;
        accountReentranceCount: string;
        instantiationNonce: string;
    };
    /**
     * Lookup721: pallet_contracts::pallet::Error<T>
     **/
    PalletContractsError: {
        _enum: string[];
    };
    /**
     * Lookup722: polymesh_contracts::Error<T>
     **/
    PolymeshContractsError: {
        _enum: string[];
    };
    /**
     * Lookup723: pallet_preimage::RequestStatus<sp_core::crypto::AccountId32, Balance>
     **/
    PalletPreimageRequestStatus: {
        _enum: {
            Unrequested: {
                deposit: string;
                len: string;
            };
            Requested: {
                deposit: string;
                count: string;
                len: string;
            };
        };
    };
    /**
     * Lookup727: pallet_preimage::pallet::Error<T>
     **/
    PalletPreimageError: {
        _enum: string[];
    };
    /**
     * Lookup728: polymesh_primitives::nft::NFTCollection
     **/
    PolymeshPrimitivesNftNftCollection: {
        id: string;
        ticker: string;
    };
    /**
     * Lookup732: pallet_nft::Error<T>
     **/
    PalletNftError: {
        _enum: string[];
    };
    /**
     * Lookup733: pallet_test_utils::Error<T>
     **/
    PalletTestUtilsError: string;
    /**
     * Lookup736: frame_system::extensions::check_spec_version::CheckSpecVersion<T>
     **/
    FrameSystemExtensionsCheckSpecVersion: string;
    /**
     * Lookup737: frame_system::extensions::check_tx_version::CheckTxVersion<T>
     **/
    FrameSystemExtensionsCheckTxVersion: string;
    /**
     * Lookup738: frame_system::extensions::check_genesis::CheckGenesis<T>
     **/
    FrameSystemExtensionsCheckGenesis: string;
    /**
     * Lookup741: frame_system::extensions::check_nonce::CheckNonce<T>
     **/
    FrameSystemExtensionsCheckNonce: string;
    /**
     * Lookup742: polymesh_extensions::check_weight::CheckWeight<T>
     **/
    PolymeshExtensionsCheckWeight: string;
    /**
     * Lookup743: frame_system::extensions::check_weight::CheckWeight<T>
     **/
    FrameSystemExtensionsCheckWeight: string;
    /**
     * Lookup744: pallet_transaction_payment::ChargeTransactionPayment<T>
     **/
    PalletTransactionPaymentChargeTransactionPayment: string;
    /**
     * Lookup745: pallet_permissions::StoreCallMetadata<T>
     **/
    PalletPermissionsStoreCallMetadata: string;
    /**
     * Lookup746: polymesh_runtime_develop::runtime::Runtime
     **/
    PolymeshRuntimeDevelopRuntime: string;
};
export default _default;
//# sourceMappingURL=lookup.d.ts.map