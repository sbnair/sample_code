declare const _default: {
    types: {
        Address: string;
        LookupSource: string;
        AccountInfo: string;
        IdentityId: string;
        EventDid: string;
        EventCounts: string;
        ErrorAt: string;
        Ticker: string;
        CddId: string;
        PosRatio: string;
        DocumentId: string;
        DocumentName: string;
        DocumentUri: string;
        DocumentHash: {
            _enum: {
                None: string;
                H512: string;
                H384: string;
                H320: string;
                H256: string;
                H224: string;
                H192: string;
                H160: string;
                H128: string;
            };
        };
        DocumentType: string;
        Document: {
            uri: string;
            content_hash: string;
            name: string;
            doc_type: string;
            filing_date: string;
        };
        Version: string;
        CustomAssetTypeId: string;
        AssetType: {
            _enum: {
                EquityCommon: string;
                EquityPreferred: string;
                Commodity: string;
                FixedIncome: string;
                REIT: string;
                Fund: string;
                RevenueShareAgreement: string;
                StructuredProduct: string;
                Derivative: string;
                Custom: string;
                StableCoin: string;
                NonFungible: string;
            };
        };
        AssetIdentifier: {
            _enum: {
                CUSIP: string;
                CINS: string;
                ISIN: string;
                LEI: string;
                FIGI: string;
            };
        };
        AssetOwnershipRelation: {
            _enum: {
                NotOwned: string;
                TickerOwned: string;
                AssetOwned: string;
            };
        };
        AssetName: string;
        FundingRoundName: string;
        VenueDetails: string;
        SecurityToken: {
            total_supply: string;
            owner_did: string;
            divisible: string;
            asset_type: string;
        };
        AssetMetadataName: string;
        AssetMetadataValue: string;
        AssetMetadataLocalKey: string;
        AssetMetadataGlobalKey: string;
        AssetMetadataKey: {
            _enum: {
                Global: string;
                Local: string;
            };
        };
        AssetMetadataLockStatus: {
            _enum: {
                Unlocked: string;
                Locked: string;
                LockedUntil: string;
            };
        };
        AssetMetadataValueDetail: {
            expire: string;
            lock_status: string;
        };
        AssetMetadataDescription: string;
        AssetMetadataSpec: {
            url: string;
            description: string;
            type_def: string;
        };
        PalletName: string;
        DispatchableName: string;
        AssetPermissions: {
            _enum: {
                Whole: string;
                These: string;
                Except: string;
            };
        };
        PortfolioPermissions: {
            _enum: {
                Whole: string;
                These: string;
                Except: string;
            };
        };
        DispatchableNames: {
            _enum: {
                Whole: string;
                These: string;
                Except: string;
            };
        };
        PalletPermissions: {
            pallet_name: string;
            dispatchable_names: string;
        };
        ExtrinsicPermissions: {
            _enum: {
                Whole: string;
                These: string;
                Except: string;
            };
        };
        Permissions: {
            asset: string;
            extrinsic: string;
            portfolio: string;
        };
        Signatory: {
            _enum: {
                Identity: string;
                Account: string;
            };
        };
        SecondaryKey: {
            key: string;
            permissions: string;
        };
        SecondaryKeyWithAuth: {
            secondary_key: string;
            auth_signature: string;
        };
        Subsidy: {
            paying_key: string;
            remaining: string;
        };
        IdentityRole: {
            _enum: string[];
        };
        PreAuthorizedKeyInfo: {
            target_id: string;
            secondary_key: string;
        };
        DidRecord: {
            primary_key: string;
        };
        KeyRecord: {
            _enum: {
                PrimaryKey: string;
                SecondaryKey: string;
                MultiSigSignerKey: string;
            };
        };
        KeyIdentityData: {
            identity: string;
            permissions: string;
        };
        CountryCode: {
            _enum: string[];
        };
        Scope: {
            _enum: {
                Identity: string;
                Ticker: string;
                Custom: string;
            };
        };
        CustomClaimTypeId: string;
        Claim: {
            _enum: {
                Accredited: string;
                Affiliate: string;
                BuyLockup: string;
                SellLockup: string;
                CustomerDueDiligence: string;
                KnowYourCustomer: string;
                Jurisdiction: string;
                Exempted: string;
                Blocked: string;
                Custom: string;
            };
        };
        ClaimType: {
            _enum: {
                Accredited: string;
                Affiliate: string;
                BuyLockup: string;
                SellLockup: string;
                CustomerDueDiligence: string;
                KnowYourCustomer: string;
                Jurisdiction: string;
                Exempted: string;
                Blocked: string;
                Custom: string;
            };
        };
        IdentityClaim: {
            claim_issuer: string;
            issuance_date: string;
            last_update_date: string;
            expiry: string;
            claim: string;
        };
        ComplianceRequirement: {
            sender_conditions: string;
            receiver_conditions: string;
            id: string;
        };
        ComplianceRequirementResult: {
            senderConditions: string;
            receiverConditions: string;
            id: string;
            result: string;
        };
        ConditionType: {
            _enum: {
                IsPresent: string;
                IsAbsent: string;
                IsAnyOf: string;
                IsNoneOf: string;
                IsIdentity: string;
            };
        };
        TrustedFor: {
            _enum: {
                Any: string;
                Specific: string;
            };
        };
        TrustedIssuer: {
            issuer: string;
            trustedFor: string;
        };
        Condition: {
            conditionType: string;
            issuers: string;
        };
        ConditionResult: {
            condition: string;
            result: string;
        };
        TargetIdAuthorization: {
            target_id: string;
            nonce: string;
            expires_at: string;
        };
        TickerRegistration: {
            owner: string;
            expiry: string;
        };
        TickerRegistrationConfig: {
            max_ticker_length: string;
            registration_length: string;
        };
        EthereumAddress: string;
        EcdsaSignature: string;
        MotionTitle: string;
        MotionInfoLink: string;
        ChoiceTitle: string;
        Motion: {
            title: string;
            info_link: string;
            choices: string;
        };
        BallotTitle: string;
        BallotMeta: {
            title: string;
            motions: string;
        };
        BallotTimeRange: {
            start: string;
            end: string;
        };
        BallotVote: {
            power: string;
            fallback: string;
        };
        MaybeBlock: {
            _enum: {
                Some: string;
                None: string;
            };
        };
        Url: string;
        PipDescription: string;
        PipsMetadata: {
            id: string;
            url: string;
            description: string;
            created_at: string;
            transaction_version: string;
            expiry: string;
        };
        Proposer: {
            _enum: {
                Community: string;
                Committee: string;
            };
        };
        Committee: {
            _enum: {
                Technical: string;
                Upgrade: string;
            };
        };
        SkippedCount: string;
        SnapshottedPip: {
            id: string;
            weight: string;
        };
        SnapshotId: string;
        SnapshotMetadata: {
            created_at: string;
            made_by: string;
            id: string;
        };
        SnapshotResult: {
            _enum: {
                Approve: string;
                Reject: string;
                Skip: string;
            };
        };
        Beneficiary: {
            id: string;
            amount: string;
        };
        DepositInfo: {
            owner: string;
            amount: string;
        };
        PolymeshVotes: {
            index: string;
            ayes: string;
            nays: string;
            expiry: string;
        };
        PipId: string;
        ProposalState: {
            _enum: string[];
        };
        Pip: {
            id: string;
            proposal: string;
            proposer: string;
        };
        ProposalData: {
            _enum: {
                Hash: string;
                Proposal: string;
            };
        };
        OffChainSignature: string;
        Authorization: {
            authorization_data: string;
            authorized_by: string;
            expiry: string;
            auth_id: string;
        };
        AuthorizationData: {
            _enum: {
                AttestPrimaryKeyRotation: string;
                RotatePrimaryKey: string;
                TransferTicker: string;
                AddMultiSigSigner: string;
                TransferAssetOwnership: string;
                JoinIdentity: string;
                PortfolioCustody: string;
                BecomeAgent: string;
                AddRelayerPayingKey: string;
                RotatePrimaryKeyToSecondary: string;
            };
        };
        AuthorizationNonce: string;
        Percentage: string;
        RestrictionResult: {
            _enum: string[];
        };
        Memo: string;
        BridgeTx: {
            nonce: string;
            recipient: string;
            amount: string;
            tx_hash: string;
        };
        AssetScope: {
            _enum: {
                Ticker: string;
            };
        };
        StatOpType: {
            _enum: string[];
        };
        StatType: {
            op: string;
            claim_issuer: string;
        };
        StatClaim: {
            _enum: {
                Accredited: string;
                Affiliate: string;
                Jurisdiction: string;
            };
        };
        Stat1stKey: {
            asset: string;
            stat_type: string;
        };
        Stat2ndKey: {
            _enum: {
                NoClaimStat: string;
                Claim: string;
            };
        };
        StatUpdate: {
            key2: string;
            value: string;
        };
        TransferCondition: {
            _enum: {
                MaxInvestorCount: string;
                MaxInvestorOwnership: string;
                ClaimCount: string;
                ClaimOwnership: string;
            };
        };
        AssetTransferCompliance: {
            paused: string;
            requirements: string;
        };
        TransferConditionExemptKey: {
            asset: string;
            op: string;
            claim_type: string;
        };
        AssetCompliance: {
            paused: string;
            requirements: string;
        };
        AssetComplianceResult: {
            paused: string;
            requirements: string;
            result: string;
        };
        Claim1stKey: {
            target: string;
            claim_type: string;
        };
        Claim2ndKey: {
            issuer: string;
            scope: string;
        };
        InactiveMember: {
            id: string;
            deactivated_at: string;
            expiry: string;
        };
        VotingResult: {
            ayes_count: string;
            ayes_stake: string;
            nays_count: string;
            nays_stake: string;
        };
        ProtocolOp: {
            _enum: string[];
        };
        CddStatus: {
            _enum: {
                Ok: string;
                Err: string;
            };
        };
        AssetDidResult: {
            _enum: {
                Ok: string;
                Err: string;
            };
        };
        RpcDidRecordsSuccess: {
            primary_key: string;
            secondary_keys: string;
        };
        RpcDidRecords: {
            _enum: {
                Success: string;
                IdNotFound: string;
            };
        };
        VoteCountProposalFound: {
            ayes: string;
            nays: string;
        };
        VoteCount: {
            _enum: {
                ProposalFound: string;
                ProposalNotFound: string;
            };
        };
        Vote: string;
        VoteByPip: {
            pip: string;
            vote: string;
        };
        BridgeTxDetail: {
            amount: string;
            status: string;
            execution_block: string;
            tx_hash: string;
        };
        BridgeTxStatus: {
            _enum: {
                Absent: string;
                Pending: string;
                Frozen: string;
                Timelocked: string;
                Handled: string;
            };
        };
        HandledTxStatus: {
            _enum: {
                Success: string;
                Error: string;
            };
        };
        CappedFee: string;
        CanTransferResult: {
            _enum: {
                Ok: string;
                Err: string;
            };
        };
        AuthorizationType: {
            _enum: {
                AttestPrimaryKeyRotation: string;
                RotatePrimaryKey: string;
                TransferTicker: string;
                AddMultiSigSigner: string;
                TransferAssetOwnership: string;
                JoinIdentity: string;
                PortfolioCustody: string;
                BecomeAgent: string;
                AddRelayerPayingKey: string;
                RotatePrimaryKeyToSecondary: string;
            };
        };
        ProposalDetails: {
            approvals: string;
            rejections: string;
            status: string;
            expiry: string;
            auto_close: string;
        };
        ProposalStatus: {
            _enum: {
                Invalid: string;
                ActiveOrExpired: string;
                ExecutionSuccessful: string;
                ExecutionFailed: string;
                Rejected: string;
            };
        };
        DidStatus: {
            _enum: {
                Unknown: string;
                Exists: string;
                CddVerified: string;
            };
        };
        PortfolioName: string;
        PortfolioNumber: string;
        PortfolioKind: {
            _enum: {
                Default: string;
                User: string;
            };
        };
        PortfolioId: {
            did: string;
            kind: string;
        };
        Moment: string;
        CalendarUnit: {
            _enum: string[];
        };
        CalendarPeriod: {
            unit: string;
            amount: string;
        };
        CheckpointSchedule: {
            start: string;
            period: string;
        };
        CheckpointId: string;
        ScheduleId: string;
        StoredSchedule: {
            schedule: string;
            id: string;
            at: string;
            remaining: string;
        };
        ScheduleSpec: {
            start: string;
            period: string;
            remaining: string;
        };
        InstructionStatus: {
            _enum: {
                Unknown: string;
                Pending: string;
                Failed: string;
            };
        };
        LegStatus: {
            _enum: {
                PendingTokenLock: string;
                ExecutionPending: string;
                ExecutionToBeSkipped: string;
            };
        };
        AffirmationStatus: {
            _enum: {
                Unknown: string;
                Pending: string;
                Affirmed: string;
            };
        };
        SettlementType: {
            _enum: {
                SettleOnAffirmation: string;
                SettleOnBlock: string;
                SettleManual: string;
            };
        };
        LegId: string;
        InstructionId: string;
        Instruction: {
            instruction_id: string;
            venue_id: string;
            status: string;
            settlement_type: string;
            created_at: string;
            trade_date: string;
            value_date: string;
        };
        Venue: {
            creator: string;
            venue_type: string;
        };
        Receipt: {
            receipt_uid: string;
            from: string;
            to: string;
            asset: string;
            amount: string;
        };
        ReceiptMetadata: string;
        ReceiptDetails: {
            receipt_uid: string;
            leg_id: string;
            signer: string;
            signature: string;
            metadata: string;
        };
        UniqueCall: {
            nonce: string;
            call: string;
        };
        MovePortfolioItem: {
            ticker: string;
            amount: string;
            memo: string;
        };
        WeightToFeeCoefficient: {
            coeffInteger: string;
            coeffFrac: string;
            negative: string;
            degree: string;
        };
        WeightPerClass: {
            baseExtrinsic: string;
            maxExtrinsic: string;
            maxTotal: string;
            reserved: string;
        };
        TargetIdentity: {
            _enum: {
                ExternalAgent: string;
                Specific: string;
            };
        };
        FundraiserId: string;
        FundraiserName: string;
        FundraiserStatus: {
            _enum: string[];
        };
        FundraiserTier: {
            total: string;
            price: string;
            remaining: string;
        };
        Fundraiser: {
            creator: string;
            offering_portfolio: string;
            offering_asset: string;
            raising_portfolio: string;
            raising_asset: string;
            tiers: string;
            venue_id: string;
            start: string;
            end: string;
            status: string;
            minimum_investment: string;
        };
        VenueId: string;
        VenueType: {
            _enum: string[];
        };
        Tax: string;
        TargetIdentities: {
            identities: string;
            treatment: string;
        };
        TargetTreatment: {
            _enum: string[];
        };
        CAKind: {
            _enum: string[];
        };
        CADetails: string;
        CACheckpoint: {
            _enum: {
                Scheduled: string;
                Existing: string;
            };
        };
        RecordDate: {
            date: string;
            checkpoint: string;
        };
        RecordDateSpec: {
            _enum: {
                Scheduled: string;
                ExistingSchedule: string;
                Existing: string;
            };
        };
        CorporateAction: {
            kind: string;
            decl_date: string;
            record_date: string;
            targets: string;
            default_withholding_tax: string;
            withholding_tax: string;
        };
        InitiateCorporateActionArgs: {
            ticker: string;
            kind: string;
            decl_date: string;
            record_date: string;
            details: string;
            targets: string;
            default_withholding_tax: string;
            withholding_tax: string;
        };
        LocalCAId: string;
        CAId: {
            ticker: string;
            local_id: string;
        };
        Distribution: {
            from: string;
            currency: string;
            per_share: string;
            amount: string;
            remaining: string;
            reclaimed: string;
            payment_at: string;
            expires_at: string;
        };
        SlashingSwitch: {
            _enum: string[];
        };
        PriceTier: {
            total: string;
            price: string;
        };
        PermissionedIdentityPrefs: {
            intended_count: string;
            running_count: string;
        };
        CanTransferGranularReturn: {
            _enum: {
                Ok: string;
                Err: string;
            };
        };
        GranularCanTransferResult: {
            invalid_granularity: string;
            self_transfer: string;
            invalid_receiver_cdd: string;
            invalid_sender_cdd: string;
            missing_scope_claim: string;
            receiver_custodian_error: string;
            sender_custodian_error: string;
            sender_insufficient_balance: string;
            portfolio_validity_result: string;
            asset_frozen: string;
            transfer_condition_result: string;
            compliance_result: string;
            result: string;
        };
        PortfolioValidityResult: {
            receiver_is_same_portfolio: string;
            sender_portfolio_does_not_exist: string;
            receiver_portfolio_does_not_exist: string;
            sender_insufficient_balance: string;
            result: string;
        };
        TransferConditionResult: {
            condition: string;
            result: string;
        };
        AGId: string;
        AgentGroup: {
            _enum: {
                Full: string;
                Custom: string;
                ExceptMeta: string;
                PolymeshV1CAA: string;
                PolymeshV1PIA: string;
            };
        };
        Member: {
            id: string;
            expiry_at: string;
            inactive_from: string;
        };
        ItnRewardStatus: {
            _enum: {
                Unclaimed: string;
                Claimed: string;
            };
        };
        NFTId: string;
        NFTs: {
            ticker: string;
            ids: string;
        };
        FungibleToken: {
            ticker: string;
            amount: string;
        };
        OffChainAsset: {
            ticker: string;
            amount: string;
        };
        FungibleLeg: {
            sender: string;
            receiver: string;
            ticker: string;
            amount: string;
        };
        NonFungibleLeg: {
            sender: string;
            receiver: string;
            nfts: string;
        };
        OffChainLeg: {
            sender_identity: string;
            receiver_identity: string;
            ticker: string;
            amount: string;
        };
        Leg: {
            _enum: {
                Fungible: string;
                NonFungible: string;
                OffChain: string;
            };
        };
        FundDescription: {
            _enum: {
                Fungible: string;
                NonFungible: string;
            };
        };
        Fund: {
            description: string;
            memo: string;
        };
        NonFungibleType: {
            _enum: {
                Derivative: string;
                FixedIncome: string;
                Invoice: string;
                Custom: string;
            };
        };
        ExecuteInstructionInfo: {
            fungibleTokens: string;
            nonFungibleTokens: string;
            offChainAssets: string;
            consumedWeight: string;
            error: string;
        };
    };
    rpc: {
        identity: {
            isIdentityHasValidCdd: {
                description: string;
                params: {
                    name: string;
                    type: string;
                    isOptional: boolean;
                }[];
                type: string;
            };
            getAssetDid: {
                description: string;
                params: {
                    name: string;
                    type: string;
                    isOptional: boolean;
                }[];
                type: string;
            };
            getDidRecords: {
                description: string;
                params: {
                    name: string;
                    type: string;
                    isOptional: boolean;
                }[];
                type: string;
            };
            getDidStatus: {
                description: string;
                params: {
                    name: string;
                    type: string;
                    isOptional: boolean;
                }[];
                type: string;
            };
            getFilteredAuthorizations: {
                description: string;
                params: {
                    name: string;
                    type: string;
                    isOptional: boolean;
                }[];
                type: string;
            };
            getKeyIdentityData: {
                description: string;
                params: {
                    name: string;
                    type: string;
                    isOptional: boolean;
                }[];
                type: string;
            };
            validCDDClaims: {
                description: string;
                params: {
                    name: string;
                    type: string;
                    isOptional: boolean;
                }[];
                type: string;
            };
        };
        pips: {
            getVotes: {
                description: string;
                params: {
                    name: string;
                    type: string;
                    isOptional: boolean;
                }[];
                type: string;
            };
            proposedBy: {
                description: string;
                params: {
                    name: string;
                    type: string;
                    isOptional: boolean;
                }[];
                type: string;
            };
            votedOn: {
                description: string;
                params: {
                    name: string;
                    type: string;
                    isOptional: boolean;
                }[];
                type: string;
            };
        };
        protocolFee: {
            computeFee: {
                description: string;
                params: {
                    name: string;
                    type: string;
                    isOptional: boolean;
                }[];
                type: string;
            };
        };
        staking: {
            getCurve: {
                description: string;
                params: {
                    name: string;
                    type: string;
                    isOptional: boolean;
                }[];
                type: string;
            };
        };
        asset: {
            canTransferGranular: {
                description: string;
                params: {
                    name: string;
                    type: string;
                    isOptional: boolean;
                }[];
                type: string;
            };
        };
        group: {
            getCDDValidMembers: {
                description: string;
                params: {
                    name: string;
                    type: string;
                    isOptional: boolean;
                }[];
                type: string;
            };
            getGCValidMembers: {
                description: string;
                params: {
                    name: string;
                    type: string;
                    isOptional: boolean;
                }[];
                type: string;
            };
        };
        nft: {
            validateNFTTransfer: {
                description: string;
                params: {
                    name: string;
                    type: string;
                    isOptional: boolean;
                }[];
                type: string;
            };
        };
        settlement: {
            getExecuteInstructionInfo: {
                description: string;
                params: {
                    name: string;
                    type: string;
                    isOptional: boolean;
                }[];
                type: string;
            };
        };
    };
    runtime: {
        AssetApi: {
            methods: {
                can_transfer_granular: {
                    description: string;
                    params: {
                        name: string;
                        type: string;
                    }[];
                    type: string;
                };
            };
            version: number;
        }[];
        GroupApi: {
            methods: {
                get_cdd_valid_members: {
                    description: string;
                    params: never[];
                    type: string;
                };
                get_gc_valid_members: {
                    description: string;
                    params: never[];
                    type: string;
                };
            };
            version: number;
        }[];
        IdentityApi: {
            methods: {
                is_identity_has_valid_ddd: {
                    description: string;
                    params: {
                        name: string;
                        type: string;
                    }[];
                    type: string;
                };
                get_asset_did: {
                    description: string;
                    params: {
                        name: string;
                        type: string;
                    }[];
                    type: string;
                };
                get_did_records: {
                    description: string;
                    params: {
                        name: string;
                        type: string;
                    }[];
                    type: string;
                };
                get_did_status: {
                    description: string;
                    params: {
                        name: string;
                        type: string;
                    }[];
                    type: string;
                };
                get_filtered_authorizations: {
                    description: string;
                    params: {
                        name: string;
                        type: string;
                    }[];
                    type: string;
                };
                get_key_identity_data: {
                    description: string;
                    params: {
                        name: string;
                        type: string;
                    }[];
                    type: string;
                };
                valid_cdd_claims: {
                    description: string;
                    params: {
                        name: string;
                        type: string;
                    }[];
                    type: string;
                };
            };
            version: number;
        }[];
        NFTApi: {
            methods: {
                validate_nft_transfer: {
                    description: string;
                    params: {
                        name: string;
                        type: string;
                    }[];
                    type: string;
                };
            };
            version: number;
        }[];
        SettlementApi: {
            methods: {
                get_execute_instruction_info: {
                    description: string;
                    params: {
                        name: string;
                        type: string;
                    }[];
                    type: string;
                };
            };
            version: number;
        }[];
        PipsApi: {
            methods: {
                get_votes: {
                    description: string;
                    params: {
                        name: string;
                        type: string;
                    }[];
                    type: string;
                };
                proposed_by: {
                    description: string;
                    params: {
                        name: string;
                        type: string;
                    }[];
                    type: string;
                };
                voted_on: {
                    description: string;
                    params: {
                        name: string;
                        type: string;
                    }[];
                    type: string;
                };
            };
            version: number;
        }[];
        ProtocolFeeApi: {
            methods: {
                compute_fee: {
                    description: string;
                    params: {
                        name: string;
                        type: string;
                    }[];
                    type: string;
                };
            };
            version: number;
        }[];
        StakingApi: {
            methods: {
                get_curve: {
                    description: string;
                    params: never[];
                    type: string;
                };
            };
            version: number;
        }[];
    };
    signedExtensions: {
        StoreCallMetadata: {
            extrinsic: {};
            payload: {};
        };
    };
};
export default _default;
//# sourceMappingURL=schema.d.ts.map