"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MINIMUM_SQ_VERSION = exports.DEFAULT_CDD_ID = exports.MAX_LEGS_LENGTH = exports.STATE_RUNTIME_VERSION_CALL = exports.SYSTEM_VERSION_RPC_CALL = exports.SUPPORTED_SPEC_SEMVER = exports.SUPPORTED_SPEC_VERSION_RANGE = exports.SUPPORTED_NODE_SEMVER = exports.SUPPORTED_NODE_VERSION_RANGE = exports.ROOT_TYPES = exports.MAX_PAGE_SIZE = exports.DEFAULT_GQL_PAGE_SIZE = exports.TREASURY_MODULE_ADDRESS = exports.MAX_CONCURRENT_REQUESTS = exports.DEFAULT_SS58_FORMAT = exports.IGNORE_CHECKSUM = exports.DUMMY_ACCOUNT_ID = exports.MAX_BALANCE = exports.MAX_MEMO_LENGTH = exports.MAX_MODULE_LENGTH = exports.MAX_TICKER_LENGTH = exports.MAX_DECIMALS = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const semver_1 = require("semver");
const types_1 = require("../types");
/**
 * Maximum amount of decimals for on-chain values
 */
exports.MAX_DECIMALS = 6;
exports.MAX_TICKER_LENGTH = 12;
exports.MAX_MODULE_LENGTH = 32;
exports.MAX_MEMO_LENGTH = 32;
/**
 * Biggest possible number for on-chain balances
 */
exports.MAX_BALANCE = new bignumber_js_1.default(Math.pow(10, 12));
/**
 * Account ID used for certain calls that require it when the SDK is instanced without one
 */
exports.DUMMY_ACCOUNT_ID = '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY';
/**
 * Whether or not to ignore the checksum when encoding/decoding polkadot addresses
 */
exports.IGNORE_CHECKSUM = true;
/**
 * Default SS58 format for encoding addresses (used when the chain doesn't specify one)
 */
exports.DEFAULT_SS58_FORMAT = 42;
exports.MAX_CONCURRENT_REQUESTS = 200;
exports.TREASURY_MODULE_ADDRESS = 'modlpm/trsry';
exports.DEFAULT_GQL_PAGE_SIZE = 25;
/**
 * Limit to the page size used when fetching large amounts of data from the chain (same goes for `.multi` calls)
 */
exports.MAX_PAGE_SIZE = new bignumber_js_1.default(1000);
const didTypes = ['PolymeshPrimitivesIdentityId'];
const addressTypes = [
    'AccountId',
    'AccountIdOf',
    'LookupTarget',
    'Address',
    'AuthorityId',
    'SessionKey',
    'ValidatorId',
    'AuthorityId',
    'KeyType',
    'SessionKey',
];
const balanceTypes = ['Amount', 'AssetOf', 'Balance', 'BalanceOf'];
const numberTypes = ['u8', 'u16', 'u32', 'u64', 'u128', 'u256', 'U256', 'BlockNumber'];
const textTypes = ['String', 'Text', 'Ticker'];
const booleanTypes = ['bool'];
const dateTypes = ['Moment'];
const rootTypes = {};
didTypes.forEach(type => {
    rootTypes[type] = types_1.TransactionArgumentType.Did;
});
addressTypes.forEach(type => {
    rootTypes[type] = types_1.TransactionArgumentType.Address;
});
balanceTypes.forEach(type => {
    rootTypes[type] = types_1.TransactionArgumentType.Balance;
});
numberTypes.forEach(type => {
    rootTypes[type] = types_1.TransactionArgumentType.Number;
});
textTypes.forEach(type => {
    rootTypes[type] = types_1.TransactionArgumentType.Text;
});
booleanTypes.forEach(type => {
    rootTypes[type] = types_1.TransactionArgumentType.Boolean;
});
dateTypes.forEach(type => {
    rootTypes[type] = types_1.TransactionArgumentType.Date;
});
/**
 * Maps chain types to more human-readable `TransactionArgumentType`s
 */
exports.ROOT_TYPES = rootTypes;
/**
 * The Polymesh RPC node version range that is compatible with this version of the SDK
 */
exports.SUPPORTED_NODE_VERSION_RANGE = '5.4 || 6.0';
// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
exports.SUPPORTED_NODE_SEMVER = (0, semver_1.coerce)(exports.SUPPORTED_NODE_VERSION_RANGE).version;
/**
 * The Polymesh chain spec version range that is compatible with this version of the SDK
 */
exports.SUPPORTED_SPEC_VERSION_RANGE = '5.4 || 6.0';
// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
exports.SUPPORTED_SPEC_SEMVER = (0, semver_1.coerce)(exports.SUPPORTED_SPEC_VERSION_RANGE).version;
exports.SYSTEM_VERSION_RPC_CALL = {
    jsonrpc: '2.0',
    method: 'system_version',
    params: [],
    id: 'systemVersion',
};
exports.STATE_RUNTIME_VERSION_CALL = {
    jsonrpc: '2.0',
    method: 'state_getRuntimeVersion',
    params: [],
    id: 'specVersion',
};
/**
 * Maximum amount of legs allowed in a single instruction
 */
exports.MAX_LEGS_LENGTH = 10;
/**
 * Default CDD ID associated with an Identity on chain. Used for Identities onboarded without PUIS
 */
exports.DEFAULT_CDD_ID = '0x0000000000000000000000000000000000000000000000000000000000000000';
/**
 * Minimum version of Middleware V2 GraphQL Service (SubQuery) that is compatible with this version of the SDK
 */
exports.MINIMUM_SQ_VERSION = '9.7.0-alpha.6';
//# sourceMappingURL=constants.js.map