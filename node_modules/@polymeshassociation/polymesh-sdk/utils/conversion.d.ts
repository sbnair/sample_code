import { bool, Bytes, Option, Text, u8, U8aFixed, u16, u32, u64, u128, Vec } from '@polkadot/types';
import { AccountId, Balance, BlockHash, Hash, Permill } from '@polkadot/types/interfaces';
import { PalletCorporateActionsCaId, PalletCorporateActionsCaKind, PalletCorporateActionsCorporateAction, PalletCorporateActionsDistribution, PalletCorporateActionsInitiateCorporateActionArgs, PalletCorporateActionsRecordDateSpec, PalletCorporateActionsTargetIdentities, PalletStoFundraiser, PalletStoFundraiserTier, PalletStoPriceTier, PolymeshCommonUtilitiesCheckpointScheduleCheckpoints, PolymeshCommonUtilitiesProtocolFeeProtocolOp, PolymeshPrimitivesAgentAgentGroup, PolymeshPrimitivesAssetAssetType, PolymeshPrimitivesAssetIdentifier, PolymeshPrimitivesAssetMetadataAssetMetadataKey, PolymeshPrimitivesAssetMetadataAssetMetadataSpec, PolymeshPrimitivesAssetMetadataAssetMetadataValueDetail, PolymeshPrimitivesAssetNonFungibleType, PolymeshPrimitivesAuthorizationAuthorizationData, PolymeshPrimitivesCddId, PolymeshPrimitivesComplianceManagerComplianceRequirement, PolymeshPrimitivesConditionTargetIdentity, PolymeshPrimitivesConditionTrustedIssuer, PolymeshPrimitivesDocument, PolymeshPrimitivesDocumentHash, PolymeshPrimitivesIdentityClaimClaim, PolymeshPrimitivesIdentityClaimClaimType, PolymeshPrimitivesIdentityClaimScope, PolymeshPrimitivesIdentityId, PolymeshPrimitivesIdentityIdPortfolioId, PolymeshPrimitivesIdentityIdPortfolioKind, PolymeshPrimitivesMemo, PolymeshPrimitivesMultisigProposalStatus, PolymeshPrimitivesNftNftMetadataAttribute, PolymeshPrimitivesNftNfTs, PolymeshPrimitivesPortfolioFund, PolymeshPrimitivesPosRatio, PolymeshPrimitivesSecondaryKey, PolymeshPrimitivesSecondaryKeyPermissions, PolymeshPrimitivesSecondaryKeySignatory, PolymeshPrimitivesSettlementAffirmationStatus, PolymeshPrimitivesSettlementInstructionStatus, PolymeshPrimitivesSettlementLeg, PolymeshPrimitivesSettlementSettlementType, PolymeshPrimitivesSettlementVenueType, PolymeshPrimitivesStatisticsStat2ndKey, PolymeshPrimitivesStatisticsStatClaim, PolymeshPrimitivesStatisticsStatOpType, PolymeshPrimitivesStatisticsStatType, PolymeshPrimitivesStatisticsStatUpdate, PolymeshPrimitivesSubsetSubsetRestrictionPalletPermissions, PolymeshPrimitivesTicker, PolymeshPrimitivesTransferComplianceTransferCondition } from "../polkadot/types-lookup.ts";
import { ITuple } from '@polkadot/types/types';
import { BTreeSet } from '@polkadot/types-codec';
import BigNumber from 'bignumber.js';
import { Checkpoint, CheckpointSchedule, Context, CustomPermissionGroup, DefaultPortfolio, Identity, KnownPermissionGroup, NumberedPortfolio } from "../internal";
import { AuthTypeEnum } from "../middleware/enums";
import { Block, Claim as MiddlewareClaim, Instruction, Portfolio as MiddlewarePortfolio } from "../middleware/types";
import { MiddlewareScope } from "../middleware/typesV1";
import { AssetComplianceResult, AuthorizationType as MeshAuthorizationType, CanTransferResult, CddStatus, ComplianceRequirementResult, GranularCanTransferResult, Moment } from "../polkadot/polymesh";
import { AffirmationStatus, AssetDocument, Authorization, AuthorizationType, Claim, ClaimCountRestrictionValue, ClaimCountStatInput, ClaimData, ClaimPercentageRestrictionValue, ClaimType, Compliance, CorporateActionKind, CorporateActionParams, CorporateActionTargets, CountryCode, CountTransferRestrictionInput, DividendDistributionParams, EventIdentifier, FungiblePortfolioMovement, HistoricInstruction, IdentityWithClaims, InputCorporateActionTargets, InputCorporateActionTaxWithholdings, InputRequirement, InputStatClaim, InputStatType, InputTrustedClaimIssuer, InstructionEndCondition, KnownAssetType, KnownNftType, MetadataKeyId, MetadataSpec, MetadataType, MetadataValue, MetadataValueDetails, NftMetadataInput, NonFungiblePortfolioMovement, OfferingDetails, OfferingTier, PermissionedAccount, Permissions, PermissionsLike, PortfolioId, PortfolioLike, ProposalStatus, Requirement, RequirementCompliance, Scope, SecurityIdentifier, Signer, SignerValue, StatClaimType, StatType, Tier, TransactionPermissions, TransferBreakdown, TransferRestriction, TransferRestrictionType, TransferStatus, TrustedClaimIssuer, TxGroup, TxTag, VenueType } from "../types";
import { CorporateActionIdentifier, ExemptKey, ExtrinsicIdentifier, InstructionStatus, InternalAssetType, InternalNftType, PermissionGroupIdentifier, PolymeshTx, StatClaimInputType, StatClaimIssuer, TickerKey } from "../types/internal";
export * from "../generated/utils";
/**
 * Generate an Asset's DID from a ticker
 */
export declare function tickerToDid(ticker: string): string;
/**
 * @hidden
 */
export declare function booleanToBool(value: boolean, context: Context): bool;
/**
 * @hidden
 */
export declare function boolToBoolean(value: bool): boolean;
/**
 * @hidden
 */
export declare function stringToBytes(bytes: string, context: Context): Bytes;
/**
 * @hidden
 */
export declare function bytesToString(bytes: Bytes): string;
/**
 * @hidden
 */
export declare function stringToTicker(ticker: string, context: Context): PolymeshPrimitivesTicker;
/**
 * @hidden
 */
export declare function stringToTickerKey(ticker: string, context: Context): TickerKey;
/**
 * @hidden
 */
export declare function tickerToString(ticker: PolymeshPrimitivesTicker): string;
/**
 * @hidden
 */
export declare function stringToU8aFixed(value: string, context: Context): U8aFixed;
/**
 * @hidden
 */
export declare function dateToMoment(date: Date, context: Context): Moment;
/**
 * @hidden
 */
export declare function momentToDate(moment: Moment): Date;
/**
 * @hidden
 */
export declare function stringToAccountId(accountId: string, context: Context): AccountId;
/**
 * @hidden
 */
export declare function accountIdToString(accountId: AccountId): string;
/**
 * @hidden
 */
export declare function hashToString(hash: Hash): string;
/**
 * @hidden
 */
export declare function stringToHash(hash: string, context: Context): Hash;
/**
 * @hidden
 */
export declare function stringToBlockHash(blockHash: string, context: Context): BlockHash;
/**
 * @hidden
 */
export declare function stringToIdentityId(identityId: string, context: Context): PolymeshPrimitivesIdentityId;
/**
 * @hidden
 */
export declare function identityIdToString(identityId: PolymeshPrimitivesIdentityId): string;
/**
 * @hidden
 */
export declare function signerValueToSignatory(signer: SignerValue, context: Context): PolymeshPrimitivesSecondaryKeySignatory;
/**
 * @hidden
 */
export declare function signatoryToSignerValue(signatory: PolymeshPrimitivesSecondaryKeySignatory): SignerValue;
/**
 * @hidden
 */
export declare function signerToSignerValue(signer: Signer): SignerValue;
/**
 * @hidden
 */
export declare function signerValueToSigner(signerValue: SignerValue, context: Context): Signer;
/**
 * @hidden
 */
export declare function signerToSignatory(signer: Signer, context: Context): PolymeshPrimitivesSecondaryKeySignatory;
/**
 * @hidden
 */
export declare function signerToString(signer: string | Signer): string;
/**
 * @hidden
 */
export declare function u64ToBigNumber(value: u64): BigNumber;
/**
 * @hidden
 */
export declare function u128ToBigNumber(value: u128): BigNumber;
/**
 * @hidden
 */
export declare function bigNumberToU64(value: BigNumber, context: Context): u64;
/**
 * @hidden
 */
export declare function bigNumberToU128(value: BigNumber, context: Context): u128;
/**
 * @hidden
 */
export declare function percentageToPermill(value: BigNumber, context: Context): Permill;
/**
 * @hidden
 *
 * @note returns a percentage value ([0, 100])
 */
export declare function permillToBigNumber(value: Permill): BigNumber;
/**
 *  @hidden
 */
export declare function meshClaimToInputStatClaim(claim: PolymeshPrimitivesStatisticsStatClaim): InputStatClaim;
/**
 * @hidden
 */
export declare function claimCountToClaimCountRestrictionValue(value: ITuple<[
    PolymeshPrimitivesStatisticsStatClaim,
    PolymeshPrimitivesIdentityId,
    u64,
    Option<u64>
]>, context: Context): ClaimCountRestrictionValue;
/**
 * @hidden
 */
export declare function claimPercentageToClaimPercentageRestrictionValue(value: ITuple<[
    PolymeshPrimitivesStatisticsStatClaim,
    PolymeshPrimitivesIdentityId,
    Permill,
    Permill
]>, context: Context): ClaimPercentageRestrictionValue;
/**
 * @hidden
 */
export declare function meshPortfolioIdToPortfolio(portfolioId: PolymeshPrimitivesIdentityIdPortfolioId, context: Context): DefaultPortfolio | NumberedPortfolio;
/**
 * @hidden
 */
export declare function portfolioToPortfolioId(portfolio: DefaultPortfolio | NumberedPortfolio): PortfolioId;
/**
 * @hidden
 */
export declare function portfolioLikeToPortfolioId(value: PortfolioLike): PortfolioId;
/**
 * @hidden
 */
export declare function portfolioIdToPortfolio(portfolioId: PortfolioId, context: Context): DefaultPortfolio | NumberedPortfolio;
/**
 * @hidden
 */
export declare function portfolioLikeToPortfolio(value: PortfolioLike, context: Context): DefaultPortfolio | NumberedPortfolio;
/**
 * @hidden
 */
export declare function portfolioIdToMeshPortfolioId(portfolioId: PortfolioId, context: Context): PolymeshPrimitivesIdentityIdPortfolioId;
/**
 * @hidden
 */
export declare function portfolioToPortfolioKind(portfolio: DefaultPortfolio | NumberedPortfolio, context: Context): PolymeshPrimitivesIdentityIdPortfolioKind;
/**
 * @hidden
 */
export declare function stringToText(text: string, context: Context): Text;
/**
 * @hidden
 */
export declare function textToString(value: Text): string;
/**
 * Retrieve every Transaction Tag associated to a Transaction Group
 */
export declare function txGroupToTxTags(group: TxGroup): TxTag[];
/**
 * @hidden
 *
 * @note tags that don't belong to any group will be ignored.
 *   The same goes for tags that belong to a group that wasn't completed
 */
export declare function transactionPermissionsToTxGroups(permissions: TransactionPermissions | null): TxGroup[];
/**
 * @hidden
 */
export declare function transactionPermissionsToExtrinsicPermissions(transactionPermissions: TransactionPermissions | null, context: Context): PolymeshPrimitivesSubsetSubsetRestrictionPalletPermissions;
/**
 * @hidden
 */
export declare function permissionsToMeshPermissions(permissions: Permissions, context: Context): PolymeshPrimitivesSecondaryKeyPermissions;
/**
 * @hidden
 */
export declare function extrinsicPermissionsToTransactionPermissions(permissions: PolymeshPrimitivesSubsetSubsetRestrictionPalletPermissions): TransactionPermissions | null;
/**
 * @hidden
 */
export declare function meshPermissionsToPermissions(permissions: PolymeshPrimitivesSecondaryKeyPermissions, context: Context): Permissions;
/**
 * @hidden
 */
export declare function bigNumberToU32(value: BigNumber, context: Context): u32;
/**
 * @hidden
 */
export declare function u32ToBigNumber(value: u32): BigNumber;
/**
 * @hidden
 */
export declare function u16ToBigNumber(value: u16): BigNumber;
/**
 * @hidden
 */
export declare function u8ToBigNumber(value: u8): BigNumber;
/**
 * @hidden
 */
export declare function permissionGroupIdentifierToAgentGroup(permissionGroup: PermissionGroupIdentifier, context: Context): PolymeshPrimitivesAgentAgentGroup;
/**
 * @hidden
 */
export declare function agentGroupToPermissionGroupIdentifier(agentGroup: PolymeshPrimitivesAgentAgentGroup): PermissionGroupIdentifier;
/**
 * @hidden
 */
export declare function authorizationToAuthorizationData(auth: Authorization, context: Context): PolymeshPrimitivesAuthorizationAuthorizationData;
/**
 * @hidden
 */
export declare function authorizationTypeToMeshAuthorizationType(authorizationType: AuthorizationType, context: Context): MeshAuthorizationType;
/**
 * @hidden
 */
export declare function bigNumberToBalance(value: BigNumber, context: Context, divisible?: boolean): Balance;
/**
 * @hidden
 */
export declare function balanceToBigNumber(balance: Balance): BigNumber;
/**
 * @hidden
 */
export declare function agentGroupToPermissionGroup(agentGroup: PolymeshPrimitivesAgentAgentGroup, ticker: string, context: Context): KnownPermissionGroup | CustomPermissionGroup;
/**
 * @hidden
 */
export declare function authorizationDataToAuthorization(auth: PolymeshPrimitivesAuthorizationAuthorizationData, context: Context): Authorization;
/**
 * @hidden
 */
export declare function stringToMemo(value: string, context: Context): PolymeshPrimitivesMemo;
/**
 * @hidden
 */
export declare function u8ToTransferStatus(status: u8): TransferStatus;
/**
 * @hidden
 */
export declare function internalAssetTypeToAssetType(type: InternalAssetType, context: Context): PolymeshPrimitivesAssetAssetType;
/**
 * @hidden
 */
export declare function internalNftTypeToNftType(type: InternalNftType, context: Context): PolymeshPrimitivesAssetNonFungibleType;
/**
 * @hidden
 */
export declare function assetTypeToKnownOrId(assetType: PolymeshPrimitivesAssetAssetType): {
    type: 'Fungible';
    value: KnownAssetType | BigNumber;
} | {
    type: 'NonFungible';
    value: KnownNftType | BigNumber;
};
/**
 * @hidden
 */
export declare function posRatioToBigNumber(postRatio: PolymeshPrimitivesPosRatio): BigNumber;
/**
 * @hidden
 */
export declare function nameToAssetName(value: string, context: Context): Bytes;
/**
 * @hidden
 */
export declare function fundingRoundToAssetFundingRound(value: string, context: Context): Bytes;
/**
 * @hidden
 */
export declare function isIsinValid(isin: string): boolean;
/**
 * @hidden
 *
 * @note CINS and CUSIP use the same validation
 */
export declare function isCusipValid(cusip: string): boolean;
/**
 * @hidden
 */
export declare function isLeiValid(lei: string): boolean;
/**
 * Check if given string is a valid FIGI identifier
 *
 * A FIGI consists of three parts:
 *   - a two-character prefix which is a combination of upper case consonants with the following exceptions: BS, BM, GG, GB, GH, KY, VG
 *   - a 'G' as the third character;
 *   - an eight-character combination of upper case consonants and the numerals 0 – 9
 *   - a single check digit
 * @hidden
 */
export declare function isFigiValid(figi: string): boolean;
/**
 * @hidden
 */
export declare function securityIdentifierToAssetIdentifier(identifier: SecurityIdentifier, context: Context): PolymeshPrimitivesAssetIdentifier;
/**
 * @hidden
 */
export declare function assetIdentifierToSecurityIdentifier(identifier: PolymeshPrimitivesAssetIdentifier): SecurityIdentifier;
/**
 * @hidden
 */
export declare function stringToDocumentHash(docHash: string | undefined, context: Context): PolymeshPrimitivesDocumentHash;
/**
 * @hidden
 */
export declare function documentHashToString(docHash: PolymeshPrimitivesDocumentHash): string | undefined;
/**
 * @hidden
 */
export declare function assetDocumentToDocument({ uri, contentHash, name, filedAt, type }: AssetDocument, context: Context): PolymeshPrimitivesDocument;
/**
 * @hidden
 */
export declare function documentToAssetDocument({ uri, contentHash: hash, name, docType, filingDate, }: PolymeshPrimitivesDocument): AssetDocument;
/**
 * @hidden
 */
export declare function cddStatusToBoolean(cddStatus: CddStatus): boolean;
/**
 * @hidden
 */
export declare function canTransferResultToTransferStatus(canTransferResult: CanTransferResult): TransferStatus;
/**
 * @hidden
 */
export declare function scopeToMeshScope(scope: Scope, context: Context): PolymeshPrimitivesIdentityClaimScope;
/**
 * @hidden
 */
export declare function meshScopeToScope(scope: PolymeshPrimitivesIdentityClaimScope): Scope;
/**
 * @hidden
 */
export declare function stringToCddId(cddId: string, context: Context): PolymeshPrimitivesCddId;
/**
 * @hidden
 */
export declare function cddIdToString(cddId: PolymeshPrimitivesCddId): string;
/**
 * @hidden
 */
export declare function claimToMeshClaim(claim: Claim, context: Context): PolymeshPrimitivesIdentityClaimClaim;
/**
 * @hidden
 */
export declare function middlewareScopeToScope(scope: MiddlewareScope): Scope;
/**
 * @hidden
 */
export declare function scopeToMiddlewareScope(scope: Scope, padTicker?: boolean): MiddlewareScope;
/**
 * @hidden
 */
export declare function middlewareEventDetailsToEventIdentifier(block: Block, eventIdx?: number): EventIdentifier;
/**
 * @hidden
 */
export declare function meshClaimToClaim(claim: PolymeshPrimitivesIdentityClaimClaim): Claim;
/**
 * @hidden
 */
export declare function statsClaimToStatClaimInputType(claim: PolymeshPrimitivesStatisticsStatClaim): StatClaimInputType;
/**
 * @hidden
 */
export declare function stringToTargetIdentity(did: string | null, context: Context): PolymeshPrimitivesConditionTargetIdentity;
/**
 * @hidden
 */
export declare function meshClaimTypeToClaimType(claimType: PolymeshPrimitivesIdentityClaimClaimType): ClaimType;
/**
 * @hidden
 */
export declare function trustedIssuerToTrustedClaimIssuer(trustedIssuer: PolymeshPrimitivesConditionTrustedIssuer, context: Context): TrustedClaimIssuer;
/**
 * @hidden
 */
export declare function trustedClaimIssuerToTrustedIssuer(issuer: InputTrustedClaimIssuer, context: Context): PolymeshPrimitivesConditionTrustedIssuer;
/**
 * @hidden
 */
export declare function requirementToComplianceRequirement(requirement: InputRequirement, context: Context): PolymeshPrimitivesComplianceManagerComplianceRequirement;
/**
 * @hidden
 * @note - the data for this method comes from an RPC call, which hasn't been updated to the camelCase types
 */
export declare function complianceRequirementResultToRequirementCompliance(complianceRequirement: ComplianceRequirementResult, context: Context): RequirementCompliance;
/**
 * @hidden
 */
export declare function complianceRequirementToRequirement(complianceRequirement: PolymeshPrimitivesComplianceManagerComplianceRequirement, context: Context): Requirement;
/**
 * @hidden
 */
export declare function txTagToProtocolOp(tag: TxTag, context: Context): PolymeshCommonUtilitiesProtocolFeeProtocolOp;
/**
 * @hidden
 */
export declare function extrinsicIdentifierToTxTag(extrinsicIdentifier: ExtrinsicIdentifier): TxTag;
/**
 * @hidden
 */
export declare function txTagToExtrinsicIdentifier(tag: TxTag): ExtrinsicIdentifier;
/**
 * @hidden
 */
export declare function assetComplianceResultToCompliance(assetComplianceResult: AssetComplianceResult, context: Context): Compliance;
/**
 * @hidden
 */
export declare function moduleAddressToString(moduleAddress: string, context: Context): string;
/**
 * @hidden
 */
export declare function keyToAddress(key: string, context: Context): string;
/**
 * @hidden
 */
export declare function addressToKey(address: string, context: Context): string;
/**
 *
 */
export declare const coerceHexToString: (input: string) => string;
/**
 * @hidden
 */
export declare function transactionHexToTxTag(bytes: string, context: Context): TxTag;
/**
 * @hidden
 */
export declare function transactionToTxTag<Args extends unknown[]>(tx: PolymeshTx<Args>): TxTag;
/**
 * @hidden
 */
export declare function secondaryAccountToMeshSecondaryKey(secondaryKey: PermissionedAccount, context: Context): PolymeshPrimitivesSecondaryKey;
/**
 * @hidden
 */
export declare function meshVenueTypeToVenueType(type: PolymeshPrimitivesSettlementVenueType): VenueType;
/**
 * @hidden
 */
export declare function venueTypeToMeshVenueType(type: VenueType, context: Context): PolymeshPrimitivesSettlementVenueType;
/**
 * @hidden
 */
export declare function meshInstructionStatusToInstructionStatus(instruction: PolymeshPrimitivesSettlementInstructionStatus): InstructionStatus;
/**
 * @hidden
 */
export declare function meshAffirmationStatusToAffirmationStatus(status: PolymeshPrimitivesSettlementAffirmationStatus): AffirmationStatus;
/**
 * @hidden
 */
export declare function meshSettlementTypeToEndCondition(type: PolymeshPrimitivesSettlementSettlementType): InstructionEndCondition;
/**
 * @hidden
 */
export declare function endConditionToSettlementType(endCondition: InstructionEndCondition, context: Context): PolymeshPrimitivesSettlementSettlementType;
/**
 * @hidden
 */
export declare function middlewareClaimToClaimData(claim: MiddlewareClaim, context: Context): ClaimData;
/**
 * @hidden
 */
export declare function toIdentityWithClaimsArray(data: MiddlewareClaim[], context: Context, groupByAttribute: string): IdentityWithClaims[];
/**
 * @hidden
 */
export declare function nftToMeshNft(ticker: string, ids: BigNumber[], context: Context): PolymeshPrimitivesNftNfTs;
/**
 * @hidden
 */
export declare function fungibleMovementToPortfolioFund(portfolioItem: FungiblePortfolioMovement, context: Context): PolymeshPrimitivesPortfolioFund;
/**
 * @hidden
 */
export declare function nftMovementToPortfolioFund(portfolioItem: NonFungiblePortfolioMovement, context: Context): PolymeshPrimitivesPortfolioFund;
/**
 * @hidden
 */
export declare function claimTypeToMeshClaimType(claimType: ClaimType, context: Context): PolymeshPrimitivesIdentityClaimClaimType;
/**
 * @hidden
 */
export declare function claimIssuerToMeshClaimIssuer(claimIssuer: StatClaimIssuer, context: Context): [PolymeshPrimitivesIdentityClaimClaimType, PolymeshPrimitivesIdentityId];
/**
 * @hidden
 */
export declare function transferRestrictionToPolymeshTransferCondition(restriction: TransferRestriction, context: Context): PolymeshPrimitivesTransferComplianceTransferCondition;
/**
 * @hidden
 */
export declare function identitiesToBtreeSet(identities: Identity[], context: Context): BTreeSet<PolymeshPrimitivesIdentityId>;
/**
 * @hidden
 */
export declare function transferConditionToTransferRestriction(transferCondition: PolymeshPrimitivesTransferComplianceTransferCondition, context: Context): TransferRestriction;
/**
 * @hidden
 */
export declare function granularCanTransferResultToTransferBreakdown(result: GranularCanTransferResult, context: Context): TransferBreakdown;
/**
 * @hidden
 */
export declare function offeringTierToPriceTier(tier: OfferingTier, context: Context): PalletStoPriceTier;
/**
 * @hidden
 */
export declare function permissionsLikeToPermissions(permissionsLike: PermissionsLike, context: Context): Permissions;
/**
 * @hidden
 */
export declare function middlewarePortfolioToPortfolio(portfolio: MiddlewarePortfolio, context: Context): DefaultPortfolio | NumberedPortfolio;
/**
 * @hidden
 */
export declare function fundraiserTierToTier(fundraiserTier: PalletStoFundraiserTier): Tier;
/**
 * @hidden
 */
export declare function fundraiserToOfferingDetails(fundraiser: PalletStoFundraiser, name: Bytes, context: Context): OfferingDetails;
/**
 * @hidden
 */
export declare function meshCorporateActionToCorporateActionParams(corporateAction: PalletCorporateActionsCorporateAction, details: Bytes, context: Context): CorporateActionParams;
/**
 * @hidden
 */
export declare function corporateActionKindToCaKind(kind: CorporateActionKind, context: Context): PalletCorporateActionsCaKind;
/**
 * @hidden
 */
export declare function checkpointToRecordDateSpec(checkpoint: Checkpoint | Date | CheckpointSchedule, context: Context): PalletCorporateActionsRecordDateSpec;
/**
 * @hidden
 */
export declare function targetIdentitiesToCorporateActionTargets(targetIdentities: PalletCorporateActionsTargetIdentities, context: Context): CorporateActionTargets;
/**
 * @hidden
 */
export declare function targetsToTargetIdentities(targets: Omit<CorporateActionTargets, 'identities'> & {
    identities: (string | Identity)[];
}, context: Context): PalletCorporateActionsTargetIdentities;
/**
 * @hidden
 */
export declare function caTaxWithholdingsToMeshTaxWithholdings(taxWithholdings: InputCorporateActionTaxWithholdings, context: Context): [PolymeshPrimitivesIdentityId, Permill][];
/**
 * @hidden
 */
export declare function distributionToDividendDistributionParams(distribution: PalletCorporateActionsDistribution, context: Context): DividendDistributionParams;
/**
 * @hidden
 */
export declare function corporateActionIdentifierToCaId(corporateActionIdentifier: CorporateActionIdentifier, context: Context): PalletCorporateActionsCaId;
/**
 * @hidden
 */
export declare function corporateActionParamsToMeshCorporateActionArgs(params: {
    ticker: string;
    kind: CorporateActionKind;
    declarationDate: Date;
    checkpoint: Date | Checkpoint | CheckpointSchedule;
    description: string;
    targets: InputCorporateActionTargets | null;
    defaultTaxWithholding: BigNumber | null;
    taxWithholdings: InputCorporateActionTaxWithholdings | null;
}, context: Context): PalletCorporateActionsInitiateCorporateActionArgs;
/**
 * @hidden
 */
export declare function statisticsOpTypeToStatType(args: {
    op: PolymeshPrimitivesStatisticsStatOpType;
    claimIssuer?: [PolymeshPrimitivesIdentityClaimClaimType, PolymeshPrimitivesIdentityId];
}, context: Context): PolymeshPrimitivesStatisticsStatType;
/**
 * @hidden
 *
 * The chain requires BTreeSets to be sorted, Polkadot.js will shallow sort elements when calling `createType`,
 * however it will not look deeper at claimType. This function works around this short fall by sorting based on `claimType`
 * `createType` built in sorting is relied on otherwise.
 */
export declare function sortStatsByClaimType(stats: PolymeshPrimitivesStatisticsStatType[]): PolymeshPrimitivesStatisticsStatType[];
/**
 * @hidden
 */
export declare function statisticStatTypesToBtreeStatType(stats: PolymeshPrimitivesStatisticsStatType[], context: Context): BTreeSet<PolymeshPrimitivesStatisticsStatType>;
/**
 * @hidden
 */
export declare function transferConditionsToBtreeTransferConditions(conditions: PolymeshPrimitivesTransferComplianceTransferCondition[], context: Context): BTreeSet<PolymeshPrimitivesTransferComplianceTransferCondition>;
/**
 * @hidden
 */
export declare function keyAndValueToStatUpdate(key2: PolymeshPrimitivesStatisticsStat2ndKey, value: u128, context: Context): PolymeshPrimitivesStatisticsStatUpdate;
/**
 * @hidden
 */
export declare function statUpdatesToBtreeStatUpdate(statUpdates: PolymeshPrimitivesStatisticsStatUpdate[], context: Context): BTreeSet<PolymeshPrimitivesStatisticsStatUpdate>;
/**
 * @hidden
 */
export declare function meshStatToStatType(rawStat: PolymeshPrimitivesStatisticsStatType): StatType;
/**
 * @hidden
 */
export declare function statTypeToStatOpType(type: StatType, context: Context): PolymeshPrimitivesStatisticsStatOpType;
/**
 * @hidden
 */
export declare function transferRestrictionTypeToStatOpType(type: TransferRestrictionType, context: Context): PolymeshPrimitivesStatisticsStatOpType;
/**
 * Scoped stats are a map of maps, e.g. Jurisdiction has a counter for each CountryCode. a 2ndKey specifies what Country count to use
 * @hidden
 */
export declare function createStat2ndKey(type: 'NoClaimStat' | StatClaimType, context: Context, claimStat?: 'yes' | 'no' | CountryCode): PolymeshPrimitivesStatisticsStat2ndKey;
/**
 * @hidden
 * The chain requires BTreeSets to be sorted. While polkadot.js createType will provide shallow sorting
 * it fails to consider the nested CountryCode values. This works around the shortfall, but relies on `createType`
 * sorting for otherwise
 */
export declare function sortTransferRestrictionByClaimValue(conditions: PolymeshPrimitivesTransferComplianceTransferCondition[]): PolymeshPrimitivesTransferComplianceTransferCondition[];
/**
 * @hidden
 */
export declare function complianceConditionsToBtreeSet(conditions: PolymeshPrimitivesTransferComplianceTransferCondition[], context: Context): BTreeSet<PolymeshPrimitivesTransferComplianceTransferCondition>;
/**
 * @hidden
 */
export declare function toExemptKey(tickerKey: TickerKey, op: PolymeshPrimitivesStatisticsStatOpType, claimType?: ClaimType): ExemptKey;
/**
 * @hidden
 */
export declare function claimCountStatInputToStatUpdates(args: ClaimCountStatInput, context: Context): BTreeSet<PolymeshPrimitivesStatisticsStatUpdate>;
/**
 * @hidden
 * transforms a non scoped count stat to a StatUpdate type
 */
export declare function countStatInputToStatUpdates(args: CountTransferRestrictionInput, context: Context): BTreeSet<PolymeshPrimitivesStatisticsStatUpdate>;
/**
 * @hidden
 */
export declare function inputStatTypeToMeshStatType(input: InputStatType, context: Context): PolymeshPrimitivesStatisticsStatType;
/**
 * @hidden
 */
export declare function meshProposalStatusToProposalStatus(status: PolymeshPrimitivesMultisigProposalStatus, expiry: Date | null): ProposalStatus;
/**
 * @hidden
 */
export declare function metadataSpecToMeshMetadataSpec(specs: MetadataSpec, context: Context): PolymeshPrimitivesAssetMetadataAssetMetadataSpec;
/**
 * @hidden
 */
export declare function meshMetadataSpecToMetadataSpec(rawSpecs?: Option<PolymeshPrimitivesAssetMetadataAssetMetadataSpec>): MetadataSpec;
/**
 * @hidden
 */
export declare function metadataToMeshMetadataKey(type: MetadataType, id: BigNumber, context: Context): PolymeshPrimitivesAssetMetadataAssetMetadataKey;
/**
 * @hidden
 */
export declare function meshMetadataValueToMetadataValue(rawValue: Option<Bytes>, rawDetails: Option<PolymeshPrimitivesAssetMetadataAssetMetadataValueDetail>): MetadataValue | null;
/**
 * @hidden
 */
export declare function metadataValueToMeshMetadataValue(value: string, context: Context): Bytes;
/**
 * @hidden
 */
export declare function metadataValueDetailToMeshMetadataValueDetail(details: MetadataValueDetails, context: Context): PolymeshPrimitivesAssetMetadataAssetMetadataValueDetail;
/**
 * @hidden
 */
export declare function instructionMemoToString(value: U8aFixed): string;
/**
 * @hidden
 */
export declare function middlewareInstructionToHistoricInstruction(instruction: Instruction, context: Context): HistoricInstruction;
/**
 * @hidden
 */
export declare function expiryToMoment(expiry: Date | undefined, context: Context): Moment | null;
/**
 * @hidden
 * Note: currently only supports fungible legs, see `portfolioToPortfolioKind` for exemplary API
 */
export declare function middlewarePortfolioDataToPortfolio(data: {
    did: string;
    kind: {
        default: null;
    } | {
        user: number;
    };
}, context: Context): DefaultPortfolio | NumberedPortfolio;
/**
 * @hidden
 */
export declare function legToSettlementLeg(leg: {
    Fungible: {
        sender: PolymeshPrimitivesIdentityIdPortfolioId;
        receiver: PolymeshPrimitivesIdentityIdPortfolioId;
        ticker: PolymeshPrimitivesTicker;
        amount: Balance;
    };
}, context: Context): PolymeshPrimitivesSettlementLeg;
/**
 * @hidden
 */
export declare function middlewareAgentGroupDataToPermissionGroup(agentGroupData: Record<string, Record<string, null | number>>, context: Context): KnownPermissionGroup | CustomPermissionGroup;
/**
 * @hidden
 */
export declare function datesToScheduleCheckpoints(points: Date[], context: Context): PolymeshCommonUtilitiesCheckpointScheduleCheckpoints;
/**
 * @hidden
 */
export declare function middlewarePermissionsDataToPermissions(permissionsData: string, context: Context): Permissions;
/**
 * @hidden
 */
export declare function middlewareAuthorizationDataToAuthorization(context: Context, type: AuthTypeEnum, data?: string): Authorization;
/**
 * @hidden
 */
export declare function collectionKeysToMetadataKeys(keys: {
    type: MetadataType;
    id: BigNumber;
}[], context: Context): Vec<PolymeshPrimitivesAssetMetadataAssetMetadataKey>;
/**
 * @hidden
 */
export declare function meshMetadataKeyToMetadataKey(rawKey: PolymeshPrimitivesAssetMetadataAssetMetadataKey, ticker: string): MetadataKeyId;
/**
 * @hidden
 */
export declare function meshNftToNftId(rawInfo: PolymeshPrimitivesNftNfTs): {
    ticker: string;
    ids: BigNumber[];
};
/**
 * @hidden
 */
export declare function nftInputToNftMetadataAttribute(nftInfo: NftMetadataInput, context: Context): PolymeshPrimitivesNftNftMetadataAttribute;
/**
 * @hidden
 */
export declare function nftInputToNftMetadataVec(nftInfo: NftMetadataInput[], context: Context): Vec<PolymeshPrimitivesNftNftMetadataAttribute>;
//# sourceMappingURL=conversion.d.ts.map