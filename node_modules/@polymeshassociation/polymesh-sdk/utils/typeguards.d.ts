import { Account, AuthorizationRequest, BaseAsset, Checkpoint, CheckpointSchedule, CorporateAction, CustomPermissionGroup, DefaultPortfolio, DefaultTrustedClaimIssuer, DividendDistribution, Entity, FungibleAsset, Identity, Instruction, KnownPermissionGroup, NftCollection, NumberedPortfolio, Offering, PolymeshError, PolymeshTransaction, PolymeshTransactionBatch, TickerReservation, Venue } from "../internal";
import { AccreditedClaim, AffiliateClaim, BlockedClaim, BuyLockupClaim, CddClaim, CddProviderRole, Claim, ExemptedClaim, IdentityCondition, IdentityRole, InputCondition, InputConditionBase, JurisdictionClaim, KycClaim, MultiClaimCondition, PortfolioCustodianRole, ProposalStatus, Role, ScopedClaim, SellLockupClaim, SingleClaimCondition, TickerOwnerRole, UnscopedClaim, VenueOwnerRole } from "../types";
/**
 * Return whether value is an Entity
 */
export declare function isEntity<Identifiers = unknown, HumanReadable = unknown>(value: unknown): value is Entity<Identifiers, HumanReadable>;
/**
 * Return whether value is an Account
 */
export declare function isAccount(value: unknown): value is Account;
/**
 * Return whether value is an AuthorizationRequest
 */
export declare function isAuthorizationRequest(value: unknown): value is AuthorizationRequest;
/**
 * Return whether value is a Checkpoint
 */
export declare function isCheckpoint(value: unknown): value is Checkpoint;
/**
 * Return whether value is a CheckpointSchedule
 */
export declare function isCheckpointSchedule(value: unknown): value is CheckpointSchedule;
/**
 * Return whether value is a CorporateAction
 */
export declare function isCorporateAction(value: unknown): value is CorporateAction;
/**
 * Return whether value is a CustomPermissionGroup
 */
export declare function isCustomPermissionGroup(value: unknown): value is CustomPermissionGroup;
/**
 * Return whether value is a DefaultPortfolio
 */
export declare function isDefaultPortfolio(value: unknown): value is DefaultPortfolio;
/**
 * Return whether value is a DefaultTrustedClaimIssuer
 */
export declare function isDefaultTrustedClaimIssuer(value: unknown): value is DefaultTrustedClaimIssuer;
/**
 * Return whether value is a DividendDistribution
 */
export declare function isDividendDistribution(value: unknown): value is DividendDistribution;
/**
 * Return whether value is an Identity
 */
export declare function isIdentity(value: unknown): value is Identity;
/**
 * Return whether value is an Instruction
 */
export declare function isInstruction(value: unknown): value is Instruction;
/**
 * Return whether value is a KnownPermissionGroup
 */
export declare function isKnownPermissionGroup(value: unknown): value is KnownPermissionGroup;
/**
 * Return whether value is a NumberedPortfolio
 */
export declare function isNumberedPortfolio(value: unknown): value is NumberedPortfolio;
/**
 * Return whether value is an Offering
 */
export declare function isOffering(value: unknown): value is Offering;
/**
 * Return whether value is a TickerReservation
 */
export declare function isTickerReservation(value: unknown): value is TickerReservation;
/**
 * Return whether value is a Venue
 */
export declare function isVenue(value: unknown): value is Venue;
/**
 * Return whether value is a PolymeshError
 */
export declare function isPolymeshError(value: unknown): value is PolymeshError;
/**
 * Return whether a Claim is an UnscopedClaim
 */
export declare function isUnscopedClaim(claim: Claim): claim is UnscopedClaim;
/**
 * Return whether a Claim is a ScopedClaim
 */
export declare function isScopedClaim(claim: Claim): claim is ScopedClaim;
/**
 * Return whether Claim is an AccreditedClaim
 */
export declare function isAccreditedClaim(claim: Claim): claim is AccreditedClaim;
/**
 * Return whether Claim is an AffiliateClaim
 */
export declare function isAffiliateClaim(claim: Claim): claim is AffiliateClaim;
/**
 * Return whether Claim is a BuyLockupClaim
 */
export declare function isBuyLockupClaim(claim: Claim): claim is BuyLockupClaim;
/**
 * Return whether Claim is a SellLockupClaim
 */
export declare function isSellLockupClaim(claim: Claim): claim is SellLockupClaim;
/**
 * Return whether Claim is a CddClaim
 */
export declare function isCddClaim(claim: Claim): claim is CddClaim;
/**
 * Return whether Claim is a KycClaim
 */
export declare function isKycClaim(claim: Claim): claim is KycClaim;
/**
 * Return whether Claim is a JurisdictionClaim
 */
export declare function isJurisdictionClaim(claim: Claim): claim is JurisdictionClaim;
/**
 * Return whether Claim is an ExemptedClaim
 */
export declare function isExemptedClaim(claim: Claim): claim is ExemptedClaim;
/**
 * Return whether Claim is a BlockedClaim
 */
export declare function isBlockedClaim(claim: Claim): claim is BlockedClaim;
/**
 * Return whether Condition has a single Claim
 */
export declare function isSingleClaimCondition(condition: InputCondition): condition is InputConditionBase & SingleClaimCondition;
/**
 * Return whether Condition has multiple Claims
 */
export declare function isMultiClaimCondition(condition: InputCondition): condition is InputConditionBase & MultiClaimCondition;
/**
 * Return whether Condition has multiple Claims
 */
export declare function isIdentityCondition(condition: InputCondition): condition is InputConditionBase & IdentityCondition;
/**
 * Return whether Role is PortfolioCustodianRole
 */
export declare function isPortfolioCustodianRole(role: Role): role is PortfolioCustodianRole;
/**
 * Return whether Role is VenueOwnerRole
 */
export declare function isVenueOwnerRole(role: Role): role is VenueOwnerRole;
/**
 * Return whether Role is CddProviderRole
 */
export declare function isCddProviderRole(role: Role): role is CddProviderRole;
/**
 * Return whether Role is TickerOwnerRole
 */
export declare function isTickerOwnerRole(role: Role): role is TickerOwnerRole;
/**
 * Return whether Role is IdentityRole
 */
export declare function isIdentityRole(role: Role): role is IdentityRole;
/**
 * Return whether value is a PolymeshTransaction
 */
export declare function isPolymeshTransaction<ReturnValue, TransformedReturnValue = ReturnValue, Args extends unknown[] = unknown[]>(value: unknown): value is PolymeshTransaction<ReturnValue, TransformedReturnValue, Args>;
/**
 * Return whether value is a PolymeshTransactionBatch
 */
export declare function isPolymeshTransactionBatch<ReturnValue, TransformedReturnValue = ReturnValue, Args extends unknown[][] = unknown[][]>(value: unknown): value is PolymeshTransactionBatch<ReturnValue, TransformedReturnValue, Args>;
/**
 * @hidden
 */
export declare function isProposalStatus(status: string): status is ProposalStatus;
/**
 * Return whether an asset is a FungibleAsset
 */
export declare function isFungibleAsset(asset: BaseAsset): asset is FungibleAsset;
/**
 * Return whether an asset is a NftCollection
 */
export declare function isNftCollection(asset: BaseAsset): asset is NftCollection;
//# sourceMappingURL=typeguards.d.ts.map